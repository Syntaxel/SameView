/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/simple-peer";
exports.ids = ["vendor-chunks/simple-peer"];
exports.modules = {

/***/ "(ssr)/./node_modules/simple-peer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/simple-peer/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ const debug = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\")(\"simple-peer\");\nconst getBrowserRTC = __webpack_require__(/*! get-browser-rtc */ \"(ssr)/./node_modules/get-browser-rtc/index.js\");\nconst randombytes = __webpack_require__(/*! randombytes */ \"(ssr)/./node_modules/randombytes/index.js\");\nconst stream = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\");\nconst queueMicrotask = __webpack_require__(/*! queue-microtask */ \"(ssr)/./node_modules/queue-microtask/index.js\") // TODO: remove when Node 10 is not supported\n;\nconst errCode = __webpack_require__(/*! err-code */ \"(ssr)/./node_modules/err-code/index.js\");\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\nconst MAX_BUFFERED_AMOUNT = 64 * 1024;\nconst ICECOMPLETE_TIMEOUT = 5 * 1000;\nconst CHANNEL_CLOSING_TIMEOUT = 5 * 1000;\n// HACK: Filter trickle lines when trickle is disabled #354\nfunction filterTrickle(sdp) {\n    return sdp.replace(/a=ice-options:trickle\\s\\n/g, \"\");\n}\nfunction warn(message) {\n    console.warn(message);\n}\n/**\n * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.\n * Duplex stream.\n * @param {Object} opts\n */ class Peer extends stream.Duplex {\n    constructor(opts){\n        opts = Object.assign({\n            allowHalfOpen: false\n        }, opts);\n        super(opts);\n        this._id = randombytes(4).toString(\"hex\").slice(0, 7);\n        this._debug(\"new peer %o\", opts);\n        this.channelName = opts.initiator ? opts.channelName || randombytes(20).toString(\"hex\") : null;\n        this.initiator = opts.initiator || false;\n        this.channelConfig = opts.channelConfig || Peer.channelConfig;\n        this.channelNegotiated = this.channelConfig.negotiated;\n        this.config = Object.assign({}, Peer.config, opts.config);\n        this.offerOptions = opts.offerOptions || {};\n        this.answerOptions = opts.answerOptions || {};\n        this.sdpTransform = opts.sdpTransform || ((sdp)=>sdp);\n        this.streams = opts.streams || (opts.stream ? [\n            opts.stream\n        ] : [] // support old \"stream\" option\n        );\n        this.trickle = opts.trickle !== undefined ? opts.trickle : true;\n        this.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false;\n        this.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT;\n        this.destroyed = false;\n        this.destroying = false;\n        this._connected = false;\n        this.remoteAddress = undefined;\n        this.remoteFamily = undefined;\n        this.remotePort = undefined;\n        this.localAddress = undefined;\n        this.localFamily = undefined;\n        this.localPort = undefined;\n        this._wrtc = opts.wrtc && typeof opts.wrtc === \"object\" ? opts.wrtc : getBrowserRTC();\n        if (!this._wrtc) {\n            if (true) {\n                throw errCode(new Error(\"No WebRTC support: Specify `opts.wrtc` option in this environment\"), \"ERR_WEBRTC_SUPPORT\");\n            } else {}\n        }\n        this._pcReady = false;\n        this._channelReady = false;\n        this._iceComplete = false // ice candidate trickle done (got null candidate)\n        ;\n        this._iceCompleteTimer = null // send an offer/answer anyway after some timeout\n        ;\n        this._channel = null;\n        this._pendingCandidates = [];\n        this._isNegotiating = false // is this peer waiting for negotiation to complete?\n        ;\n        this._firstNegotiation = true;\n        this._batchedNegotiation = false // batch synchronous negotiations\n        ;\n        this._queuedNegotiation = false // is there a queued negotiation request?\n        ;\n        this._sendersAwaitingStable = [];\n        this._senderMap = new Map();\n        this._closingInterval = null;\n        this._remoteTracks = [];\n        this._remoteStreams = [];\n        this._chunk = null;\n        this._cb = null;\n        this._interval = null;\n        try {\n            this._pc = new this._wrtc.RTCPeerConnection(this.config);\n        } catch (err) {\n            this.destroy(errCode(err, \"ERR_PC_CONSTRUCTOR\"));\n            return;\n        }\n        // We prefer feature detection whenever possible, but sometimes that's not\n        // possible for certain implementations.\n        this._isReactNativeWebrtc = typeof this._pc._peerConnectionId === \"number\";\n        this._pc.oniceconnectionstatechange = ()=>{\n            this._onIceStateChange();\n        };\n        this._pc.onicegatheringstatechange = ()=>{\n            this._onIceStateChange();\n        };\n        this._pc.onconnectionstatechange = ()=>{\n            this._onConnectionStateChange();\n        };\n        this._pc.onsignalingstatechange = ()=>{\n            this._onSignalingStateChange();\n        };\n        this._pc.onicecandidate = (event)=>{\n            this._onIceCandidate(event);\n        };\n        // HACK: Fix for odd Firefox behavior, see: https://github.com/feross/simple-peer/pull/783\n        if (typeof this._pc.peerIdentity === \"object\") {\n            this._pc.peerIdentity.catch((err)=>{\n                this.destroy(errCode(err, \"ERR_PC_PEER_IDENTITY\"));\n            });\n        }\n        // Other spec events, unused by this implementation:\n        // - onconnectionstatechange\n        // - onicecandidateerror\n        // - onfingerprintfailure\n        // - onnegotiationneeded\n        if (this.initiator || this.channelNegotiated) {\n            this._setupData({\n                channel: this._pc.createDataChannel(this.channelName, this.channelConfig)\n            });\n        } else {\n            this._pc.ondatachannel = (event)=>{\n                this._setupData(event);\n            };\n        }\n        if (this.streams) {\n            this.streams.forEach((stream)=>{\n                this.addStream(stream);\n            });\n        }\n        this._pc.ontrack = (event)=>{\n            this._onTrack(event);\n        };\n        this._debug(\"initial negotiation\");\n        this._needsNegotiation();\n        this._onFinishBound = ()=>{\n            this._onFinish();\n        };\n        this.once(\"finish\", this._onFinishBound);\n    }\n    get bufferSize() {\n        return this._channel && this._channel.bufferedAmount || 0;\n    }\n    // HACK: it's possible channel.readyState is \"closing\" before peer.destroy() fires\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n    get connected() {\n        return this._connected && this._channel.readyState === \"open\";\n    }\n    address() {\n        return {\n            port: this.localPort,\n            family: this.localFamily,\n            address: this.localAddress\n        };\n    }\n    signal(data) {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot signal after peer is destroyed\"), \"ERR_DESTROYED\");\n        if (typeof data === \"string\") {\n            try {\n                data = JSON.parse(data);\n            } catch (err) {\n                data = {};\n            }\n        }\n        this._debug(\"signal()\");\n        if (data.renegotiate && this.initiator) {\n            this._debug(\"got request to renegotiate\");\n            this._needsNegotiation();\n        }\n        if (data.transceiverRequest && this.initiator) {\n            this._debug(\"got request for transceiver\");\n            this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init);\n        }\n        if (data.candidate) {\n            if (this._pc.remoteDescription && this._pc.remoteDescription.type) {\n                this._addIceCandidate(data.candidate);\n            } else {\n                this._pendingCandidates.push(data.candidate);\n            }\n        }\n        if (data.sdp) {\n            this._pc.setRemoteDescription(new this._wrtc.RTCSessionDescription(data)).then(()=>{\n                if (this.destroyed) return;\n                this._pendingCandidates.forEach((candidate)=>{\n                    this._addIceCandidate(candidate);\n                });\n                this._pendingCandidates = [];\n                if (this._pc.remoteDescription.type === \"offer\") this._createAnswer();\n            }).catch((err)=>{\n                this.destroy(errCode(err, \"ERR_SET_REMOTE_DESCRIPTION\"));\n            });\n        }\n        if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) {\n            this.destroy(errCode(new Error(\"signal() called with invalid signal data\"), \"ERR_SIGNALING\"));\n        }\n    }\n    _addIceCandidate(candidate) {\n        const iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate);\n        this._pc.addIceCandidate(iceCandidateObj).catch((err)=>{\n            if (!iceCandidateObj.address || iceCandidateObj.address.endsWith(\".local\")) {\n                warn(\"Ignoring unsupported ICE candidate.\");\n            } else {\n                this.destroy(errCode(err, \"ERR_ADD_ICE_CANDIDATE\"));\n            }\n        });\n    }\n    /**\n   * Send text/binary data to the remote peer.\n   * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk\n   */ send(chunk) {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot send after peer is destroyed\"), \"ERR_DESTROYED\");\n        this._channel.send(chunk);\n    }\n    /**\n   * Add a Transceiver to the connection.\n   * @param {String} kind\n   * @param {Object} init\n   */ addTransceiver(kind, init) {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot addTransceiver after peer is destroyed\"), \"ERR_DESTROYED\");\n        this._debug(\"addTransceiver()\");\n        if (this.initiator) {\n            try {\n                this._pc.addTransceiver(kind, init);\n                this._needsNegotiation();\n            } catch (err) {\n                this.destroy(errCode(err, \"ERR_ADD_TRANSCEIVER\"));\n            }\n        } else {\n            this.emit(\"signal\", {\n                type: \"transceiverRequest\",\n                transceiverRequest: {\n                    kind,\n                    init\n                }\n            });\n        }\n    }\n    /**\n   * Add a MediaStream to the connection.\n   * @param {MediaStream} stream\n   */ addStream(stream) {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot addStream after peer is destroyed\"), \"ERR_DESTROYED\");\n        this._debug(\"addStream()\");\n        stream.getTracks().forEach((track)=>{\n            this.addTrack(track, stream);\n        });\n    }\n    /**\n   * Add a MediaStreamTrack to the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */ addTrack(track, stream) {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot addTrack after peer is destroyed\"), \"ERR_DESTROYED\");\n        this._debug(\"addTrack()\");\n        const submap = this._senderMap.get(track) || new Map() // nested Maps map [track, stream] to sender\n        ;\n        let sender = submap.get(stream);\n        if (!sender) {\n            sender = this._pc.addTrack(track, stream);\n            submap.set(stream, sender);\n            this._senderMap.set(track, submap);\n            this._needsNegotiation();\n        } else if (sender.removed) {\n            throw errCode(new Error(\"Track has been removed. You should enable/disable tracks that you want to re-add.\"), \"ERR_SENDER_REMOVED\");\n        } else {\n            throw errCode(new Error(\"Track has already been added to that stream.\"), \"ERR_SENDER_ALREADY_ADDED\");\n        }\n    }\n    /**\n   * Replace a MediaStreamTrack by another in the connection.\n   * @param {MediaStreamTrack} oldTrack\n   * @param {MediaStreamTrack} newTrack\n   * @param {MediaStream} stream\n   */ replaceTrack(oldTrack, newTrack, stream) {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot replaceTrack after peer is destroyed\"), \"ERR_DESTROYED\");\n        this._debug(\"replaceTrack()\");\n        const submap = this._senderMap.get(oldTrack);\n        const sender = submap ? submap.get(stream) : null;\n        if (!sender) {\n            throw errCode(new Error(\"Cannot replace track that was never added.\"), \"ERR_TRACK_NOT_ADDED\");\n        }\n        if (newTrack) this._senderMap.set(newTrack, submap);\n        if (sender.replaceTrack != null) {\n            sender.replaceTrack(newTrack);\n        } else {\n            this.destroy(errCode(new Error(\"replaceTrack is not supported in this browser\"), \"ERR_UNSUPPORTED_REPLACETRACK\"));\n        }\n    }\n    /**\n   * Remove a MediaStreamTrack from the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */ removeTrack(track, stream) {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot removeTrack after peer is destroyed\"), \"ERR_DESTROYED\");\n        this._debug(\"removeSender()\");\n        const submap = this._senderMap.get(track);\n        const sender = submap ? submap.get(stream) : null;\n        if (!sender) {\n            throw errCode(new Error(\"Cannot remove track that was never added.\"), \"ERR_TRACK_NOT_ADDED\");\n        }\n        try {\n            sender.removed = true;\n            this._pc.removeTrack(sender);\n        } catch (err) {\n            if (err.name === \"NS_ERROR_UNEXPECTED\") {\n                this._sendersAwaitingStable.push(sender) // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874\n                ;\n            } else {\n                this.destroy(errCode(err, \"ERR_REMOVE_TRACK\"));\n            }\n        }\n        this._needsNegotiation();\n    }\n    /**\n   * Remove a MediaStream from the connection.\n   * @param {MediaStream} stream\n   */ removeStream(stream) {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot removeStream after peer is destroyed\"), \"ERR_DESTROYED\");\n        this._debug(\"removeSenders()\");\n        stream.getTracks().forEach((track)=>{\n            this.removeTrack(track, stream);\n        });\n    }\n    _needsNegotiation() {\n        this._debug(\"_needsNegotiation\");\n        if (this._batchedNegotiation) return; // batch synchronous renegotiations\n        this._batchedNegotiation = true;\n        queueMicrotask(()=>{\n            this._batchedNegotiation = false;\n            if (this.initiator || !this._firstNegotiation) {\n                this._debug(\"starting batched negotiation\");\n                this.negotiate();\n            } else {\n                this._debug(\"non-initiator initial negotiation request discarded\");\n            }\n            this._firstNegotiation = false;\n        });\n    }\n    negotiate() {\n        if (this.destroying) return;\n        if (this.destroyed) throw errCode(new Error(\"cannot negotiate after peer is destroyed\"), \"ERR_DESTROYED\");\n        if (this.initiator) {\n            if (this._isNegotiating) {\n                this._queuedNegotiation = true;\n                this._debug(\"already negotiating, queueing\");\n            } else {\n                this._debug(\"start negotiation\");\n                setTimeout(()=>{\n                    this._createOffer();\n                }, 0);\n            }\n        } else {\n            if (this._isNegotiating) {\n                this._queuedNegotiation = true;\n                this._debug(\"already negotiating, queueing\");\n            } else {\n                this._debug(\"requesting negotiation from initiator\");\n                this.emit(\"signal\", {\n                    type: \"renegotiate\",\n                    renegotiate: true\n                });\n            }\n        }\n        this._isNegotiating = true;\n    }\n    // TODO: Delete this method once readable-stream is updated to contain a default\n    // implementation of destroy() that automatically calls _destroy()\n    // See: https://github.com/nodejs/readable-stream/issues/283\n    destroy(err) {\n        this._destroy(err, ()=>{});\n    }\n    _destroy(err, cb) {\n        if (this.destroyed || this.destroying) return;\n        this.destroying = true;\n        this._debug(\"destroying (error: %s)\", err && (err.message || err));\n        queueMicrotask(()=>{\n            this.destroyed = true;\n            this.destroying = false;\n            this._debug(\"destroy (error: %s)\", err && (err.message || err));\n            this.readable = this.writable = false;\n            if (!this._readableState.ended) this.push(null);\n            if (!this._writableState.finished) this.end();\n            this._connected = false;\n            this._pcReady = false;\n            this._channelReady = false;\n            this._remoteTracks = null;\n            this._remoteStreams = null;\n            this._senderMap = null;\n            clearInterval(this._closingInterval);\n            this._closingInterval = null;\n            clearInterval(this._interval);\n            this._interval = null;\n            this._chunk = null;\n            this._cb = null;\n            if (this._onFinishBound) this.removeListener(\"finish\", this._onFinishBound);\n            this._onFinishBound = null;\n            if (this._channel) {\n                try {\n                    this._channel.close();\n                } catch (err) {}\n                // allow events concurrent with destruction to be handled\n                this._channel.onmessage = null;\n                this._channel.onopen = null;\n                this._channel.onclose = null;\n                this._channel.onerror = null;\n            }\n            if (this._pc) {\n                try {\n                    this._pc.close();\n                } catch (err) {}\n                // allow events concurrent with destruction to be handled\n                this._pc.oniceconnectionstatechange = null;\n                this._pc.onicegatheringstatechange = null;\n                this._pc.onsignalingstatechange = null;\n                this._pc.onicecandidate = null;\n                this._pc.ontrack = null;\n                this._pc.ondatachannel = null;\n            }\n            this._pc = null;\n            this._channel = null;\n            if (err) this.emit(\"error\", err);\n            this.emit(\"close\");\n            cb();\n        });\n    }\n    _setupData(event) {\n        if (!event.channel) {\n            // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),\n            // which is invalid behavior. Handle it gracefully.\n            // See: https://github.com/feross/simple-peer/issues/163\n            return this.destroy(errCode(new Error(\"Data channel event is missing `channel` property\"), \"ERR_DATA_CHANNEL\"));\n        }\n        this._channel = event.channel;\n        this._channel.binaryType = \"arraybuffer\";\n        if (typeof this._channel.bufferedAmountLowThreshold === \"number\") {\n            this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT;\n        }\n        this.channelName = this._channel.label;\n        this._channel.onmessage = (event)=>{\n            this._onChannelMessage(event);\n        };\n        this._channel.onbufferedamountlow = ()=>{\n            this._onChannelBufferedAmountLow();\n        };\n        this._channel.onopen = ()=>{\n            this._onChannelOpen();\n        };\n        this._channel.onclose = ()=>{\n            this._onChannelClose();\n        };\n        this._channel.onerror = (event)=>{\n            const err = event.error instanceof Error ? event.error : new Error(`Datachannel error: ${event.message} ${event.filename}:${event.lineno}:${event.colno}`);\n            this.destroy(errCode(err, \"ERR_DATA_CHANNEL\"));\n        };\n        // HACK: Chrome will sometimes get stuck in readyState \"closing\", let's check for this condition\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n        let isClosing = false;\n        this._closingInterval = setInterval(()=>{\n            if (this._channel && this._channel.readyState === \"closing\") {\n                if (isClosing) this._onChannelClose() // closing timed out: equivalent to onclose firing\n                ;\n                isClosing = true;\n            } else {\n                isClosing = false;\n            }\n        }, CHANNEL_CLOSING_TIMEOUT);\n    }\n    _read() {}\n    _write(chunk, encoding, cb) {\n        if (this.destroyed) return cb(errCode(new Error(\"cannot write after peer is destroyed\"), \"ERR_DATA_CHANNEL\"));\n        if (this._connected) {\n            try {\n                this.send(chunk);\n            } catch (err) {\n                return this.destroy(errCode(err, \"ERR_DATA_CHANNEL\"));\n            }\n            if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n                this._debug(\"start backpressure: bufferedAmount %d\", this._channel.bufferedAmount);\n                this._cb = cb;\n            } else {\n                cb(null);\n            }\n        } else {\n            this._debug(\"write before connect\");\n            this._chunk = chunk;\n            this._cb = cb;\n        }\n    }\n    // When stream finishes writing, close socket. Half open connections are not\n    // supported.\n    _onFinish() {\n        if (this.destroyed) return;\n        // Wait a bit before destroying so the socket flushes.\n        // TODO: is there a more reliable way to accomplish this?\n        const destroySoon = ()=>{\n            setTimeout(()=>this.destroy(), 1000);\n        };\n        if (this._connected) {\n            destroySoon();\n        } else {\n            this.once(\"connect\", destroySoon);\n        }\n    }\n    _startIceCompleteTimeout() {\n        if (this.destroyed) return;\n        if (this._iceCompleteTimer) return;\n        this._debug(\"started iceComplete timeout\");\n        this._iceCompleteTimer = setTimeout(()=>{\n            if (!this._iceComplete) {\n                this._iceComplete = true;\n                this._debug(\"iceComplete timeout completed\");\n                this.emit(\"iceTimeout\");\n                this.emit(\"_iceComplete\");\n            }\n        }, this.iceCompleteTimeout);\n    }\n    _createOffer() {\n        if (this.destroyed) return;\n        this._pc.createOffer(this.offerOptions).then((offer)=>{\n            if (this.destroyed) return;\n            if (!this.trickle && !this.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp);\n            offer.sdp = this.sdpTransform(offer.sdp);\n            const sendOffer = ()=>{\n                if (this.destroyed) return;\n                const signal = this._pc.localDescription || offer;\n                this._debug(\"signal\");\n                this.emit(\"signal\", {\n                    type: signal.type,\n                    sdp: signal.sdp\n                });\n            };\n            const onSuccess = ()=>{\n                this._debug(\"createOffer success\");\n                if (this.destroyed) return;\n                if (this.trickle || this._iceComplete) sendOffer();\n                else this.once(\"_iceComplete\", sendOffer) // wait for candidates\n                ;\n            };\n            const onError = (err)=>{\n                this.destroy(errCode(err, \"ERR_SET_LOCAL_DESCRIPTION\"));\n            };\n            this._pc.setLocalDescription(offer).then(onSuccess).catch(onError);\n        }).catch((err)=>{\n            this.destroy(errCode(err, \"ERR_CREATE_OFFER\"));\n        });\n    }\n    _requestMissingTransceivers() {\n        if (this._pc.getTransceivers) {\n            this._pc.getTransceivers().forEach((transceiver)=>{\n                if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {\n                    transceiver.requested = true // HACK: Safari returns negotiated transceivers with a null mid\n                    ;\n                    this.addTransceiver(transceiver.sender.track.kind);\n                }\n            });\n        }\n    }\n    _createAnswer() {\n        if (this.destroyed) return;\n        this._pc.createAnswer(this.answerOptions).then((answer)=>{\n            if (this.destroyed) return;\n            if (!this.trickle && !this.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp);\n            answer.sdp = this.sdpTransform(answer.sdp);\n            const sendAnswer = ()=>{\n                if (this.destroyed) return;\n                const signal = this._pc.localDescription || answer;\n                this._debug(\"signal\");\n                this.emit(\"signal\", {\n                    type: signal.type,\n                    sdp: signal.sdp\n                });\n                if (!this.initiator) this._requestMissingTransceivers();\n            };\n            const onSuccess = ()=>{\n                if (this.destroyed) return;\n                if (this.trickle || this._iceComplete) sendAnswer();\n                else this.once(\"_iceComplete\", sendAnswer);\n            };\n            const onError = (err)=>{\n                this.destroy(errCode(err, \"ERR_SET_LOCAL_DESCRIPTION\"));\n            };\n            this._pc.setLocalDescription(answer).then(onSuccess).catch(onError);\n        }).catch((err)=>{\n            this.destroy(errCode(err, \"ERR_CREATE_ANSWER\"));\n        });\n    }\n    _onConnectionStateChange() {\n        if (this.destroyed) return;\n        if (this._pc.connectionState === \"failed\") {\n            this.destroy(errCode(new Error(\"Connection failed.\"), \"ERR_CONNECTION_FAILURE\"));\n        }\n    }\n    _onIceStateChange() {\n        if (this.destroyed) return;\n        const iceConnectionState = this._pc.iceConnectionState;\n        const iceGatheringState = this._pc.iceGatheringState;\n        this._debug(\"iceStateChange (connection: %s) (gathering: %s)\", iceConnectionState, iceGatheringState);\n        this.emit(\"iceStateChange\", iceConnectionState, iceGatheringState);\n        if (iceConnectionState === \"connected\" || iceConnectionState === \"completed\") {\n            this._pcReady = true;\n            this._maybeReady();\n        }\n        if (iceConnectionState === \"failed\") {\n            this.destroy(errCode(new Error(\"Ice connection failed.\"), \"ERR_ICE_CONNECTION_FAILURE\"));\n        }\n        if (iceConnectionState === \"closed\") {\n            this.destroy(errCode(new Error(\"Ice connection closed.\"), \"ERR_ICE_CONNECTION_CLOSED\"));\n        }\n    }\n    getStats(cb) {\n        // statreports can come with a value array instead of properties\n        const flattenValues = (report)=>{\n            if (Object.prototype.toString.call(report.values) === \"[object Array]\") {\n                report.values.forEach((value)=>{\n                    Object.assign(report, value);\n                });\n            }\n            return report;\n        };\n        // Promise-based getStats() (standard)\n        if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) {\n            this._pc.getStats().then((res)=>{\n                const reports = [];\n                res.forEach((report)=>{\n                    reports.push(flattenValues(report));\n                });\n                cb(null, reports);\n            }, (err)=>cb(err));\n        // Single-parameter callback-based getStats() (non-standard)\n        } else if (this._pc.getStats.length > 0) {\n            this._pc.getStats((res)=>{\n                // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed\n                if (this.destroyed) return;\n                const reports = [];\n                res.result().forEach((result)=>{\n                    const report = {};\n                    result.names().forEach((name)=>{\n                        report[name] = result.stat(name);\n                    });\n                    report.id = result.id;\n                    report.type = result.type;\n                    report.timestamp = result.timestamp;\n                    reports.push(flattenValues(report));\n                });\n                cb(null, reports);\n            }, (err)=>cb(err));\n        // Unknown browser, skip getStats() since it's anyone's guess which style of\n        // getStats() they implement.\n        } else {\n            cb(null, []);\n        }\n    }\n    _maybeReady() {\n        this._debug(\"maybeReady pc %s channel %s\", this._pcReady, this._channelReady);\n        if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return;\n        this._connecting = true;\n        // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339\n        const findCandidatePair = ()=>{\n            if (this.destroyed) return;\n            this.getStats((err, items)=>{\n                if (this.destroyed) return;\n                // Treat getStats error as non-fatal. It's not essential.\n                if (err) items = [];\n                const remoteCandidates = {};\n                const localCandidates = {};\n                const candidatePairs = {};\n                let foundSelectedCandidatePair = false;\n                items.forEach((item)=>{\n                    // TODO: Once all browsers support the hyphenated stats report types, remove\n                    // the non-hypenated ones\n                    if (item.type === \"remotecandidate\" || item.type === \"remote-candidate\") {\n                        remoteCandidates[item.id] = item;\n                    }\n                    if (item.type === \"localcandidate\" || item.type === \"local-candidate\") {\n                        localCandidates[item.id] = item;\n                    }\n                    if (item.type === \"candidatepair\" || item.type === \"candidate-pair\") {\n                        candidatePairs[item.id] = item;\n                    }\n                });\n                const setSelectedCandidatePair = (selectedCandidatePair)=>{\n                    foundSelectedCandidatePair = true;\n                    let local = localCandidates[selectedCandidatePair.localCandidateId];\n                    if (local && (local.ip || local.address)) {\n                        // Spec\n                        this.localAddress = local.ip || local.address;\n                        this.localPort = Number(local.port);\n                    } else if (local && local.ipAddress) {\n                        // Firefox\n                        this.localAddress = local.ipAddress;\n                        this.localPort = Number(local.portNumber);\n                    } else if (typeof selectedCandidatePair.googLocalAddress === \"string\") {\n                        // TODO: remove this once Chrome 58 is released\n                        local = selectedCandidatePair.googLocalAddress.split(\":\");\n                        this.localAddress = local[0];\n                        this.localPort = Number(local[1]);\n                    }\n                    if (this.localAddress) {\n                        this.localFamily = this.localAddress.includes(\":\") ? \"IPv6\" : \"IPv4\";\n                    }\n                    let remote = remoteCandidates[selectedCandidatePair.remoteCandidateId];\n                    if (remote && (remote.ip || remote.address)) {\n                        // Spec\n                        this.remoteAddress = remote.ip || remote.address;\n                        this.remotePort = Number(remote.port);\n                    } else if (remote && remote.ipAddress) {\n                        // Firefox\n                        this.remoteAddress = remote.ipAddress;\n                        this.remotePort = Number(remote.portNumber);\n                    } else if (typeof selectedCandidatePair.googRemoteAddress === \"string\") {\n                        // TODO: remove this once Chrome 58 is released\n                        remote = selectedCandidatePair.googRemoteAddress.split(\":\");\n                        this.remoteAddress = remote[0];\n                        this.remotePort = Number(remote[1]);\n                    }\n                    if (this.remoteAddress) {\n                        this.remoteFamily = this.remoteAddress.includes(\":\") ? \"IPv6\" : \"IPv4\";\n                    }\n                    this._debug(\"connect local: %s:%s remote: %s:%s\", this.localAddress, this.localPort, this.remoteAddress, this.remotePort);\n                };\n                items.forEach((item)=>{\n                    // Spec-compliant\n                    if (item.type === \"transport\" && item.selectedCandidatePairId) {\n                        setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId]);\n                    }\n                    // Old implementations\n                    if (item.type === \"googCandidatePair\" && item.googActiveConnection === \"true\" || (item.type === \"candidatepair\" || item.type === \"candidate-pair\") && item.selected) {\n                        setSelectedCandidatePair(item);\n                    }\n                });\n                // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates\n                // But wait until at least 1 candidate pair is available\n                if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {\n                    setTimeout(findCandidatePair, 100);\n                    return;\n                } else {\n                    this._connecting = false;\n                    this._connected = true;\n                }\n                if (this._chunk) {\n                    try {\n                        this.send(this._chunk);\n                    } catch (err) {\n                        return this.destroy(errCode(err, \"ERR_DATA_CHANNEL\"));\n                    }\n                    this._chunk = null;\n                    this._debug('sent chunk from \"write before connect\"');\n                    const cb = this._cb;\n                    this._cb = null;\n                    cb(null);\n                }\n                // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,\n                // fallback to using setInterval to implement backpressure.\n                if (typeof this._channel.bufferedAmountLowThreshold !== \"number\") {\n                    this._interval = setInterval(()=>this._onInterval(), 150);\n                    if (this._interval.unref) this._interval.unref();\n                }\n                this._debug(\"connect\");\n                this.emit(\"connect\");\n            });\n        };\n        findCandidatePair();\n    }\n    _onInterval() {\n        if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n            return;\n        }\n        this._onChannelBufferedAmountLow();\n    }\n    _onSignalingStateChange() {\n        if (this.destroyed) return;\n        if (this._pc.signalingState === \"stable\") {\n            this._isNegotiating = false;\n            // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'\n            this._debug(\"flushing sender queue\", this._sendersAwaitingStable);\n            this._sendersAwaitingStable.forEach((sender)=>{\n                this._pc.removeTrack(sender);\n                this._queuedNegotiation = true;\n            });\n            this._sendersAwaitingStable = [];\n            if (this._queuedNegotiation) {\n                this._debug(\"flushing negotiation queue\");\n                this._queuedNegotiation = false;\n                this._needsNegotiation() // negotiate again\n                ;\n            } else {\n                this._debug(\"negotiated\");\n                this.emit(\"negotiated\");\n            }\n        }\n        this._debug(\"signalingStateChange %s\", this._pc.signalingState);\n        this.emit(\"signalingStateChange\", this._pc.signalingState);\n    }\n    _onIceCandidate(event) {\n        if (this.destroyed) return;\n        if (event.candidate && this.trickle) {\n            this.emit(\"signal\", {\n                type: \"candidate\",\n                candidate: {\n                    candidate: event.candidate.candidate,\n                    sdpMLineIndex: event.candidate.sdpMLineIndex,\n                    sdpMid: event.candidate.sdpMid\n                }\n            });\n        } else if (!event.candidate && !this._iceComplete) {\n            this._iceComplete = true;\n            this.emit(\"_iceComplete\");\n        }\n        // as soon as we've received one valid candidate start timeout\n        if (event.candidate) {\n            this._startIceCompleteTimeout();\n        }\n    }\n    _onChannelMessage(event) {\n        if (this.destroyed) return;\n        let data = event.data;\n        if (data instanceof ArrayBuffer) data = Buffer.from(data);\n        this.push(data);\n    }\n    _onChannelBufferedAmountLow() {\n        if (this.destroyed || !this._cb) return;\n        this._debug(\"ending backpressure: bufferedAmount %d\", this._channel.bufferedAmount);\n        const cb = this._cb;\n        this._cb = null;\n        cb(null);\n    }\n    _onChannelOpen() {\n        if (this._connected || this.destroyed) return;\n        this._debug(\"on channel open\");\n        this._channelReady = true;\n        this._maybeReady();\n    }\n    _onChannelClose() {\n        if (this.destroyed) return;\n        this._debug(\"on channel close\");\n        this.destroy();\n    }\n    _onTrack(event) {\n        if (this.destroyed) return;\n        event.streams.forEach((eventStream)=>{\n            this._debug(\"on track\");\n            this.emit(\"track\", event.track, eventStream);\n            this._remoteTracks.push({\n                track: event.track,\n                stream: eventStream\n            });\n            if (this._remoteStreams.some((remoteStream)=>{\n                return remoteStream.id === eventStream.id;\n            })) return; // Only fire one 'stream' event, even though there may be multiple tracks per stream\n            this._remoteStreams.push(eventStream);\n            queueMicrotask(()=>{\n                this._debug(\"on stream\");\n                this.emit(\"stream\", eventStream) // ensure all tracks have been added\n                ;\n            });\n        });\n    }\n    _debug() {\n        const args = [].slice.call(arguments);\n        args[0] = \"[\" + this._id + \"] \" + args[0];\n        debug.apply(null, args);\n    }\n}\nPeer.WEBRTC_SUPPORT = !!getBrowserRTC();\n/**\n * Expose peer and data channel config for overriding all Peer\n * instances. Otherwise, just set opts.config or opts.channelConfig\n * when constructing a Peer.\n */ Peer.config = {\n    iceServers: [\n        {\n            urls: [\n                \"stun:stun.l.google.com:19302\",\n                \"stun:global.stun.twilio.com:3478\"\n            ]\n        }\n    ],\n    sdpSemantics: \"unified-plan\"\n};\nPeer.channelConfig = {};\nmodule.exports = Peer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-peer/index.js\n");

/***/ })

};
;