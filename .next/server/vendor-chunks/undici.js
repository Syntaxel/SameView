/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/undici";
exports.ids = ["vendor-chunks/undici"];
exports.modules = {

/***/ "(ssr)/./node_modules/undici/index.js":
/*!**************************************!*\
  !*** ./node_modules/undici/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Client = __webpack_require__(/*! ./lib/client */ \"(ssr)/./node_modules/undici/lib/client.js\");\nconst Dispatcher = __webpack_require__(/*! ./lib/dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher.js\");\nconst errors = __webpack_require__(/*! ./lib/core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst Pool = __webpack_require__(/*! ./lib/pool */ \"(ssr)/./node_modules/undici/lib/pool.js\");\nconst BalancedPool = __webpack_require__(/*! ./lib/balanced-pool */ \"(ssr)/./node_modules/undici/lib/balanced-pool.js\");\nconst Agent = __webpack_require__(/*! ./lib/agent */ \"(ssr)/./node_modules/undici/lib/agent.js\");\nconst util = __webpack_require__(/*! ./lib/core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { InvalidArgumentError } = errors;\nconst api = __webpack_require__(/*! ./lib/api */ \"(ssr)/./node_modules/undici/lib/api/index.js\");\nconst buildConnector = __webpack_require__(/*! ./lib/core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst MockClient = __webpack_require__(/*! ./lib/mock/mock-client */ \"(ssr)/./node_modules/undici/lib/mock/mock-client.js\");\nconst MockAgent = __webpack_require__(/*! ./lib/mock/mock-agent */ \"(ssr)/./node_modules/undici/lib/mock/mock-agent.js\");\nconst MockPool = __webpack_require__(/*! ./lib/mock/mock-pool */ \"(ssr)/./node_modules/undici/lib/mock/mock-pool.js\");\nconst mockErrors = __webpack_require__(/*! ./lib/mock/mock-errors */ \"(ssr)/./node_modules/undici/lib/mock/mock-errors.js\");\nconst ProxyAgent = __webpack_require__(/*! ./lib/proxy-agent */ \"(ssr)/./node_modules/undici/lib/proxy-agent.js\");\nconst { getGlobalDispatcher, setGlobalDispatcher } = __webpack_require__(/*! ./lib/global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst DecoratorHandler = __webpack_require__(/*! ./lib/handler/DecoratorHandler */ \"(ssr)/./node_modules/undici/lib/handler/DecoratorHandler.js\");\nconst RedirectHandler = __webpack_require__(/*! ./lib/handler/RedirectHandler */ \"(ssr)/./node_modules/undici/lib/handler/RedirectHandler.js\");\nconst createRedirectInterceptor = __webpack_require__(/*! ./lib/interceptor/redirectInterceptor */ \"(ssr)/./node_modules/undici/lib/interceptor/redirectInterceptor.js\");\nlet hasCrypto;\ntry {\n    __webpack_require__(/*! crypto */ \"crypto\");\n    hasCrypto = true;\n} catch  {\n    hasCrypto = false;\n}\nObject.assign(Dispatcher.prototype, api);\nmodule.exports.Dispatcher = Dispatcher;\nmodule.exports.Client = Client;\nmodule.exports.Pool = Pool;\nmodule.exports.BalancedPool = BalancedPool;\nmodule.exports.Agent = Agent;\nmodule.exports.ProxyAgent = ProxyAgent;\nmodule.exports.DecoratorHandler = DecoratorHandler;\nmodule.exports.RedirectHandler = RedirectHandler;\nmodule.exports.createRedirectInterceptor = createRedirectInterceptor;\nmodule.exports.buildConnector = buildConnector;\nmodule.exports.errors = errors;\nfunction makeDispatcher(fn) {\n    return (url, opts, handler)=>{\n        if (typeof opts === \"function\") {\n            handler = opts;\n            opts = null;\n        }\n        if (!url || typeof url !== \"string\" && typeof url !== \"object\" && !(url instanceof URL)) {\n            throw new InvalidArgumentError(\"invalid url\");\n        }\n        if (opts != null && typeof opts !== \"object\") {\n            throw new InvalidArgumentError(\"invalid opts\");\n        }\n        if (opts && opts.path != null) {\n            if (typeof opts.path !== \"string\") {\n                throw new InvalidArgumentError(\"invalid opts.path\");\n            }\n            let path = opts.path;\n            if (!opts.path.startsWith(\"/\")) {\n                path = `/${path}`;\n            }\n            url = new URL(util.parseOrigin(url).origin + path);\n        } else {\n            if (!opts) {\n                opts = typeof url === \"object\" ? url : {};\n            }\n            url = util.parseURL(url);\n        }\n        const { agent, dispatcher = getGlobalDispatcher() } = opts;\n        if (agent) {\n            throw new InvalidArgumentError(\"unsupported opts.agent. Did you mean opts.client?\");\n        }\n        return fn.call(dispatcher, {\n            ...opts,\n            origin: url.origin,\n            path: url.search ? `${url.pathname}${url.search}` : url.pathname,\n            method: opts.method || (opts.body ? \"PUT\" : \"GET\")\n        }, handler);\n    };\n}\nmodule.exports.setGlobalDispatcher = setGlobalDispatcher;\nmodule.exports.getGlobalDispatcher = getGlobalDispatcher;\nif (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {\n    let fetchImpl = null;\n    module.exports.fetch = async function fetch(resource) {\n        if (!fetchImpl) {\n            fetchImpl = (__webpack_require__(/*! ./lib/fetch */ \"(ssr)/./node_modules/undici/lib/fetch/index.js\").fetch);\n        }\n        try {\n            return await fetchImpl(...arguments);\n        } catch (err) {\n            if (typeof err === \"object\") {\n                Error.captureStackTrace(err, this);\n            }\n            throw err;\n        }\n    };\n    module.exports.Headers = __webpack_require__(/*! ./lib/fetch/headers */ \"(ssr)/./node_modules/undici/lib/fetch/headers.js\").Headers;\n    module.exports.Response = __webpack_require__(/*! ./lib/fetch/response */ \"(ssr)/./node_modules/undici/lib/fetch/response.js\").Response;\n    module.exports.Request = __webpack_require__(/*! ./lib/fetch/request */ \"(ssr)/./node_modules/undici/lib/fetch/request.js\").Request;\n    module.exports.FormData = __webpack_require__(/*! ./lib/fetch/formdata */ \"(ssr)/./node_modules/undici/lib/fetch/formdata.js\").FormData;\n    module.exports.File = __webpack_require__(/*! ./lib/fetch/file */ \"(ssr)/./node_modules/undici/lib/fetch/file.js\").File;\n    module.exports.FileReader = __webpack_require__(/*! ./lib/fileapi/filereader */ \"(ssr)/./node_modules/undici/lib/fileapi/filereader.js\").FileReader;\n    const { setGlobalOrigin, getGlobalOrigin } = __webpack_require__(/*! ./lib/fetch/global */ \"(ssr)/./node_modules/undici/lib/fetch/global.js\");\n    module.exports.setGlobalOrigin = setGlobalOrigin;\n    module.exports.getGlobalOrigin = getGlobalOrigin;\n    const { CacheStorage } = __webpack_require__(/*! ./lib/cache/cachestorage */ \"(ssr)/./node_modules/undici/lib/cache/cachestorage.js\");\n    const { kConstruct } = __webpack_require__(/*! ./lib/cache/symbols */ \"(ssr)/./node_modules/undici/lib/cache/symbols.js\");\n    // Cache & CacheStorage are tightly coupled with fetch. Even if it may run\n    // in an older version of Node, it doesn't have any use without fetch.\n    module.exports.caches = new CacheStorage(kConstruct);\n}\nif (util.nodeMajor >= 16) {\n    const { deleteCookie, getCookies, getSetCookies, setCookie } = __webpack_require__(/*! ./lib/cookies */ \"(ssr)/./node_modules/undici/lib/cookies/index.js\");\n    module.exports.deleteCookie = deleteCookie;\n    module.exports.getCookies = getCookies;\n    module.exports.getSetCookies = getSetCookies;\n    module.exports.setCookie = setCookie;\n    const { parseMIMEType, serializeAMimeType } = __webpack_require__(/*! ./lib/fetch/dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\n    module.exports.parseMIMEType = parseMIMEType;\n    module.exports.serializeAMimeType = serializeAMimeType;\n}\nif (util.nodeMajor >= 18 && hasCrypto) {\n    const { WebSocket } = __webpack_require__(/*! ./lib/websocket/websocket */ \"(ssr)/./node_modules/undici/lib/websocket/websocket.js\");\n    module.exports.WebSocket = WebSocket;\n}\nmodule.exports.request = makeDispatcher(api.request);\nmodule.exports.stream = makeDispatcher(api.stream);\nmodule.exports.pipeline = makeDispatcher(api.pipeline);\nmodule.exports.connect = makeDispatcher(api.connect);\nmodule.exports.upgrade = makeDispatcher(api.upgrade);\nmodule.exports.MockClient = MockClient;\nmodule.exports.MockPool = MockPool;\nmodule.exports.MockAgent = MockAgent;\nmodule.exports.mockErrors = mockErrors;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUM7QUFDM0IsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUcsT0FBT0gsbUJBQU9BLENBQUM7QUFDckIsTUFBTUksZUFBZUosbUJBQU9BLENBQUM7QUFDN0IsTUFBTUssUUFBUUwsbUJBQU9BLENBQUM7QUFDdEIsTUFBTU0sT0FBT04sbUJBQU9BLENBQUM7QUFDckIsTUFBTSxFQUFFTyxvQkFBb0IsRUFBRSxHQUFHTDtBQUNqQyxNQUFNTSxNQUFNUixtQkFBT0EsQ0FBQztBQUNwQixNQUFNUyxpQkFBaUJULG1CQUFPQSxDQUFDO0FBQy9CLE1BQU1VLGFBQWFWLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU1XLFlBQVlYLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1ZLFdBQVdaLG1CQUFPQSxDQUFDO0FBQ3pCLE1BQU1hLGFBQWFiLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU1jLGFBQWFkLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU0sRUFBRWUsbUJBQW1CLEVBQUVDLG1CQUFtQixFQUFFLEdBQUdoQixtQkFBT0EsQ0FBQztBQUM3RCxNQUFNaUIsbUJBQW1CakIsbUJBQU9BLENBQUM7QUFDakMsTUFBTWtCLGtCQUFrQmxCLG1CQUFPQSxDQUFDO0FBQ2hDLE1BQU1tQiw0QkFBNEJuQixtQkFBT0EsQ0FBQztBQUUxQyxJQUFJb0I7QUFDSixJQUFJO0lBQ0ZwQixtQkFBT0EsQ0FBQztJQUNSb0IsWUFBWTtBQUNkLEVBQUUsT0FBTTtJQUNOQSxZQUFZO0FBQ2Q7QUFFQUMsT0FBT0MsTUFBTSxDQUFDckIsV0FBV3NCLFNBQVMsRUFBRWY7QUFFcENnQix5QkFBeUIsR0FBR3ZCO0FBQzVCdUIscUJBQXFCLEdBQUd6QjtBQUN4QnlCLG1CQUFtQixHQUFHckI7QUFDdEJxQiwyQkFBMkIsR0FBR3BCO0FBQzlCb0Isb0JBQW9CLEdBQUduQjtBQUN2Qm1CLHlCQUF5QixHQUFHVjtBQUU1QlUsK0JBQStCLEdBQUdQO0FBQ2xDTyw4QkFBOEIsR0FBR047QUFDakNNLHdDQUF3QyxHQUFHTDtBQUUzQ0ssNkJBQTZCLEdBQUdmO0FBQ2hDZSxxQkFBcUIsR0FBR3RCO0FBRXhCLFNBQVN3QixlQUFnQkMsRUFBRTtJQUN6QixPQUFPLENBQUNDLEtBQUtDLE1BQU1DO1FBQ2pCLElBQUksT0FBT0QsU0FBUyxZQUFZO1lBQzlCQyxVQUFVRDtZQUNWQSxPQUFPO1FBQ1Q7UUFFQSxJQUFJLENBQUNELE9BQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWSxDQUFFQSxDQUFBQSxlQUFlRyxHQUFFLEdBQUs7WUFDekYsTUFBTSxJQUFJeEIscUJBQXFCO1FBQ2pDO1FBRUEsSUFBSXNCLFFBQVEsUUFBUSxPQUFPQSxTQUFTLFVBQVU7WUFDNUMsTUFBTSxJQUFJdEIscUJBQXFCO1FBQ2pDO1FBRUEsSUFBSXNCLFFBQVFBLEtBQUtHLElBQUksSUFBSSxNQUFNO1lBQzdCLElBQUksT0FBT0gsS0FBS0csSUFBSSxLQUFLLFVBQVU7Z0JBQ2pDLE1BQU0sSUFBSXpCLHFCQUFxQjtZQUNqQztZQUVBLElBQUl5QixPQUFPSCxLQUFLRyxJQUFJO1lBQ3BCLElBQUksQ0FBQ0gsS0FBS0csSUFBSSxDQUFDQyxVQUFVLENBQUMsTUFBTTtnQkFDOUJELE9BQU8sQ0FBQyxDQUFDLEVBQUVBLEtBQUssQ0FBQztZQUNuQjtZQUVBSixNQUFNLElBQUlHLElBQUl6QixLQUFLNEIsV0FBVyxDQUFDTixLQUFLTyxNQUFNLEdBQUdIO1FBQy9DLE9BQU87WUFDTCxJQUFJLENBQUNILE1BQU07Z0JBQ1RBLE9BQU8sT0FBT0QsUUFBUSxXQUFXQSxNQUFNLENBQUM7WUFDMUM7WUFFQUEsTUFBTXRCLEtBQUs4QixRQUFRLENBQUNSO1FBQ3RCO1FBRUEsTUFBTSxFQUFFUyxLQUFLLEVBQUVDLGFBQWF2QixxQkFBcUIsRUFBRSxHQUFHYztRQUV0RCxJQUFJUSxPQUFPO1lBQ1QsTUFBTSxJQUFJOUIscUJBQXFCO1FBQ2pDO1FBRUEsT0FBT29CLEdBQUdZLElBQUksQ0FBQ0QsWUFBWTtZQUN6QixHQUFHVCxJQUFJO1lBQ1BNLFFBQVFQLElBQUlPLE1BQU07WUFDbEJILE1BQU1KLElBQUlZLE1BQU0sR0FBRyxDQUFDLEVBQUVaLElBQUlhLFFBQVEsQ0FBQyxFQUFFYixJQUFJWSxNQUFNLENBQUMsQ0FBQyxHQUFHWixJQUFJYSxRQUFRO1lBQ2hFQyxRQUFRYixLQUFLYSxNQUFNLElBQUtiLENBQUFBLEtBQUtjLElBQUksR0FBRyxRQUFRLEtBQUk7UUFDbEQsR0FBR2I7SUFDTDtBQUNGO0FBRUFOLGtDQUFrQyxHQUFHUjtBQUNyQ1Esa0NBQWtDLEdBQUdUO0FBRXJDLElBQUlULEtBQUtzQyxTQUFTLEdBQUcsTUFBT3RDLEtBQUtzQyxTQUFTLEtBQUssTUFBTXRDLEtBQUt1QyxTQUFTLElBQUksR0FBSTtJQUN6RSxJQUFJQyxZQUFZO0lBQ2hCdEIsb0JBQW9CLEdBQUcsZUFBZXVCLE1BQU9DLFFBQVE7UUFDbkQsSUFBSSxDQUFDRixXQUFXO1lBQ2RBLFlBQVk5QyxnR0FBNEI7UUFDMUM7UUFFQSxJQUFJO1lBQ0YsT0FBTyxNQUFNOEMsYUFBYUc7UUFDNUIsRUFBRSxPQUFPQyxLQUFLO1lBQ1osSUFBSSxPQUFPQSxRQUFRLFVBQVU7Z0JBQzNCQyxNQUFNQyxpQkFBaUIsQ0FBQ0YsS0FBSyxJQUFJO1lBQ25DO1lBRUEsTUFBTUE7UUFDUjtJQUNGO0lBQ0ExQixtSUFBK0Q7SUFDL0RBLHVJQUFrRTtJQUNsRUEsbUlBQStEO0lBQy9EQSx1SUFBa0U7SUFDbEVBLHVIQUFzRDtJQUN0REEsbUpBQTBFO0lBRTFFLE1BQU0sRUFBRW1DLGVBQWUsRUFBRUMsZUFBZSxFQUFFLEdBQUc1RCxtQkFBT0EsQ0FBQztJQUVyRHdCLDhCQUE4QixHQUFHbUM7SUFDakNuQyw4QkFBOEIsR0FBR29DO0lBRWpDLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUc3RCxtQkFBT0EsQ0FBQztJQUNqQyxNQUFNLEVBQUU4RCxVQUFVLEVBQUUsR0FBRzlELG1CQUFPQSxDQUFDO0lBRS9CLDBFQUEwRTtJQUMxRSxzRUFBc0U7SUFDdEV3QixxQkFBcUIsR0FBRyxJQUFJcUMsYUFBYUM7QUFDM0M7QUFFQSxJQUFJeEQsS0FBS3NDLFNBQVMsSUFBSSxJQUFJO0lBQ3hCLE1BQU0sRUFBRW9CLFlBQVksRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUVDLFNBQVMsRUFBRSxHQUFHbkUsbUJBQU9BLENBQUM7SUFFdkV3QiwyQkFBMkIsR0FBR3dDO0lBQzlCeEMseUJBQXlCLEdBQUd5QztJQUM1QnpDLDRCQUE0QixHQUFHMEM7SUFDL0IxQyx3QkFBd0IsR0FBRzJDO0lBRTNCLE1BQU0sRUFBRUMsYUFBYSxFQUFFQyxrQkFBa0IsRUFBRSxHQUFHckUsbUJBQU9BLENBQUM7SUFFdER3Qiw0QkFBNEIsR0FBRzRDO0lBQy9CNUMsaUNBQWlDLEdBQUc2QztBQUN0QztBQUVBLElBQUkvRCxLQUFLc0MsU0FBUyxJQUFJLE1BQU14QixXQUFXO0lBQ3JDLE1BQU0sRUFBRWtELFNBQVMsRUFBRSxHQUFHdEUsbUJBQU9BLENBQUM7SUFFOUJ3Qix3QkFBd0IsR0FBRzhDO0FBQzdCO0FBRUE5QyxzQkFBc0IsR0FBR0UsZUFBZWxCLElBQUkrRCxPQUFPO0FBQ25EL0MscUJBQXFCLEdBQUdFLGVBQWVsQixJQUFJZ0UsTUFBTTtBQUNqRGhELHVCQUF1QixHQUFHRSxlQUFlbEIsSUFBSWlFLFFBQVE7QUFDckRqRCxzQkFBc0IsR0FBR0UsZUFBZWxCLElBQUlrRSxPQUFPO0FBQ25EbEQsc0JBQXNCLEdBQUdFLGVBQWVsQixJQUFJbUUsT0FBTztBQUVuRG5ELHlCQUF5QixHQUFHZDtBQUM1QmMsdUJBQXVCLEdBQUdaO0FBQzFCWSx3QkFBd0IsR0FBR2I7QUFDM0JhLHlCQUF5QixHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvaW5kZXguanM/MTI0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgQ2xpZW50ID0gcmVxdWlyZSgnLi9saWIvY2xpZW50JylcbmNvbnN0IERpc3BhdGNoZXIgPSByZXF1aXJlKCcuL2xpYi9kaXNwYXRjaGVyJylcbmNvbnN0IGVycm9ycyA9IHJlcXVpcmUoJy4vbGliL2NvcmUvZXJyb3JzJylcbmNvbnN0IFBvb2wgPSByZXF1aXJlKCcuL2xpYi9wb29sJylcbmNvbnN0IEJhbGFuY2VkUG9vbCA9IHJlcXVpcmUoJy4vbGliL2JhbGFuY2VkLXBvb2wnKVxuY29uc3QgQWdlbnQgPSByZXF1aXJlKCcuL2xpYi9hZ2VudCcpXG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi9saWIvY29yZS91dGlsJylcbmNvbnN0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IgfSA9IGVycm9yc1xuY29uc3QgYXBpID0gcmVxdWlyZSgnLi9saWIvYXBpJylcbmNvbnN0IGJ1aWxkQ29ubmVjdG9yID0gcmVxdWlyZSgnLi9saWIvY29yZS9jb25uZWN0JylcbmNvbnN0IE1vY2tDbGllbnQgPSByZXF1aXJlKCcuL2xpYi9tb2NrL21vY2stY2xpZW50JylcbmNvbnN0IE1vY2tBZ2VudCA9IHJlcXVpcmUoJy4vbGliL21vY2svbW9jay1hZ2VudCcpXG5jb25zdCBNb2NrUG9vbCA9IHJlcXVpcmUoJy4vbGliL21vY2svbW9jay1wb29sJylcbmNvbnN0IG1vY2tFcnJvcnMgPSByZXF1aXJlKCcuL2xpYi9tb2NrL21vY2stZXJyb3JzJylcbmNvbnN0IFByb3h5QWdlbnQgPSByZXF1aXJlKCcuL2xpYi9wcm94eS1hZ2VudCcpXG5jb25zdCB7IGdldEdsb2JhbERpc3BhdGNoZXIsIHNldEdsb2JhbERpc3BhdGNoZXIgfSA9IHJlcXVpcmUoJy4vbGliL2dsb2JhbCcpXG5jb25zdCBEZWNvcmF0b3JIYW5kbGVyID0gcmVxdWlyZSgnLi9saWIvaGFuZGxlci9EZWNvcmF0b3JIYW5kbGVyJylcbmNvbnN0IFJlZGlyZWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vbGliL2hhbmRsZXIvUmVkaXJlY3RIYW5kbGVyJylcbmNvbnN0IGNyZWF0ZVJlZGlyZWN0SW50ZXJjZXB0b3IgPSByZXF1aXJlKCcuL2xpYi9pbnRlcmNlcHRvci9yZWRpcmVjdEludGVyY2VwdG9yJylcblxubGV0IGhhc0NyeXB0b1xudHJ5IHtcbiAgcmVxdWlyZSgnY3J5cHRvJylcbiAgaGFzQ3J5cHRvID0gdHJ1ZVxufSBjYXRjaCB7XG4gIGhhc0NyeXB0byA9IGZhbHNlXG59XG5cbk9iamVjdC5hc3NpZ24oRGlzcGF0Y2hlci5wcm90b3R5cGUsIGFwaSlcblxubW9kdWxlLmV4cG9ydHMuRGlzcGF0Y2hlciA9IERpc3BhdGNoZXJcbm1vZHVsZS5leHBvcnRzLkNsaWVudCA9IENsaWVudFxubW9kdWxlLmV4cG9ydHMuUG9vbCA9IFBvb2xcbm1vZHVsZS5leHBvcnRzLkJhbGFuY2VkUG9vbCA9IEJhbGFuY2VkUG9vbFxubW9kdWxlLmV4cG9ydHMuQWdlbnQgPSBBZ2VudFxubW9kdWxlLmV4cG9ydHMuUHJveHlBZ2VudCA9IFByb3h5QWdlbnRcblxubW9kdWxlLmV4cG9ydHMuRGVjb3JhdG9ySGFuZGxlciA9IERlY29yYXRvckhhbmRsZXJcbm1vZHVsZS5leHBvcnRzLlJlZGlyZWN0SGFuZGxlciA9IFJlZGlyZWN0SGFuZGxlclxubW9kdWxlLmV4cG9ydHMuY3JlYXRlUmVkaXJlY3RJbnRlcmNlcHRvciA9IGNyZWF0ZVJlZGlyZWN0SW50ZXJjZXB0b3JcblxubW9kdWxlLmV4cG9ydHMuYnVpbGRDb25uZWN0b3IgPSBidWlsZENvbm5lY3RvclxubW9kdWxlLmV4cG9ydHMuZXJyb3JzID0gZXJyb3JzXG5cbmZ1bmN0aW9uIG1ha2VEaXNwYXRjaGVyIChmbikge1xuICByZXR1cm4gKHVybCwgb3B0cywgaGFuZGxlcikgPT4ge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaGFuZGxlciA9IG9wdHNcbiAgICAgIG9wdHMgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKCF1cmwgfHwgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnICYmIHR5cGVvZiB1cmwgIT09ICdvYmplY3QnICYmICEodXJsIGluc3RhbmNlb2YgVVJMKSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignaW52YWxpZCB1cmwnKVxuICAgIH1cblxuICAgIGlmIChvcHRzICE9IG51bGwgJiYgdHlwZW9mIG9wdHMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2ludmFsaWQgb3B0cycpXG4gICAgfVxuXG4gICAgaWYgKG9wdHMgJiYgb3B0cy5wYXRoICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0cy5wYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2ludmFsaWQgb3B0cy5wYXRoJylcbiAgICAgIH1cblxuICAgICAgbGV0IHBhdGggPSBvcHRzLnBhdGhcbiAgICAgIGlmICghb3B0cy5wYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICBwYXRoID0gYC8ke3BhdGh9YFxuICAgICAgfVxuXG4gICAgICB1cmwgPSBuZXcgVVJMKHV0aWwucGFyc2VPcmlnaW4odXJsKS5vcmlnaW4gKyBwYXRoKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgb3B0cyA9IHR5cGVvZiB1cmwgPT09ICdvYmplY3QnID8gdXJsIDoge31cbiAgICAgIH1cblxuICAgICAgdXJsID0gdXRpbC5wYXJzZVVSTCh1cmwpXG4gICAgfVxuXG4gICAgY29uc3QgeyBhZ2VudCwgZGlzcGF0Y2hlciA9IGdldEdsb2JhbERpc3BhdGNoZXIoKSB9ID0gb3B0c1xuXG4gICAgaWYgKGFnZW50KSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3Vuc3VwcG9ydGVkIG9wdHMuYWdlbnQuIERpZCB5b3UgbWVhbiBvcHRzLmNsaWVudD8nKVxuICAgIH1cblxuICAgIHJldHVybiBmbi5jYWxsKGRpc3BhdGNoZXIsIHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBvcmlnaW46IHVybC5vcmlnaW4sXG4gICAgICBwYXRoOiB1cmwuc2VhcmNoID8gYCR7dXJsLnBhdGhuYW1lfSR7dXJsLnNlYXJjaH1gIDogdXJsLnBhdGhuYW1lLFxuICAgICAgbWV0aG9kOiBvcHRzLm1ldGhvZCB8fCAob3B0cy5ib2R5ID8gJ1BVVCcgOiAnR0VUJylcbiAgICB9LCBoYW5kbGVyKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzLnNldEdsb2JhbERpc3BhdGNoZXIgPSBzZXRHbG9iYWxEaXNwYXRjaGVyXG5tb2R1bGUuZXhwb3J0cy5nZXRHbG9iYWxEaXNwYXRjaGVyID0gZ2V0R2xvYmFsRGlzcGF0Y2hlclxuXG5pZiAodXRpbC5ub2RlTWFqb3IgPiAxNiB8fCAodXRpbC5ub2RlTWFqb3IgPT09IDE2ICYmIHV0aWwubm9kZU1pbm9yID49IDgpKSB7XG4gIGxldCBmZXRjaEltcGwgPSBudWxsXG4gIG1vZHVsZS5leHBvcnRzLmZldGNoID0gYXN5bmMgZnVuY3Rpb24gZmV0Y2ggKHJlc291cmNlKSB7XG4gICAgaWYgKCFmZXRjaEltcGwpIHtcbiAgICAgIGZldGNoSW1wbCA9IHJlcXVpcmUoJy4vbGliL2ZldGNoJykuZmV0Y2hcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGZldGNoSW1wbCguLi5hcmd1bWVudHMpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAodHlwZW9mIGVyciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyLCB0aGlzKVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMuSGVhZGVycyA9IHJlcXVpcmUoJy4vbGliL2ZldGNoL2hlYWRlcnMnKS5IZWFkZXJzXG4gIG1vZHVsZS5leHBvcnRzLlJlc3BvbnNlID0gcmVxdWlyZSgnLi9saWIvZmV0Y2gvcmVzcG9uc2UnKS5SZXNwb25zZVxuICBtb2R1bGUuZXhwb3J0cy5SZXF1ZXN0ID0gcmVxdWlyZSgnLi9saWIvZmV0Y2gvcmVxdWVzdCcpLlJlcXVlc3RcbiAgbW9kdWxlLmV4cG9ydHMuRm9ybURhdGEgPSByZXF1aXJlKCcuL2xpYi9mZXRjaC9mb3JtZGF0YScpLkZvcm1EYXRhXG4gIG1vZHVsZS5leHBvcnRzLkZpbGUgPSByZXF1aXJlKCcuL2xpYi9mZXRjaC9maWxlJykuRmlsZVxuICBtb2R1bGUuZXhwb3J0cy5GaWxlUmVhZGVyID0gcmVxdWlyZSgnLi9saWIvZmlsZWFwaS9maWxlcmVhZGVyJykuRmlsZVJlYWRlclxuXG4gIGNvbnN0IHsgc2V0R2xvYmFsT3JpZ2luLCBnZXRHbG9iYWxPcmlnaW4gfSA9IHJlcXVpcmUoJy4vbGliL2ZldGNoL2dsb2JhbCcpXG5cbiAgbW9kdWxlLmV4cG9ydHMuc2V0R2xvYmFsT3JpZ2luID0gc2V0R2xvYmFsT3JpZ2luXG4gIG1vZHVsZS5leHBvcnRzLmdldEdsb2JhbE9yaWdpbiA9IGdldEdsb2JhbE9yaWdpblxuXG4gIGNvbnN0IHsgQ2FjaGVTdG9yYWdlIH0gPSByZXF1aXJlKCcuL2xpYi9jYWNoZS9jYWNoZXN0b3JhZ2UnKVxuICBjb25zdCB7IGtDb25zdHJ1Y3QgfSA9IHJlcXVpcmUoJy4vbGliL2NhY2hlL3N5bWJvbHMnKVxuXG4gIC8vIENhY2hlICYgQ2FjaGVTdG9yYWdlIGFyZSB0aWdodGx5IGNvdXBsZWQgd2l0aCBmZXRjaC4gRXZlbiBpZiBpdCBtYXkgcnVuXG4gIC8vIGluIGFuIG9sZGVyIHZlcnNpb24gb2YgTm9kZSwgaXQgZG9lc24ndCBoYXZlIGFueSB1c2Ugd2l0aG91dCBmZXRjaC5cbiAgbW9kdWxlLmV4cG9ydHMuY2FjaGVzID0gbmV3IENhY2hlU3RvcmFnZShrQ29uc3RydWN0KVxufVxuXG5pZiAodXRpbC5ub2RlTWFqb3IgPj0gMTYpIHtcbiAgY29uc3QgeyBkZWxldGVDb29raWUsIGdldENvb2tpZXMsIGdldFNldENvb2tpZXMsIHNldENvb2tpZSB9ID0gcmVxdWlyZSgnLi9saWIvY29va2llcycpXG5cbiAgbW9kdWxlLmV4cG9ydHMuZGVsZXRlQ29va2llID0gZGVsZXRlQ29va2llXG4gIG1vZHVsZS5leHBvcnRzLmdldENvb2tpZXMgPSBnZXRDb29raWVzXG4gIG1vZHVsZS5leHBvcnRzLmdldFNldENvb2tpZXMgPSBnZXRTZXRDb29raWVzXG4gIG1vZHVsZS5leHBvcnRzLnNldENvb2tpZSA9IHNldENvb2tpZVxuXG4gIGNvbnN0IHsgcGFyc2VNSU1FVHlwZSwgc2VyaWFsaXplQU1pbWVUeXBlIH0gPSByZXF1aXJlKCcuL2xpYi9mZXRjaC9kYXRhVVJMJylcblxuICBtb2R1bGUuZXhwb3J0cy5wYXJzZU1JTUVUeXBlID0gcGFyc2VNSU1FVHlwZVxuICBtb2R1bGUuZXhwb3J0cy5zZXJpYWxpemVBTWltZVR5cGUgPSBzZXJpYWxpemVBTWltZVR5cGVcbn1cblxuaWYgKHV0aWwubm9kZU1ham9yID49IDE4ICYmIGhhc0NyeXB0bykge1xuICBjb25zdCB7IFdlYlNvY2tldCB9ID0gcmVxdWlyZSgnLi9saWIvd2Vic29ja2V0L3dlYnNvY2tldCcpXG5cbiAgbW9kdWxlLmV4cG9ydHMuV2ViU29ja2V0ID0gV2ViU29ja2V0XG59XG5cbm1vZHVsZS5leHBvcnRzLnJlcXVlc3QgPSBtYWtlRGlzcGF0Y2hlcihhcGkucmVxdWVzdClcbm1vZHVsZS5leHBvcnRzLnN0cmVhbSA9IG1ha2VEaXNwYXRjaGVyKGFwaS5zdHJlYW0pXG5tb2R1bGUuZXhwb3J0cy5waXBlbGluZSA9IG1ha2VEaXNwYXRjaGVyKGFwaS5waXBlbGluZSlcbm1vZHVsZS5leHBvcnRzLmNvbm5lY3QgPSBtYWtlRGlzcGF0Y2hlcihhcGkuY29ubmVjdClcbm1vZHVsZS5leHBvcnRzLnVwZ3JhZGUgPSBtYWtlRGlzcGF0Y2hlcihhcGkudXBncmFkZSlcblxubW9kdWxlLmV4cG9ydHMuTW9ja0NsaWVudCA9IE1vY2tDbGllbnRcbm1vZHVsZS5leHBvcnRzLk1vY2tQb29sID0gTW9ja1Bvb2xcbm1vZHVsZS5leHBvcnRzLk1vY2tBZ2VudCA9IE1vY2tBZ2VudFxubW9kdWxlLmV4cG9ydHMubW9ja0Vycm9ycyA9IG1vY2tFcnJvcnNcbiJdLCJuYW1lcyI6WyJDbGllbnQiLCJyZXF1aXJlIiwiRGlzcGF0Y2hlciIsImVycm9ycyIsIlBvb2wiLCJCYWxhbmNlZFBvb2wiLCJBZ2VudCIsInV0aWwiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsImFwaSIsImJ1aWxkQ29ubmVjdG9yIiwiTW9ja0NsaWVudCIsIk1vY2tBZ2VudCIsIk1vY2tQb29sIiwibW9ja0Vycm9ycyIsIlByb3h5QWdlbnQiLCJnZXRHbG9iYWxEaXNwYXRjaGVyIiwic2V0R2xvYmFsRGlzcGF0Y2hlciIsIkRlY29yYXRvckhhbmRsZXIiLCJSZWRpcmVjdEhhbmRsZXIiLCJjcmVhdGVSZWRpcmVjdEludGVyY2VwdG9yIiwiaGFzQ3J5cHRvIiwiT2JqZWN0IiwiYXNzaWduIiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1ha2VEaXNwYXRjaGVyIiwiZm4iLCJ1cmwiLCJvcHRzIiwiaGFuZGxlciIsIlVSTCIsInBhdGgiLCJzdGFydHNXaXRoIiwicGFyc2VPcmlnaW4iLCJvcmlnaW4iLCJwYXJzZVVSTCIsImFnZW50IiwiZGlzcGF0Y2hlciIsImNhbGwiLCJzZWFyY2giLCJwYXRobmFtZSIsIm1ldGhvZCIsImJvZHkiLCJub2RlTWFqb3IiLCJub2RlTWlub3IiLCJmZXRjaEltcGwiLCJmZXRjaCIsInJlc291cmNlIiwiYXJndW1lbnRzIiwiZXJyIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkhlYWRlcnMiLCJSZXNwb25zZSIsIlJlcXVlc3QiLCJGb3JtRGF0YSIsIkZpbGUiLCJGaWxlUmVhZGVyIiwic2V0R2xvYmFsT3JpZ2luIiwiZ2V0R2xvYmFsT3JpZ2luIiwiQ2FjaGVTdG9yYWdlIiwia0NvbnN0cnVjdCIsImNhY2hlcyIsImRlbGV0ZUNvb2tpZSIsImdldENvb2tpZXMiLCJnZXRTZXRDb29raWVzIiwic2V0Q29va2llIiwicGFyc2VNSU1FVHlwZSIsInNlcmlhbGl6ZUFNaW1lVHlwZSIsIldlYlNvY2tldCIsInJlcXVlc3QiLCJzdHJlYW0iLCJwaXBlbGluZSIsImNvbm5lY3QiLCJ1cGdyYWRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/agent.js":
/*!******************************************!*\
  !*** ./node_modules/undici/lib/agent.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { InvalidArgumentError } = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = __webpack_require__(/*! ./core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher-base.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/pool.js\");\nconst Client = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/undici/lib/client.js\");\nconst util = __webpack_require__(/*! ./core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst createRedirectInterceptor = __webpack_require__(/*! ./interceptor/redirectInterceptor */ \"(ssr)/./node_modules/undici/lib/interceptor/redirectInterceptor.js\");\nconst { WeakRef, FinalizationRegistry } = __webpack_require__(/*! ./compat/dispatcher-weakref */ \"(ssr)/./node_modules/undici/lib/compat/dispatcher-weakref.js\")();\nconst kOnConnect = Symbol(\"onConnect\");\nconst kOnDisconnect = Symbol(\"onDisconnect\");\nconst kOnConnectionError = Symbol(\"onConnectionError\");\nconst kMaxRedirections = Symbol(\"maxRedirections\");\nconst kOnDrain = Symbol(\"onDrain\");\nconst kFactory = Symbol(\"factory\");\nconst kFinalizer = Symbol(\"finalizer\");\nconst kOptions = Symbol(\"options\");\nfunction defaultFactory(origin, opts) {\n    return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);\n}\nclass Agent extends DispatcherBase {\n    constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}){\n        super();\n        if (typeof factory !== \"function\") {\n            throw new InvalidArgumentError(\"factory must be a function.\");\n        }\n        if (connect != null && typeof connect !== \"function\" && typeof connect !== \"object\") {\n            throw new InvalidArgumentError(\"connect must be a function or an object\");\n        }\n        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {\n            throw new InvalidArgumentError(\"maxRedirections must be a positive number\");\n        }\n        if (connect && typeof connect !== \"function\") {\n            connect = {\n                ...connect\n            };\n        }\n        this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [\n            createRedirectInterceptor({\n                maxRedirections\n            })\n        ];\n        this[kOptions] = {\n            ...util.deepClone(options),\n            connect\n        };\n        this[kOptions].interceptors = options.interceptors ? {\n            ...options.interceptors\n        } : undefined;\n        this[kMaxRedirections] = maxRedirections;\n        this[kFactory] = factory;\n        this[kClients] = new Map();\n        this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ (key)=>{\n            const ref = this[kClients].get(key);\n            if (ref !== undefined && ref.deref() === undefined) {\n                this[kClients].delete(key);\n            }\n        });\n        const agent = this;\n        this[kOnDrain] = (origin, targets)=>{\n            agent.emit(\"drain\", origin, [\n                agent,\n                ...targets\n            ]);\n        };\n        this[kOnConnect] = (origin, targets)=>{\n            agent.emit(\"connect\", origin, [\n                agent,\n                ...targets\n            ]);\n        };\n        this[kOnDisconnect] = (origin, targets, err)=>{\n            agent.emit(\"disconnect\", origin, [\n                agent,\n                ...targets\n            ], err);\n        };\n        this[kOnConnectionError] = (origin, targets, err)=>{\n            agent.emit(\"connectionError\", origin, [\n                agent,\n                ...targets\n            ], err);\n        };\n    }\n    get [kRunning]() {\n        let ret = 0;\n        for (const ref of this[kClients].values()){\n            const client = ref.deref();\n            /* istanbul ignore next: gc is undeterministic */ if (client) {\n                ret += client[kRunning];\n            }\n        }\n        return ret;\n    }\n    [kDispatch](opts, handler) {\n        let key;\n        if (opts.origin && (typeof opts.origin === \"string\" || opts.origin instanceof URL)) {\n            key = String(opts.origin);\n        } else {\n            throw new InvalidArgumentError(\"opts.origin must be a non-empty string or URL.\");\n        }\n        const ref = this[kClients].get(key);\n        let dispatcher = ref ? ref.deref() : null;\n        if (!dispatcher) {\n            dispatcher = this[kFactory](opts.origin, this[kOptions]).on(\"drain\", this[kOnDrain]).on(\"connect\", this[kOnConnect]).on(\"disconnect\", this[kOnDisconnect]).on(\"connectionError\", this[kOnConnectionError]);\n            this[kClients].set(key, new WeakRef(dispatcher));\n            this[kFinalizer].register(dispatcher, key);\n        }\n        return dispatcher.dispatch(opts, handler);\n    }\n    async [kClose]() {\n        const closePromises = [];\n        for (const ref of this[kClients].values()){\n            const client = ref.deref();\n            /* istanbul ignore else: gc is undeterministic */ if (client) {\n                closePromises.push(client.close());\n            }\n        }\n        await Promise.all(closePromises);\n    }\n    async [kDestroy](err) {\n        const destroyPromises = [];\n        for (const ref of this[kClients].values()){\n            const client = ref.deref();\n            /* istanbul ignore else: gc is undeterministic */ if (client) {\n                destroyPromises.push(client.destroy(err));\n            }\n        }\n        await Promise.all(destroyPromises);\n    }\n}\nmodule.exports = Agent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/abort-signal.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/api/abort-signal.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { addAbortListener } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { RequestAbortedError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst kListener = Symbol(\"kListener\");\nconst kSignal = Symbol(\"kSignal\");\nfunction abort(self) {\n    if (self.abort) {\n        self.abort();\n    } else {\n        self.onError(new RequestAbortedError());\n    }\n}\nfunction addSignal(self, signal) {\n    self[kSignal] = null;\n    self[kListener] = null;\n    if (!signal) {\n        return;\n    }\n    if (signal.aborted) {\n        abort(self);\n        return;\n    }\n    self[kSignal] = signal;\n    self[kListener] = ()=>{\n        abort(self);\n    };\n    addAbortListener(self[kSignal], self[kListener]);\n}\nfunction removeSignal(self) {\n    if (!self[kSignal]) {\n        return;\n    }\n    if (\"removeEventListener\" in self[kSignal]) {\n        self[kSignal].removeEventListener(\"abort\", self[kListener]);\n    } else {\n        self[kSignal].removeListener(\"abort\", self[kListener]);\n    }\n    self[kSignal] = null;\n    self[kListener] = null;\n}\nmodule.exports = {\n    addSignal,\n    removeSignal\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYWJvcnQtc2lnbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsZ0JBQWdCLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFDckMsTUFBTSxFQUFFQyxtQkFBbUIsRUFBRSxHQUFHRCxtQkFBT0EsQ0FBQztBQUV4QyxNQUFNRSxZQUFZQyxPQUFPO0FBQ3pCLE1BQU1DLFVBQVVELE9BQU87QUFFdkIsU0FBU0UsTUFBT0MsSUFBSTtJQUNsQixJQUFJQSxLQUFLRCxLQUFLLEVBQUU7UUFDZEMsS0FBS0QsS0FBSztJQUNaLE9BQU87UUFDTEMsS0FBS0MsT0FBTyxDQUFDLElBQUlOO0lBQ25CO0FBQ0Y7QUFFQSxTQUFTTyxVQUFXRixJQUFJLEVBQUVHLE1BQU07SUFDOUJILElBQUksQ0FBQ0YsUUFBUSxHQUFHO0lBQ2hCRSxJQUFJLENBQUNKLFVBQVUsR0FBRztJQUVsQixJQUFJLENBQUNPLFFBQVE7UUFDWDtJQUNGO0lBRUEsSUFBSUEsT0FBT0MsT0FBTyxFQUFFO1FBQ2xCTCxNQUFNQztRQUNOO0lBQ0Y7SUFFQUEsSUFBSSxDQUFDRixRQUFRLEdBQUdLO0lBQ2hCSCxJQUFJLENBQUNKLFVBQVUsR0FBRztRQUNoQkcsTUFBTUM7SUFDUjtJQUVBUCxpQkFBaUJPLElBQUksQ0FBQ0YsUUFBUSxFQUFFRSxJQUFJLENBQUNKLFVBQVU7QUFDakQ7QUFFQSxTQUFTUyxhQUFjTCxJQUFJO0lBQ3pCLElBQUksQ0FBQ0EsSUFBSSxDQUFDRixRQUFRLEVBQUU7UUFDbEI7SUFDRjtJQUVBLElBQUkseUJBQXlCRSxJQUFJLENBQUNGLFFBQVEsRUFBRTtRQUMxQ0UsSUFBSSxDQUFDRixRQUFRLENBQUNRLG1CQUFtQixDQUFDLFNBQVNOLElBQUksQ0FBQ0osVUFBVTtJQUM1RCxPQUFPO1FBQ0xJLElBQUksQ0FBQ0YsUUFBUSxDQUFDUyxjQUFjLENBQUMsU0FBU1AsSUFBSSxDQUFDSixVQUFVO0lBQ3ZEO0lBRUFJLElBQUksQ0FBQ0YsUUFBUSxHQUFHO0lBQ2hCRSxJQUFJLENBQUNKLFVBQVUsR0FBRztBQUNwQjtBQUVBWSxPQUFPQyxPQUFPLEdBQUc7SUFDZlA7SUFDQUc7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2FwaS9hYm9ydC1zaWduYWwuanM/NjNiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGFkZEFib3J0TGlzdGVuZXIgfSA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbCcpXG5jb25zdCB7IFJlcXVlc3RBYm9ydGVkRXJyb3IgfSA9IHJlcXVpcmUoJy4uL2NvcmUvZXJyb3JzJylcblxuY29uc3Qga0xpc3RlbmVyID0gU3ltYm9sKCdrTGlzdGVuZXInKVxuY29uc3Qga1NpZ25hbCA9IFN5bWJvbCgna1NpZ25hbCcpXG5cbmZ1bmN0aW9uIGFib3J0IChzZWxmKSB7XG4gIGlmIChzZWxmLmFib3J0KSB7XG4gICAgc2VsZi5hYm9ydCgpXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5vbkVycm9yKG5ldyBSZXF1ZXN0QWJvcnRlZEVycm9yKCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkU2lnbmFsIChzZWxmLCBzaWduYWwpIHtcbiAgc2VsZltrU2lnbmFsXSA9IG51bGxcbiAgc2VsZltrTGlzdGVuZXJdID0gbnVsbFxuXG4gIGlmICghc2lnbmFsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICBhYm9ydChzZWxmKVxuICAgIHJldHVyblxuICB9XG5cbiAgc2VsZltrU2lnbmFsXSA9IHNpZ25hbFxuICBzZWxmW2tMaXN0ZW5lcl0gPSAoKSA9PiB7XG4gICAgYWJvcnQoc2VsZilcbiAgfVxuXG4gIGFkZEFib3J0TGlzdGVuZXIoc2VsZltrU2lnbmFsXSwgc2VsZltrTGlzdGVuZXJdKVxufVxuXG5mdW5jdGlvbiByZW1vdmVTaWduYWwgKHNlbGYpIHtcbiAgaWYgKCFzZWxmW2tTaWduYWxdKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoJ3JlbW92ZUV2ZW50TGlzdGVuZXInIGluIHNlbGZba1NpZ25hbF0pIHtcbiAgICBzZWxmW2tTaWduYWxdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgc2VsZltrTGlzdGVuZXJdKVxuICB9IGVsc2Uge1xuICAgIHNlbGZba1NpZ25hbF0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgc2VsZltrTGlzdGVuZXJdKVxuICB9XG5cbiAgc2VsZltrU2lnbmFsXSA9IG51bGxcbiAgc2VsZltrTGlzdGVuZXJdID0gbnVsbFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWRkU2lnbmFsLFxuICByZW1vdmVTaWduYWxcbn1cbiJdLCJuYW1lcyI6WyJhZGRBYm9ydExpc3RlbmVyIiwicmVxdWlyZSIsIlJlcXVlc3RBYm9ydGVkRXJyb3IiLCJrTGlzdGVuZXIiLCJTeW1ib2wiLCJrU2lnbmFsIiwiYWJvcnQiLCJzZWxmIiwib25FcnJvciIsImFkZFNpZ25hbCIsInNpZ25hbCIsImFib3J0ZWQiLCJyZW1vdmVTaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/abort-signal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-connect.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-connect.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { AsyncResource } = __webpack_require__(/*! async_hooks */ \"async_hooks\");\nconst { InvalidArgumentError, RequestAbortedError, SocketError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nclass ConnectHandler extends AsyncResource {\n    constructor(opts, callback){\n        if (!opts || typeof opts !== \"object\") {\n            throw new InvalidArgumentError(\"invalid opts\");\n        }\n        if (typeof callback !== \"function\") {\n            throw new InvalidArgumentError(\"invalid callback\");\n        }\n        const { signal, opaque, responseHeaders } = opts;\n        if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n            throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n        }\n        super(\"UNDICI_CONNECT\");\n        this.opaque = opaque || null;\n        this.responseHeaders = responseHeaders || null;\n        this.callback = callback;\n        this.abort = null;\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        if (!this.callback) {\n            throw new RequestAbortedError();\n        }\n        this.abort = abort;\n        this.context = context;\n    }\n    onHeaders() {\n        throw new SocketError(\"bad connect\", null);\n    }\n    onUpgrade(statusCode, rawHeaders, socket) {\n        const { callback, opaque, context } = this;\n        removeSignal(this);\n        this.callback = null;\n        let headers = rawHeaders;\n        // Indicates is an HTTP2Session\n        if (headers != null) {\n            headers = this.responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        }\n        this.runInAsyncScope(callback, null, null, {\n            statusCode,\n            headers,\n            socket,\n            opaque,\n            context\n        });\n    }\n    onError(err) {\n        const { callback, opaque } = this;\n        removeSignal(this);\n        if (callback) {\n            this.callback = null;\n            queueMicrotask(()=>{\n                this.runInAsyncScope(callback, null, err, {\n                    opaque\n                });\n            });\n        }\n    }\n}\nfunction connect(opts, callback) {\n    if (callback === undefined) {\n        return new Promise((resolve, reject)=>{\n            connect.call(this, opts, (err, data)=>{\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    }\n    try {\n        const connectHandler = new ConnectHandler(opts, callback);\n        this.dispatch({\n            ...opts,\n            method: \"CONNECT\"\n        }, connectHandler);\n    } catch (err) {\n        if (typeof callback !== \"function\") {\n            throw err;\n        }\n        const opaque = opts && opts.opaque;\n        queueMicrotask(()=>callback(err, {\n                opaque\n            }));\n    }\n}\nmodule.exports = connect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYXBpLWNvbm5lY3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLGFBQWEsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUNsQyxNQUFNLEVBQUVDLG9CQUFvQixFQUFFQyxtQkFBbUIsRUFBRUMsV0FBVyxFQUFFLEdBQUdILG1CQUFPQSxDQUFDO0FBQzNFLE1BQU1JLE9BQU9KLG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU0sRUFBRUssU0FBUyxFQUFFQyxZQUFZLEVBQUUsR0FBR04sbUJBQU9BLENBQUM7QUFFNUMsTUFBTU8sdUJBQXVCUjtJQUMzQlMsWUFBYUMsSUFBSSxFQUFFQyxRQUFRLENBQUU7UUFDM0IsSUFBSSxDQUFDRCxRQUFRLE9BQU9BLFNBQVMsVUFBVTtZQUNyQyxNQUFNLElBQUlSLHFCQUFxQjtRQUNqQztRQUVBLElBQUksT0FBT1MsYUFBYSxZQUFZO1lBQ2xDLE1BQU0sSUFBSVQscUJBQXFCO1FBQ2pDO1FBRUEsTUFBTSxFQUFFVSxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsZUFBZSxFQUFFLEdBQUdKO1FBRTVDLElBQUlFLFVBQVUsT0FBT0EsT0FBT0csRUFBRSxLQUFLLGNBQWMsT0FBT0gsT0FBT0ksZ0JBQWdCLEtBQUssWUFBWTtZQUM5RixNQUFNLElBQUlkLHFCQUFxQjtRQUNqQztRQUVBLEtBQUssQ0FBQztRQUVOLElBQUksQ0FBQ1csTUFBTSxHQUFHQSxVQUFVO1FBQ3hCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQSxtQkFBbUI7UUFDMUMsSUFBSSxDQUFDSCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ00sS0FBSyxHQUFHO1FBRWJYLFVBQVUsSUFBSSxFQUFFTTtJQUNsQjtJQUVBTSxVQUFXRCxLQUFLLEVBQUVFLE9BQU8sRUFBRTtRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDUixRQUFRLEVBQUU7WUFDbEIsTUFBTSxJQUFJUjtRQUNaO1FBRUEsSUFBSSxDQUFDYyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDRSxPQUFPLEdBQUdBO0lBQ2pCO0lBRUFDLFlBQWE7UUFDWCxNQUFNLElBQUloQixZQUFZLGVBQWU7SUFDdkM7SUFFQWlCLFVBQVdDLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUU7UUFDekMsTUFBTSxFQUFFYixRQUFRLEVBQUVFLE1BQU0sRUFBRU0sT0FBTyxFQUFFLEdBQUcsSUFBSTtRQUUxQ1osYUFBYSxJQUFJO1FBRWpCLElBQUksQ0FBQ0ksUUFBUSxHQUFHO1FBRWhCLElBQUljLFVBQVVGO1FBQ2QsK0JBQStCO1FBQy9CLElBQUlFLFdBQVcsTUFBTTtZQUNuQkEsVUFBVSxJQUFJLENBQUNYLGVBQWUsS0FBSyxRQUFRVCxLQUFLcUIsZUFBZSxDQUFDSCxjQUFjbEIsS0FBS3NCLFlBQVksQ0FBQ0o7UUFDbEc7UUFFQSxJQUFJLENBQUNLLGVBQWUsQ0FBQ2pCLFVBQVUsTUFBTSxNQUFNO1lBQ3pDVztZQUNBRztZQUNBRDtZQUNBWDtZQUNBTTtRQUNGO0lBQ0Y7SUFFQVUsUUFBU0MsR0FBRyxFQUFFO1FBQ1osTUFBTSxFQUFFbkIsUUFBUSxFQUFFRSxNQUFNLEVBQUUsR0FBRyxJQUFJO1FBRWpDTixhQUFhLElBQUk7UUFFakIsSUFBSUksVUFBVTtZQUNaLElBQUksQ0FBQ0EsUUFBUSxHQUFHO1lBQ2hCb0IsZUFBZTtnQkFDYixJQUFJLENBQUNILGVBQWUsQ0FBQ2pCLFVBQVUsTUFBTW1CLEtBQUs7b0JBQUVqQjtnQkFBTztZQUNyRDtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNtQixRQUFTdEIsSUFBSSxFQUFFQyxRQUFRO0lBQzlCLElBQUlBLGFBQWFzQixXQUFXO1FBQzFCLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztZQUMzQkosUUFBUUssSUFBSSxDQUFDLElBQUksRUFBRTNCLE1BQU0sQ0FBQ29CLEtBQUtRO2dCQUM3QixPQUFPUixNQUFNTSxPQUFPTixPQUFPSyxRQUFRRztZQUNyQztRQUNGO0lBQ0Y7SUFFQSxJQUFJO1FBQ0YsTUFBTUMsaUJBQWlCLElBQUkvQixlQUFlRSxNQUFNQztRQUNoRCxJQUFJLENBQUM2QixRQUFRLENBQUM7WUFBRSxHQUFHOUIsSUFBSTtZQUFFK0IsUUFBUTtRQUFVLEdBQUdGO0lBQ2hELEVBQUUsT0FBT1QsS0FBSztRQUNaLElBQUksT0FBT25CLGFBQWEsWUFBWTtZQUNsQyxNQUFNbUI7UUFDUjtRQUNBLE1BQU1qQixTQUFTSCxRQUFRQSxLQUFLRyxNQUFNO1FBQ2xDa0IsZUFBZSxJQUFNcEIsU0FBU21CLEtBQUs7Z0JBQUVqQjtZQUFPO0lBQzlDO0FBQ0Y7QUFFQTZCLE9BQU9DLE9BQU8sR0FBR1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYXBpLWNvbm5lY3QuanM/ZWUyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBBc3luY1Jlc291cmNlIH0gPSByZXF1aXJlKCdhc3luY19ob29rcycpXG5jb25zdCB7IEludmFsaWRBcmd1bWVudEVycm9yLCBSZXF1ZXN0QWJvcnRlZEVycm9yLCBTb2NrZXRFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbCcpXG5jb25zdCB7IGFkZFNpZ25hbCwgcmVtb3ZlU2lnbmFsIH0gPSByZXF1aXJlKCcuL2Fib3J0LXNpZ25hbCcpXG5cbmNsYXNzIENvbm5lY3RIYW5kbGVyIGV4dGVuZHMgQXN5bmNSZXNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yIChvcHRzLCBjYWxsYmFjaykge1xuICAgIGlmICghb3B0cyB8fCB0eXBlb2Ygb3B0cyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignaW52YWxpZCBvcHRzJylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2ludmFsaWQgY2FsbGJhY2snKVxuICAgIH1cblxuICAgIGNvbnN0IHsgc2lnbmFsLCBvcGFxdWUsIHJlc3BvbnNlSGVhZGVycyB9ID0gb3B0c1xuXG4gICAgaWYgKHNpZ25hbCAmJiB0eXBlb2Ygc2lnbmFsLm9uICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdzaWduYWwgbXVzdCBiZSBhbiBFdmVudEVtaXR0ZXIgb3IgRXZlbnRUYXJnZXQnKVxuICAgIH1cblxuICAgIHN1cGVyKCdVTkRJQ0lfQ09OTkVDVCcpXG5cbiAgICB0aGlzLm9wYXF1ZSA9IG9wYXF1ZSB8fCBudWxsXG4gICAgdGhpcy5yZXNwb25zZUhlYWRlcnMgPSByZXNwb25zZUhlYWRlcnMgfHwgbnVsbFxuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIHRoaXMuYWJvcnQgPSBudWxsXG5cbiAgICBhZGRTaWduYWwodGhpcywgc2lnbmFsKVxuICB9XG5cbiAgb25Db25uZWN0IChhYm9ydCwgY29udGV4dCkge1xuICAgIGlmICghdGhpcy5jYWxsYmFjaykge1xuICAgICAgdGhyb3cgbmV3IFJlcXVlc3RBYm9ydGVkRXJyb3IoKVxuICAgIH1cblxuICAgIHRoaXMuYWJvcnQgPSBhYm9ydFxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHRcbiAgfVxuXG4gIG9uSGVhZGVycyAoKSB7XG4gICAgdGhyb3cgbmV3IFNvY2tldEVycm9yKCdiYWQgY29ubmVjdCcsIG51bGwpXG4gIH1cblxuICBvblVwZ3JhZGUgKHN0YXR1c0NvZGUsIHJhd0hlYWRlcnMsIHNvY2tldCkge1xuICAgIGNvbnN0IHsgY2FsbGJhY2ssIG9wYXF1ZSwgY29udGV4dCB9ID0gdGhpc1xuXG4gICAgcmVtb3ZlU2lnbmFsKHRoaXMpXG5cbiAgICB0aGlzLmNhbGxiYWNrID0gbnVsbFxuXG4gICAgbGV0IGhlYWRlcnMgPSByYXdIZWFkZXJzXG4gICAgLy8gSW5kaWNhdGVzIGlzIGFuIEhUVFAyU2Vzc2lvblxuICAgIGlmIChoZWFkZXJzICE9IG51bGwpIHtcbiAgICAgIGhlYWRlcnMgPSB0aGlzLnJlc3BvbnNlSGVhZGVycyA9PT0gJ3JhdycgPyB1dGlsLnBhcnNlUmF3SGVhZGVycyhyYXdIZWFkZXJzKSA6IHV0aWwucGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpXG4gICAgfVxuXG4gICAgdGhpcy5ydW5JbkFzeW5jU2NvcGUoY2FsbGJhY2ssIG51bGwsIG51bGwsIHtcbiAgICAgIHN0YXR1c0NvZGUsXG4gICAgICBoZWFkZXJzLFxuICAgICAgc29ja2V0LFxuICAgICAgb3BhcXVlLFxuICAgICAgY29udGV4dFxuICAgIH0pXG4gIH1cblxuICBvbkVycm9yIChlcnIpIHtcbiAgICBjb25zdCB7IGNhbGxiYWNrLCBvcGFxdWUgfSA9IHRoaXNcblxuICAgIHJlbW92ZVNpZ25hbCh0aGlzKVxuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrID0gbnVsbFxuICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICB0aGlzLnJ1bkluQXN5bmNTY29wZShjYWxsYmFjaywgbnVsbCwgZXJyLCB7IG9wYXF1ZSB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29ubmVjdCAob3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdC5jYWxsKHRoaXMsIG9wdHMsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZShkYXRhKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjb25uZWN0SGFuZGxlciA9IG5ldyBDb25uZWN0SGFuZGxlcihvcHRzLCBjYWxsYmFjaylcbiAgICB0aGlzLmRpc3BhdGNoKHsgLi4ub3B0cywgbWV0aG9kOiAnQ09OTkVDVCcgfSwgY29ubmVjdEhhbmRsZXIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgICBjb25zdCBvcGFxdWUgPSBvcHRzICYmIG9wdHMub3BhcXVlXG4gICAgcXVldWVNaWNyb3Rhc2soKCkgPT4gY2FsbGJhY2soZXJyLCB7IG9wYXF1ZSB9KSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbm5lY3RcbiJdLCJuYW1lcyI6WyJBc3luY1Jlc291cmNlIiwicmVxdWlyZSIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiUmVxdWVzdEFib3J0ZWRFcnJvciIsIlNvY2tldEVycm9yIiwidXRpbCIsImFkZFNpZ25hbCIsInJlbW92ZVNpZ25hbCIsIkNvbm5lY3RIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiY2FsbGJhY2siLCJzaWduYWwiLCJvcGFxdWUiLCJyZXNwb25zZUhlYWRlcnMiLCJvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJhYm9ydCIsIm9uQ29ubmVjdCIsImNvbnRleHQiLCJvbkhlYWRlcnMiLCJvblVwZ3JhZGUiLCJzdGF0dXNDb2RlIiwicmF3SGVhZGVycyIsInNvY2tldCIsImhlYWRlcnMiLCJwYXJzZVJhd0hlYWRlcnMiLCJwYXJzZUhlYWRlcnMiLCJydW5JbkFzeW5jU2NvcGUiLCJvbkVycm9yIiwiZXJyIiwicXVldWVNaWNyb3Rhc2siLCJjb25uZWN0IiwidW5kZWZpbmVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYWxsIiwiZGF0YSIsImNvbm5lY3RIYW5kbGVyIiwiZGlzcGF0Y2giLCJtZXRob2QiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-pipeline.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-pipeline.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Readable, Duplex, PassThrough } = __webpack_require__(/*! stream */ \"stream\");\nconst { InvalidArgumentError, InvalidReturnValueError, RequestAbortedError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { AsyncResource } = __webpack_require__(/*! async_hooks */ \"async_hooks\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst kResume = Symbol(\"resume\");\nclass PipelineRequest extends Readable {\n    constructor(){\n        super({\n            autoDestroy: true\n        });\n        this[kResume] = null;\n    }\n    _read() {\n        const { [kResume]: resume } = this;\n        if (resume) {\n            this[kResume] = null;\n            resume();\n        }\n    }\n    _destroy(err, callback) {\n        this._read();\n        callback(err);\n    }\n}\nclass PipelineResponse extends Readable {\n    constructor(resume){\n        super({\n            autoDestroy: true\n        });\n        this[kResume] = resume;\n    }\n    _read() {\n        this[kResume]();\n    }\n    _destroy(err, callback) {\n        if (!err && !this._readableState.endEmitted) {\n            err = new RequestAbortedError();\n        }\n        callback(err);\n    }\n}\nclass PipelineHandler extends AsyncResource {\n    constructor(opts, handler){\n        if (!opts || typeof opts !== \"object\") {\n            throw new InvalidArgumentError(\"invalid opts\");\n        }\n        if (typeof handler !== \"function\") {\n            throw new InvalidArgumentError(\"invalid handler\");\n        }\n        const { signal, method, opaque, onInfo, responseHeaders } = opts;\n        if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n            throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n        }\n        if (method === \"CONNECT\") {\n            throw new InvalidArgumentError(\"invalid method\");\n        }\n        if (onInfo && typeof onInfo !== \"function\") {\n            throw new InvalidArgumentError(\"invalid onInfo callback\");\n        }\n        super(\"UNDICI_PIPELINE\");\n        this.opaque = opaque || null;\n        this.responseHeaders = responseHeaders || null;\n        this.handler = handler;\n        this.abort = null;\n        this.context = null;\n        this.onInfo = onInfo || null;\n        this.req = new PipelineRequest().on(\"error\", util.nop);\n        this.ret = new Duplex({\n            readableObjectMode: opts.objectMode,\n            autoDestroy: true,\n            read: ()=>{\n                const { body } = this;\n                if (body && body.resume) {\n                    body.resume();\n                }\n            },\n            write: (chunk, encoding, callback)=>{\n                const { req } = this;\n                if (req.push(chunk, encoding) || req._readableState.destroyed) {\n                    callback();\n                } else {\n                    req[kResume] = callback;\n                }\n            },\n            destroy: (err, callback)=>{\n                const { body, req, res, ret, abort } = this;\n                if (!err && !ret._readableState.endEmitted) {\n                    err = new RequestAbortedError();\n                }\n                if (abort && err) {\n                    abort();\n                }\n                util.destroy(body, err);\n                util.destroy(req, err);\n                util.destroy(res, err);\n                removeSignal(this);\n                callback(err);\n            }\n        }).on(\"prefinish\", ()=>{\n            const { req } = this;\n            // Node < 15 does not call _final in same tick.\n            req.push(null);\n        });\n        this.res = null;\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        const { ret, res } = this;\n        assert(!res, \"pipeline cannot be retried\");\n        if (ret.destroyed) {\n            throw new RequestAbortedError();\n        }\n        this.abort = abort;\n        this.context = context;\n    }\n    onHeaders(statusCode, rawHeaders, resume) {\n        const { opaque, handler, context } = this;\n        if (statusCode < 200) {\n            if (this.onInfo) {\n                const headers = this.responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n                this.onInfo({\n                    statusCode,\n                    headers\n                });\n            }\n            return;\n        }\n        this.res = new PipelineResponse(resume);\n        let body;\n        try {\n            this.handler = null;\n            const headers = this.responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n            body = this.runInAsyncScope(handler, null, {\n                statusCode,\n                headers,\n                opaque,\n                body: this.res,\n                context\n            });\n        } catch (err) {\n            this.res.on(\"error\", util.nop);\n            throw err;\n        }\n        if (!body || typeof body.on !== \"function\") {\n            throw new InvalidReturnValueError(\"expected Readable\");\n        }\n        body.on(\"data\", (chunk)=>{\n            const { ret, body } = this;\n            if (!ret.push(chunk) && body.pause) {\n                body.pause();\n            }\n        }).on(\"error\", (err)=>{\n            const { ret } = this;\n            util.destroy(ret, err);\n        }).on(\"end\", ()=>{\n            const { ret } = this;\n            ret.push(null);\n        }).on(\"close\", ()=>{\n            const { ret } = this;\n            if (!ret._readableState.ended) {\n                util.destroy(ret, new RequestAbortedError());\n            }\n        });\n        this.body = body;\n    }\n    onData(chunk) {\n        const { res } = this;\n        return res.push(chunk);\n    }\n    onComplete(trailers) {\n        const { res } = this;\n        res.push(null);\n    }\n    onError(err) {\n        const { ret } = this;\n        this.handler = null;\n        util.destroy(ret, err);\n    }\n}\nfunction pipeline(opts, handler) {\n    try {\n        const pipelineHandler = new PipelineHandler(opts, handler);\n        this.dispatch({\n            ...opts,\n            body: pipelineHandler.req\n        }, pipelineHandler);\n        return pipelineHandler.ret;\n    } catch (err) {\n        return new PassThrough().destroy(err);\n    }\n}\nmodule.exports = pipeline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-pipeline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-request.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-request.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Readable = __webpack_require__(/*! ./readable */ \"(ssr)/./node_modules/undici/lib/api/readable.js\");\nconst { InvalidArgumentError, RequestAbortedError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { getResolveErrorBodyCallback } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/api/util.js\");\nconst { AsyncResource } = __webpack_require__(/*! async_hooks */ \"async_hooks\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nclass RequestHandler extends AsyncResource {\n    constructor(opts, callback){\n        if (!opts || typeof opts !== \"object\") {\n            throw new InvalidArgumentError(\"invalid opts\");\n        }\n        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;\n        try {\n            if (typeof callback !== \"function\") {\n                throw new InvalidArgumentError(\"invalid callback\");\n            }\n            if (highWaterMark && (typeof highWaterMark !== \"number\" || highWaterMark < 0)) {\n                throw new InvalidArgumentError(\"invalid highWaterMark\");\n            }\n            if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n                throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n            }\n            if (method === \"CONNECT\") {\n                throw new InvalidArgumentError(\"invalid method\");\n            }\n            if (onInfo && typeof onInfo !== \"function\") {\n                throw new InvalidArgumentError(\"invalid onInfo callback\");\n            }\n            super(\"UNDICI_REQUEST\");\n        } catch (err) {\n            if (util.isStream(body)) {\n                util.destroy(body.on(\"error\", util.nop), err);\n            }\n            throw err;\n        }\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.callback = callback;\n        this.res = null;\n        this.abort = null;\n        this.body = body;\n        this.trailers = {};\n        this.context = null;\n        this.onInfo = onInfo || null;\n        this.throwOnError = throwOnError;\n        this.highWaterMark = highWaterMark;\n        if (util.isStream(body)) {\n            body.on(\"error\", (err)=>{\n                this.onError(err);\n            });\n        }\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        if (!this.callback) {\n            throw new RequestAbortedError();\n        }\n        this.abort = abort;\n        this.context = context;\n    }\n    onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;\n        const headers = responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        if (statusCode < 200) {\n            if (this.onInfo) {\n                this.onInfo({\n                    statusCode,\n                    headers\n                });\n            }\n            return;\n        }\n        const parsedHeaders = responseHeaders === \"raw\" ? util.parseHeaders(rawHeaders) : headers;\n        const contentType = parsedHeaders[\"content-type\"];\n        const body = new Readable({\n            resume,\n            abort,\n            contentType,\n            highWaterMark\n        });\n        this.callback = null;\n        this.res = body;\n        if (callback !== null) {\n            if (this.throwOnError && statusCode >= 400) {\n                this.runInAsyncScope(getResolveErrorBodyCallback, null, {\n                    callback,\n                    body,\n                    contentType,\n                    statusCode,\n                    statusMessage,\n                    headers\n                });\n            } else {\n                this.runInAsyncScope(callback, null, null, {\n                    statusCode,\n                    headers,\n                    trailers: this.trailers,\n                    opaque,\n                    body,\n                    context\n                });\n            }\n        }\n    }\n    onData(chunk) {\n        const { res } = this;\n        return res.push(chunk);\n    }\n    onComplete(trailers) {\n        const { res } = this;\n        removeSignal(this);\n        util.parseHeaders(trailers, this.trailers);\n        res.push(null);\n    }\n    onError(err) {\n        const { res, callback, body, opaque } = this;\n        removeSignal(this);\n        if (callback) {\n            // TODO: Does this need queueMicrotask?\n            this.callback = null;\n            queueMicrotask(()=>{\n                this.runInAsyncScope(callback, null, err, {\n                    opaque\n                });\n            });\n        }\n        if (res) {\n            this.res = null;\n            // Ensure all queued handlers are invoked before destroying res.\n            queueMicrotask(()=>{\n                util.destroy(res, err);\n            });\n        }\n        if (body) {\n            this.body = null;\n            util.destroy(body, err);\n        }\n    }\n}\nfunction request(opts, callback) {\n    if (callback === undefined) {\n        return new Promise((resolve, reject)=>{\n            request.call(this, opts, (err, data)=>{\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    }\n    try {\n        this.dispatch(opts, new RequestHandler(opts, callback));\n    } catch (err) {\n        if (typeof callback !== \"function\") {\n            throw err;\n        }\n        const opaque = opts && opts.opaque;\n        queueMicrotask(()=>callback(err, {\n                opaque\n            }));\n    }\n}\nmodule.exports = request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-stream.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/api/api-stream.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { finished, PassThrough } = __webpack_require__(/*! stream */ \"stream\");\nconst { InvalidArgumentError, InvalidReturnValueError, RequestAbortedError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { getResolveErrorBodyCallback } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/api/util.js\");\nconst { AsyncResource } = __webpack_require__(/*! async_hooks */ \"async_hooks\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nclass StreamHandler extends AsyncResource {\n    constructor(opts, factory, callback){\n        if (!opts || typeof opts !== \"object\") {\n            throw new InvalidArgumentError(\"invalid opts\");\n        }\n        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;\n        try {\n            if (typeof callback !== \"function\") {\n                throw new InvalidArgumentError(\"invalid callback\");\n            }\n            if (typeof factory !== \"function\") {\n                throw new InvalidArgumentError(\"invalid factory\");\n            }\n            if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n                throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n            }\n            if (method === \"CONNECT\") {\n                throw new InvalidArgumentError(\"invalid method\");\n            }\n            if (onInfo && typeof onInfo !== \"function\") {\n                throw new InvalidArgumentError(\"invalid onInfo callback\");\n            }\n            super(\"UNDICI_STREAM\");\n        } catch (err) {\n            if (util.isStream(body)) {\n                util.destroy(body.on(\"error\", util.nop), err);\n            }\n            throw err;\n        }\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.factory = factory;\n        this.callback = callback;\n        this.res = null;\n        this.abort = null;\n        this.context = null;\n        this.trailers = null;\n        this.body = body;\n        this.onInfo = onInfo || null;\n        this.throwOnError = throwOnError || false;\n        if (util.isStream(body)) {\n            body.on(\"error\", (err)=>{\n                this.onError(err);\n            });\n        }\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        if (!this.callback) {\n            throw new RequestAbortedError();\n        }\n        this.abort = abort;\n        this.context = context;\n    }\n    onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const { factory, opaque, context, callback, responseHeaders } = this;\n        const headers = responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        if (statusCode < 200) {\n            if (this.onInfo) {\n                this.onInfo({\n                    statusCode,\n                    headers\n                });\n            }\n            return;\n        }\n        this.factory = null;\n        let res;\n        if (this.throwOnError && statusCode >= 400) {\n            const parsedHeaders = responseHeaders === \"raw\" ? util.parseHeaders(rawHeaders) : headers;\n            const contentType = parsedHeaders[\"content-type\"];\n            res = new PassThrough();\n            this.callback = null;\n            this.runInAsyncScope(getResolveErrorBodyCallback, null, {\n                callback,\n                body: res,\n                contentType,\n                statusCode,\n                statusMessage,\n                headers\n            });\n        } else {\n            if (factory === null) {\n                return;\n            }\n            res = this.runInAsyncScope(factory, null, {\n                statusCode,\n                headers,\n                opaque,\n                context\n            });\n            if (!res || typeof res.write !== \"function\" || typeof res.end !== \"function\" || typeof res.on !== \"function\") {\n                throw new InvalidReturnValueError(\"expected Writable\");\n            }\n            // TODO: Avoid finished. It registers an unnecessary amount of listeners.\n            finished(res, {\n                readable: false\n            }, (err)=>{\n                const { callback, res, opaque, trailers, abort } = this;\n                this.res = null;\n                if (err || !res.readable) {\n                    util.destroy(res, err);\n                }\n                this.callback = null;\n                this.runInAsyncScope(callback, null, err || null, {\n                    opaque,\n                    trailers\n                });\n                if (err) {\n                    abort();\n                }\n            });\n        }\n        res.on(\"drain\", resume);\n        this.res = res;\n        const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;\n        return needDrain !== true;\n    }\n    onData(chunk) {\n        const { res } = this;\n        return res ? res.write(chunk) : true;\n    }\n    onComplete(trailers) {\n        const { res } = this;\n        removeSignal(this);\n        if (!res) {\n            return;\n        }\n        this.trailers = util.parseHeaders(trailers);\n        res.end();\n    }\n    onError(err) {\n        const { res, callback, opaque, body } = this;\n        removeSignal(this);\n        this.factory = null;\n        if (res) {\n            this.res = null;\n            util.destroy(res, err);\n        } else if (callback) {\n            this.callback = null;\n            queueMicrotask(()=>{\n                this.runInAsyncScope(callback, null, err, {\n                    opaque\n                });\n            });\n        }\n        if (body) {\n            this.body = null;\n            util.destroy(body, err);\n        }\n    }\n}\nfunction stream(opts, factory, callback) {\n    if (callback === undefined) {\n        return new Promise((resolve, reject)=>{\n            stream.call(this, opts, factory, (err, data)=>{\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    }\n    try {\n        this.dispatch(opts, new StreamHandler(opts, factory, callback));\n    } catch (err) {\n        if (typeof callback !== \"function\") {\n            throw err;\n        }\n        const opaque = opts && opts.opaque;\n        queueMicrotask(()=>callback(err, {\n                opaque\n            }));\n    }\n}\nmodule.exports = stream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/api-upgrade.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/api/api-upgrade.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { InvalidArgumentError, RequestAbortedError, SocketError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { AsyncResource } = __webpack_require__(/*! async_hooks */ \"async_hooks\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { addSignal, removeSignal } = __webpack_require__(/*! ./abort-signal */ \"(ssr)/./node_modules/undici/lib/api/abort-signal.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nclass UpgradeHandler extends AsyncResource {\n    constructor(opts, callback){\n        if (!opts || typeof opts !== \"object\") {\n            throw new InvalidArgumentError(\"invalid opts\");\n        }\n        if (typeof callback !== \"function\") {\n            throw new InvalidArgumentError(\"invalid callback\");\n        }\n        const { signal, opaque, responseHeaders } = opts;\n        if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n            throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n        }\n        super(\"UNDICI_UPGRADE\");\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.callback = callback;\n        this.abort = null;\n        this.context = null;\n        addSignal(this, signal);\n    }\n    onConnect(abort, context) {\n        if (!this.callback) {\n            throw new RequestAbortedError();\n        }\n        this.abort = abort;\n        this.context = null;\n    }\n    onHeaders() {\n        throw new SocketError(\"bad upgrade\", null);\n    }\n    onUpgrade(statusCode, rawHeaders, socket) {\n        const { callback, opaque, context } = this;\n        assert.strictEqual(statusCode, 101);\n        removeSignal(this);\n        this.callback = null;\n        const headers = this.responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        this.runInAsyncScope(callback, null, null, {\n            headers,\n            socket,\n            opaque,\n            context\n        });\n    }\n    onError(err) {\n        const { callback, opaque } = this;\n        removeSignal(this);\n        if (callback) {\n            this.callback = null;\n            queueMicrotask(()=>{\n                this.runInAsyncScope(callback, null, err, {\n                    opaque\n                });\n            });\n        }\n    }\n}\nfunction upgrade(opts, callback) {\n    if (callback === undefined) {\n        return new Promise((resolve, reject)=>{\n            upgrade.call(this, opts, (err, data)=>{\n                return err ? reject(err) : resolve(data);\n            });\n        });\n    }\n    try {\n        const upgradeHandler = new UpgradeHandler(opts, callback);\n        this.dispatch({\n            ...opts,\n            method: opts.method || \"GET\",\n            upgrade: opts.protocol || \"Websocket\"\n        }, upgradeHandler);\n    } catch (err) {\n        if (typeof callback !== \"function\") {\n            throw err;\n        }\n        const opaque = opts && opts.opaque;\n        queueMicrotask(()=>callback(err, {\n                opaque\n            }));\n    }\n}\nmodule.exports = upgrade;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvYXBpLXVwZ3JhZGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLG9CQUFvQixFQUFFQyxtQkFBbUIsRUFBRUMsV0FBVyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQzNFLE1BQU0sRUFBRUMsYUFBYSxFQUFFLEdBQUdELG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU1FLE9BQU9GLG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU0sRUFBRUcsU0FBUyxFQUFFQyxZQUFZLEVBQUUsR0FBR0osbUJBQU9BLENBQUM7QUFDNUMsTUFBTUssU0FBU0wsbUJBQU9BLENBQUM7QUFFdkIsTUFBTU0sdUJBQXVCTDtJQUMzQk0sWUFBYUMsSUFBSSxFQUFFQyxRQUFRLENBQUU7UUFDM0IsSUFBSSxDQUFDRCxRQUFRLE9BQU9BLFNBQVMsVUFBVTtZQUNyQyxNQUFNLElBQUlYLHFCQUFxQjtRQUNqQztRQUVBLElBQUksT0FBT1ksYUFBYSxZQUFZO1lBQ2xDLE1BQU0sSUFBSVoscUJBQXFCO1FBQ2pDO1FBRUEsTUFBTSxFQUFFYSxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsZUFBZSxFQUFFLEdBQUdKO1FBRTVDLElBQUlFLFVBQVUsT0FBT0EsT0FBT0csRUFBRSxLQUFLLGNBQWMsT0FBT0gsT0FBT0ksZ0JBQWdCLEtBQUssWUFBWTtZQUM5RixNQUFNLElBQUlqQixxQkFBcUI7UUFDakM7UUFFQSxLQUFLLENBQUM7UUFFTixJQUFJLENBQUNlLGVBQWUsR0FBR0EsbUJBQW1CO1FBQzFDLElBQUksQ0FBQ0QsTUFBTSxHQUFHQSxVQUFVO1FBQ3hCLElBQUksQ0FBQ0YsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNNLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBRWZiLFVBQVUsSUFBSSxFQUFFTztJQUNsQjtJQUVBTyxVQUFXRixLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDUCxRQUFRLEVBQUU7WUFDbEIsTUFBTSxJQUFJWDtRQUNaO1FBRUEsSUFBSSxDQUFDaUIsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsT0FBTyxHQUFHO0lBQ2pCO0lBRUFFLFlBQWE7UUFDWCxNQUFNLElBQUluQixZQUFZLGVBQWU7SUFDdkM7SUFFQW9CLFVBQVdDLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUU7UUFDekMsTUFBTSxFQUFFYixRQUFRLEVBQUVFLE1BQU0sRUFBRUssT0FBTyxFQUFFLEdBQUcsSUFBSTtRQUUxQ1gsT0FBT2tCLFdBQVcsQ0FBQ0gsWUFBWTtRQUUvQmhCLGFBQWEsSUFBSTtRQUVqQixJQUFJLENBQUNLLFFBQVEsR0FBRztRQUNoQixNQUFNZSxVQUFVLElBQUksQ0FBQ1osZUFBZSxLQUFLLFFBQVFWLEtBQUt1QixlQUFlLENBQUNKLGNBQWNuQixLQUFLd0IsWUFBWSxDQUFDTDtRQUN0RyxJQUFJLENBQUNNLGVBQWUsQ0FBQ2xCLFVBQVUsTUFBTSxNQUFNO1lBQ3pDZTtZQUNBRjtZQUNBWDtZQUNBSztRQUNGO0lBQ0Y7SUFFQVksUUFBU0MsR0FBRyxFQUFFO1FBQ1osTUFBTSxFQUFFcEIsUUFBUSxFQUFFRSxNQUFNLEVBQUUsR0FBRyxJQUFJO1FBRWpDUCxhQUFhLElBQUk7UUFFakIsSUFBSUssVUFBVTtZQUNaLElBQUksQ0FBQ0EsUUFBUSxHQUFHO1lBQ2hCcUIsZUFBZTtnQkFDYixJQUFJLENBQUNILGVBQWUsQ0FBQ2xCLFVBQVUsTUFBTW9CLEtBQUs7b0JBQUVsQjtnQkFBTztZQUNyRDtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVNvQixRQUFTdkIsSUFBSSxFQUFFQyxRQUFRO0lBQzlCLElBQUlBLGFBQWF1QixXQUFXO1FBQzFCLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztZQUMzQkosUUFBUUssSUFBSSxDQUFDLElBQUksRUFBRTVCLE1BQU0sQ0FBQ3FCLEtBQUtRO2dCQUM3QixPQUFPUixNQUFNTSxPQUFPTixPQUFPSyxRQUFRRztZQUNyQztRQUNGO0lBQ0Y7SUFFQSxJQUFJO1FBQ0YsTUFBTUMsaUJBQWlCLElBQUloQyxlQUFlRSxNQUFNQztRQUNoRCxJQUFJLENBQUM4QixRQUFRLENBQUM7WUFDWixHQUFHL0IsSUFBSTtZQUNQZ0MsUUFBUWhDLEtBQUtnQyxNQUFNLElBQUk7WUFDdkJULFNBQVN2QixLQUFLaUMsUUFBUSxJQUFJO1FBQzVCLEdBQUdIO0lBQ0wsRUFBRSxPQUFPVCxLQUFLO1FBQ1osSUFBSSxPQUFPcEIsYUFBYSxZQUFZO1lBQ2xDLE1BQU1vQjtRQUNSO1FBQ0EsTUFBTWxCLFNBQVNILFFBQVFBLEtBQUtHLE1BQU07UUFDbENtQixlQUFlLElBQU1yQixTQUFTb0IsS0FBSztnQkFBRWxCO1lBQU87SUFDOUM7QUFDRjtBQUVBK0IsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2FwaS9hcGktdXBncmFkZS5qcz80NDA2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IEludmFsaWRBcmd1bWVudEVycm9yLCBSZXF1ZXN0QWJvcnRlZEVycm9yLCBTb2NrZXRFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuY29uc3QgeyBBc3luY1Jlc291cmNlIH0gPSByZXF1aXJlKCdhc3luY19ob29rcycpXG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi4vY29yZS91dGlsJylcbmNvbnN0IHsgYWRkU2lnbmFsLCByZW1vdmVTaWduYWwgfSA9IHJlcXVpcmUoJy4vYWJvcnQtc2lnbmFsJylcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG5cbmNsYXNzIFVwZ3JhZGVIYW5kbGVyIGV4dGVuZHMgQXN5bmNSZXNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yIChvcHRzLCBjYWxsYmFjaykge1xuICAgIGlmICghb3B0cyB8fCB0eXBlb2Ygb3B0cyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignaW52YWxpZCBvcHRzJylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2ludmFsaWQgY2FsbGJhY2snKVxuICAgIH1cblxuICAgIGNvbnN0IHsgc2lnbmFsLCBvcGFxdWUsIHJlc3BvbnNlSGVhZGVycyB9ID0gb3B0c1xuXG4gICAgaWYgKHNpZ25hbCAmJiB0eXBlb2Ygc2lnbmFsLm9uICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdzaWduYWwgbXVzdCBiZSBhbiBFdmVudEVtaXR0ZXIgb3IgRXZlbnRUYXJnZXQnKVxuICAgIH1cblxuICAgIHN1cGVyKCdVTkRJQ0lfVVBHUkFERScpXG5cbiAgICB0aGlzLnJlc3BvbnNlSGVhZGVycyA9IHJlc3BvbnNlSGVhZGVycyB8fCBudWxsXG4gICAgdGhpcy5vcGFxdWUgPSBvcGFxdWUgfHwgbnVsbFxuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIHRoaXMuYWJvcnQgPSBudWxsXG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbFxuXG4gICAgYWRkU2lnbmFsKHRoaXMsIHNpZ25hbClcbiAgfVxuXG4gIG9uQ29ubmVjdCAoYWJvcnQsIGNvbnRleHQpIHtcbiAgICBpZiAoIXRoaXMuY2FsbGJhY2spIHtcbiAgICAgIHRocm93IG5ldyBSZXF1ZXN0QWJvcnRlZEVycm9yKClcbiAgICB9XG5cbiAgICB0aGlzLmFib3J0ID0gYWJvcnRcbiAgICB0aGlzLmNvbnRleHQgPSBudWxsXG4gIH1cblxuICBvbkhlYWRlcnMgKCkge1xuICAgIHRocm93IG5ldyBTb2NrZXRFcnJvcignYmFkIHVwZ3JhZGUnLCBudWxsKVxuICB9XG5cbiAgb25VcGdyYWRlIChzdGF0dXNDb2RlLCByYXdIZWFkZXJzLCBzb2NrZXQpIHtcbiAgICBjb25zdCB7IGNhbGxiYWNrLCBvcGFxdWUsIGNvbnRleHQgfSA9IHRoaXNcblxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChzdGF0dXNDb2RlLCAxMDEpXG5cbiAgICByZW1vdmVTaWduYWwodGhpcylcblxuICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsXG4gICAgY29uc3QgaGVhZGVycyA9IHRoaXMucmVzcG9uc2VIZWFkZXJzID09PSAncmF3JyA/IHV0aWwucGFyc2VSYXdIZWFkZXJzKHJhd0hlYWRlcnMpIDogdXRpbC5wYXJzZUhlYWRlcnMocmF3SGVhZGVycylcbiAgICB0aGlzLnJ1bkluQXN5bmNTY29wZShjYWxsYmFjaywgbnVsbCwgbnVsbCwge1xuICAgICAgaGVhZGVycyxcbiAgICAgIHNvY2tldCxcbiAgICAgIG9wYXF1ZSxcbiAgICAgIGNvbnRleHRcbiAgICB9KVxuICB9XG5cbiAgb25FcnJvciAoZXJyKSB7XG4gICAgY29uc3QgeyBjYWxsYmFjaywgb3BhcXVlIH0gPSB0aGlzXG5cbiAgICByZW1vdmVTaWduYWwodGhpcylcblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5jYWxsYmFjayA9IG51bGxcbiAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5ydW5JbkFzeW5jU2NvcGUoY2FsbGJhY2ssIG51bGwsIGVyciwgeyBvcGFxdWUgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZ3JhZGUgKG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHVwZ3JhZGUuY2FsbCh0aGlzLCBvcHRzLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoZGF0YSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgdXBncmFkZUhhbmRsZXIgPSBuZXcgVXBncmFkZUhhbmRsZXIob3B0cywgY2FsbGJhY2spXG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAuLi5vcHRzLFxuICAgICAgbWV0aG9kOiBvcHRzLm1ldGhvZCB8fCAnR0VUJyxcbiAgICAgIHVwZ3JhZGU6IG9wdHMucHJvdG9jb2wgfHwgJ1dlYnNvY2tldCdcbiAgICB9LCB1cGdyYWRlSGFuZGxlcilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuICAgIGNvbnN0IG9wYXF1ZSA9IG9wdHMgJiYgb3B0cy5vcGFxdWVcbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiBjYWxsYmFjayhlcnIsIHsgb3BhcXVlIH0pKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXBncmFkZVxuIl0sIm5hbWVzIjpbIkludmFsaWRBcmd1bWVudEVycm9yIiwiUmVxdWVzdEFib3J0ZWRFcnJvciIsIlNvY2tldEVycm9yIiwicmVxdWlyZSIsIkFzeW5jUmVzb3VyY2UiLCJ1dGlsIiwiYWRkU2lnbmFsIiwicmVtb3ZlU2lnbmFsIiwiYXNzZXJ0IiwiVXBncmFkZUhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJjYWxsYmFjayIsInNpZ25hbCIsIm9wYXF1ZSIsInJlc3BvbnNlSGVhZGVycyIsIm9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFib3J0IiwiY29udGV4dCIsIm9uQ29ubmVjdCIsIm9uSGVhZGVycyIsIm9uVXBncmFkZSIsInN0YXR1c0NvZGUiLCJyYXdIZWFkZXJzIiwic29ja2V0Iiwic3RyaWN0RXF1YWwiLCJoZWFkZXJzIiwicGFyc2VSYXdIZWFkZXJzIiwicGFyc2VIZWFkZXJzIiwicnVuSW5Bc3luY1Njb3BlIiwib25FcnJvciIsImVyciIsInF1ZXVlTWljcm90YXNrIiwidXBncmFkZSIsInVuZGVmaW5lZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FsbCIsImRhdGEiLCJ1cGdyYWRlSGFuZGxlciIsImRpc3BhdGNoIiwibWV0aG9kIiwicHJvdG9jb2wiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/api-upgrade.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/index.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/api/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports.request = __webpack_require__(/*! ./api-request */ \"(ssr)/./node_modules/undici/lib/api/api-request.js\");\nmodule.exports.stream = __webpack_require__(/*! ./api-stream */ \"(ssr)/./node_modules/undici/lib/api/api-stream.js\");\nmodule.exports.pipeline = __webpack_require__(/*! ./api-pipeline */ \"(ssr)/./node_modules/undici/lib/api/api-pipeline.js\");\nmodule.exports.upgrade = __webpack_require__(/*! ./api-upgrade */ \"(ssr)/./node_modules/undici/lib/api/api-upgrade.js\");\nmodule.exports.connect = __webpack_require__(/*! ./api-connect */ \"(ssr)/./node_modules/undici/lib/api/api-connect.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsdUhBQWlDO0FBQ2pDQSxvSEFBZ0M7QUFDaENBLDBIQUFrQztBQUNsQ0EsdUhBQWlDO0FBQ2pDQSx1SEFBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvaW5kZXguanM/OWVlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMucmVxdWVzdCA9IHJlcXVpcmUoJy4vYXBpLXJlcXVlc3QnKVxubW9kdWxlLmV4cG9ydHMuc3RyZWFtID0gcmVxdWlyZSgnLi9hcGktc3RyZWFtJylcbm1vZHVsZS5leHBvcnRzLnBpcGVsaW5lID0gcmVxdWlyZSgnLi9hcGktcGlwZWxpbmUnKVxubW9kdWxlLmV4cG9ydHMudXBncmFkZSA9IHJlcXVpcmUoJy4vYXBpLXVwZ3JhZGUnKVxubW9kdWxlLmV4cG9ydHMuY29ubmVjdCA9IHJlcXVpcmUoJy4vYXBpLWNvbm5lY3QnKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1ZXN0IiwicmVxdWlyZSIsInN0cmVhbSIsInBpcGVsaW5lIiwidXBncmFkZSIsImNvbm5lY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/readable.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/api/readable.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Ported from https://github.com/nodejs/undici/pull/907\n\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst { RequestAbortedError, NotSupportedError, InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { ReadableStreamFrom, toUSVString } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nlet Blob;\nconst kConsume = Symbol(\"kConsume\");\nconst kReading = Symbol(\"kReading\");\nconst kBody = Symbol(\"kBody\");\nconst kAbort = Symbol(\"abort\");\nconst kContentType = Symbol(\"kContentType\");\nmodule.exports = class BodyReadable extends Readable {\n    constructor({ resume, abort, contentType = \"\", highWaterMark = 64 * 1024 // Same as nodejs fs streams.\n     }){\n        super({\n            autoDestroy: true,\n            read: resume,\n            highWaterMark\n        });\n        this._readableState.dataEmitted = false;\n        this[kAbort] = abort;\n        this[kConsume] = null;\n        this[kBody] = null;\n        this[kContentType] = contentType;\n        // Is stream being consumed through Readable API?\n        // This is an optimization so that we avoid checking\n        // for 'data' and 'readable' listeners in the hot path\n        // inside push().\n        this[kReading] = false;\n    }\n    destroy(err) {\n        if (this.destroyed) {\n            // Node < 16\n            return this;\n        }\n        if (!err && !this._readableState.endEmitted) {\n            err = new RequestAbortedError();\n        }\n        if (err) {\n            this[kAbort]();\n        }\n        return super.destroy(err);\n    }\n    emit(ev, ...args) {\n        if (ev === \"data\") {\n            // Node < 16.7\n            this._readableState.dataEmitted = true;\n        } else if (ev === \"error\") {\n            // Node < 16\n            this._readableState.errorEmitted = true;\n        }\n        return super.emit(ev, ...args);\n    }\n    on(ev, ...args) {\n        if (ev === \"data\" || ev === \"readable\") {\n            this[kReading] = true;\n        }\n        return super.on(ev, ...args);\n    }\n    addListener(ev, ...args) {\n        return this.on(ev, ...args);\n    }\n    off(ev, ...args) {\n        const ret = super.off(ev, ...args);\n        if (ev === \"data\" || ev === \"readable\") {\n            this[kReading] = this.listenerCount(\"data\") > 0 || this.listenerCount(\"readable\") > 0;\n        }\n        return ret;\n    }\n    removeListener(ev, ...args) {\n        return this.off(ev, ...args);\n    }\n    push(chunk) {\n        if (this[kConsume] && chunk !== null && this.readableLength === 0) {\n            consumePush(this[kConsume], chunk);\n            return this[kReading] ? super.push(chunk) : true;\n        }\n        return super.push(chunk);\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-text\n    async text() {\n        return consume(this, \"text\");\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-json\n    async json() {\n        return consume(this, \"json\");\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-blob\n    async blob() {\n        return consume(this, \"blob\");\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-arraybuffer\n    async arrayBuffer() {\n        return consume(this, \"arrayBuffer\");\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-formdata\n    async formData() {\n        // TODO: Implement.\n        throw new NotSupportedError();\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-bodyused\n    get bodyUsed() {\n        return util.isDisturbed(this);\n    }\n    // https://fetch.spec.whatwg.org/#dom-body-body\n    get body() {\n        if (!this[kBody]) {\n            this[kBody] = ReadableStreamFrom(this);\n            if (this[kConsume]) {\n                // TODO: Is this the best way to force a lock?\n                this[kBody].getReader() // Ensure stream is locked.\n                ;\n                assert(this[kBody].locked);\n            }\n        }\n        return this[kBody];\n    }\n    async dump(opts) {\n        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;\n        const signal = opts && opts.signal;\n        const abortFn = ()=>{\n            this.destroy();\n        };\n        let signalListenerCleanup;\n        if (signal) {\n            if (typeof signal !== \"object\" || !(\"aborted\" in signal)) {\n                throw new InvalidArgumentError(\"signal must be an AbortSignal\");\n            }\n            util.throwIfAborted(signal);\n            signalListenerCleanup = util.addAbortListener(signal, abortFn);\n        }\n        try {\n            for await (const chunk of this){\n                util.throwIfAborted(signal);\n                limit -= Buffer.byteLength(chunk);\n                if (limit < 0) {\n                    return;\n                }\n            }\n        } catch  {\n            util.throwIfAborted(signal);\n        } finally{\n            if (typeof signalListenerCleanup === \"function\") {\n                signalListenerCleanup();\n            } else if (signalListenerCleanup) {\n                signalListenerCleanup[Symbol.dispose]();\n            }\n        }\n    }\n};\n// https://streams.spec.whatwg.org/#readablestream-locked\nfunction isLocked(self) {\n    // Consume is an implicit lock.\n    return self[kBody] && self[kBody].locked === true || self[kConsume];\n}\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction isUnusable(self) {\n    return util.isDisturbed(self) || isLocked(self);\n}\nasync function consume(stream, type) {\n    if (isUnusable(stream)) {\n        throw new TypeError(\"unusable\");\n    }\n    assert(!stream[kConsume]);\n    return new Promise((resolve, reject)=>{\n        stream[kConsume] = {\n            type,\n            stream,\n            resolve,\n            reject,\n            length: 0,\n            body: []\n        };\n        stream.on(\"error\", function(err) {\n            consumeFinish(this[kConsume], err);\n        }).on(\"close\", function() {\n            if (this[kConsume].body !== null) {\n                consumeFinish(this[kConsume], new RequestAbortedError());\n            }\n        });\n        process.nextTick(consumeStart, stream[kConsume]);\n    });\n}\nfunction consumeStart(consume) {\n    if (consume.body === null) {\n        return;\n    }\n    const { _readableState: state } = consume.stream;\n    for (const chunk of state.buffer){\n        consumePush(consume, chunk);\n    }\n    if (state.endEmitted) {\n        consumeEnd(this[kConsume]);\n    } else {\n        consume.stream.on(\"end\", function() {\n            consumeEnd(this[kConsume]);\n        });\n    }\n    consume.stream.resume();\n    while(consume.stream.read() != null){\n    // Loop\n    }\n}\nfunction consumeEnd(consume) {\n    const { type, body, resolve, stream, length } = consume;\n    try {\n        if (type === \"text\") {\n            resolve(toUSVString(Buffer.concat(body)));\n        } else if (type === \"json\") {\n            resolve(JSON.parse(Buffer.concat(body)));\n        } else if (type === \"arrayBuffer\") {\n            const dst = new Uint8Array(length);\n            let pos = 0;\n            for (const buf of body){\n                dst.set(buf, pos);\n                pos += buf.byteLength;\n            }\n            resolve(dst.buffer);\n        } else if (type === \"blob\") {\n            if (!Blob) {\n                Blob = (__webpack_require__(/*! buffer */ \"buffer\").Blob);\n            }\n            resolve(new Blob(body, {\n                type: stream[kContentType]\n            }));\n        }\n        consumeFinish(consume);\n    } catch (err) {\n        stream.destroy(err);\n    }\n}\nfunction consumePush(consume, chunk) {\n    consume.length += chunk.length;\n    consume.body.push(chunk);\n}\nfunction consumeFinish(consume, err) {\n    if (consume.body === null) {\n        return;\n    }\n    if (err) {\n        consume.reject(err);\n    } else {\n        consume.resolve();\n    }\n    consume.type = null;\n    consume.stream = null;\n    consume.resolve = null;\n    consume.reject = null;\n    consume.length = 0;\n    consume.body = null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/api/util.js":
/*!*********************************************!*\
  !*** ./node_modules/undici/lib/api/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const assert = __webpack_require__(/*! assert */ \"assert\");\nconst { ResponseStatusCodeError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { toUSVString } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nasync function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {\n    assert(body);\n    let chunks = [];\n    let limit = 0;\n    for await (const chunk of body){\n        chunks.push(chunk);\n        limit += chunk.length;\n        if (limit > 128 * 1024) {\n            chunks = null;\n            break;\n        }\n    }\n    if (statusCode === 204 || !contentType || !chunks) {\n        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : \"\"}`, statusCode, headers));\n        return;\n    }\n    try {\n        if (contentType.startsWith(\"application/json\")) {\n            const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));\n            process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : \"\"}`, statusCode, headers, payload));\n            return;\n        }\n        if (contentType.startsWith(\"text/\")) {\n            const payload = toUSVString(Buffer.concat(chunks));\n            process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : \"\"}`, statusCode, headers, payload));\n            return;\n        }\n    } catch (err) {\n    // Process in a fallback if error\n    }\n    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : \"\"}`, statusCode, headers));\n}\nmodule.exports = {\n    getResolveErrorBodyCallback\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9hcGkvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNLEVBQ0pDLHVCQUF1QixFQUN4QixHQUFHRCxtQkFBT0EsQ0FBQztBQUNaLE1BQU0sRUFBRUUsV0FBVyxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBRWhDLGVBQWVHLDRCQUE2QixFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsT0FBTyxFQUFFO0lBQzdHVixPQUFPTTtJQUVQLElBQUlLLFNBQVMsRUFBRTtJQUNmLElBQUlDLFFBQVE7SUFFWixXQUFXLE1BQU1DLFNBQVNQLEtBQU07UUFDOUJLLE9BQU9HLElBQUksQ0FBQ0Q7UUFDWkQsU0FBU0MsTUFBTUUsTUFBTTtRQUNyQixJQUFJSCxRQUFRLE1BQU0sTUFBTTtZQUN0QkQsU0FBUztZQUNUO1FBQ0Y7SUFDRjtJQUVBLElBQUlILGVBQWUsT0FBTyxDQUFDRCxlQUFlLENBQUNJLFFBQVE7UUFDakRLLFFBQVFDLFFBQVEsQ0FBQ1osVUFBVSxJQUFJSCx3QkFBd0IsQ0FBQyxxQkFBcUIsRUFBRU0sV0FBVyxFQUFFQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUVBLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFRCxZQUFZRTtRQUNySjtJQUNGO0lBRUEsSUFBSTtRQUNGLElBQUlILFlBQVlXLFVBQVUsQ0FBQyxxQkFBcUI7WUFDOUMsTUFBTUMsVUFBVUMsS0FBS0MsS0FBSyxDQUFDbEIsWUFBWW1CLE9BQU9DLE1BQU0sQ0FBQ1o7WUFDckRLLFFBQVFDLFFBQVEsQ0FBQ1osVUFBVSxJQUFJSCx3QkFBd0IsQ0FBQyxxQkFBcUIsRUFBRU0sV0FBVyxFQUFFQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUVBLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFRCxZQUFZRSxTQUFTUztZQUM5SjtRQUNGO1FBRUEsSUFBSVosWUFBWVcsVUFBVSxDQUFDLFVBQVU7WUFDbkMsTUFBTUMsVUFBVWhCLFlBQVltQixPQUFPQyxNQUFNLENBQUNaO1lBQzFDSyxRQUFRQyxRQUFRLENBQUNaLFVBQVUsSUFBSUgsd0JBQXdCLENBQUMscUJBQXFCLEVBQUVNLFdBQVcsRUFBRUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFQSxjQUFjLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRUQsWUFBWUUsU0FBU1M7WUFDOUo7UUFDRjtJQUNGLEVBQUUsT0FBT0ssS0FBSztJQUNaLGlDQUFpQztJQUNuQztJQUVBUixRQUFRQyxRQUFRLENBQUNaLFVBQVUsSUFBSUgsd0JBQXdCLENBQUMscUJBQXFCLEVBQUVNLFdBQVcsRUFBRUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFQSxjQUFjLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRUQsWUFBWUU7QUFDdko7QUFFQWUsT0FBT0MsT0FBTyxHQUFHO0lBQUV0QjtBQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2FwaS91dGlsLmpzPzQyN2MiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbmNvbnN0IHtcbiAgUmVzcG9uc2VTdGF0dXNDb2RlRXJyb3Jcbn0gPSByZXF1aXJlKCcuLi9jb3JlL2Vycm9ycycpXG5jb25zdCB7IHRvVVNWU3RyaW5nIH0gPSByZXF1aXJlKCcuLi9jb3JlL3V0aWwnKVxuXG5hc3luYyBmdW5jdGlvbiBnZXRSZXNvbHZlRXJyb3JCb2R5Q2FsbGJhY2sgKHsgY2FsbGJhY2ssIGJvZHksIGNvbnRlbnRUeXBlLCBzdGF0dXNDb2RlLCBzdGF0dXNNZXNzYWdlLCBoZWFkZXJzIH0pIHtcbiAgYXNzZXJ0KGJvZHkpXG5cbiAgbGV0IGNodW5rcyA9IFtdXG4gIGxldCBsaW1pdCA9IDBcblxuICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGJvZHkpIHtcbiAgICBjaHVua3MucHVzaChjaHVuaylcbiAgICBsaW1pdCArPSBjaHVuay5sZW5ndGhcbiAgICBpZiAobGltaXQgPiAxMjggKiAxMDI0KSB7XG4gICAgICBjaHVua3MgPSBudWxsXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0dXNDb2RlID09PSAyMDQgfHwgIWNvbnRlbnRUeXBlIHx8ICFjaHVua3MpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgUmVzcG9uc2VTdGF0dXNDb2RlRXJyb3IoYFJlc3BvbnNlIHN0YXR1cyBjb2RlICR7c3RhdHVzQ29kZX0ke3N0YXR1c01lc3NhZ2UgPyBgOiAke3N0YXR1c01lc3NhZ2V9YCA6ICcnfWAsIHN0YXR1c0NvZGUsIGhlYWRlcnMpKVxuICAgIHJldHVyblxuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoY29udGVudFR5cGUuc3RhcnRzV2l0aCgnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5wYXJzZSh0b1VTVlN0cmluZyhCdWZmZXIuY29uY2F0KGNodW5rcykpKVxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaywgbmV3IFJlc3BvbnNlU3RhdHVzQ29kZUVycm9yKGBSZXNwb25zZSBzdGF0dXMgY29kZSAke3N0YXR1c0NvZGV9JHtzdGF0dXNNZXNzYWdlID8gYDogJHtzdGF0dXNNZXNzYWdlfWAgOiAnJ31gLCBzdGF0dXNDb2RlLCBoZWFkZXJzLCBwYXlsb2FkKSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChjb250ZW50VHlwZS5zdGFydHNXaXRoKCd0ZXh0LycpKSB7XG4gICAgICBjb25zdCBwYXlsb2FkID0gdG9VU1ZTdHJpbmcoQnVmZmVyLmNvbmNhdChjaHVua3MpKVxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaywgbmV3IFJlc3BvbnNlU3RhdHVzQ29kZUVycm9yKGBSZXNwb25zZSBzdGF0dXMgY29kZSAke3N0YXR1c0NvZGV9JHtzdGF0dXNNZXNzYWdlID8gYDogJHtzdGF0dXNNZXNzYWdlfWAgOiAnJ31gLCBzdGF0dXNDb2RlLCBoZWFkZXJzLCBwYXlsb2FkKSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gUHJvY2VzcyBpbiBhIGZhbGxiYWNrIGlmIGVycm9yXG4gIH1cblxuICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgUmVzcG9uc2VTdGF0dXNDb2RlRXJyb3IoYFJlc3BvbnNlIHN0YXR1cyBjb2RlICR7c3RhdHVzQ29kZX0ke3N0YXR1c01lc3NhZ2UgPyBgOiAke3N0YXR1c01lc3NhZ2V9YCA6ICcnfWAsIHN0YXR1c0NvZGUsIGhlYWRlcnMpKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZ2V0UmVzb2x2ZUVycm9yQm9keUNhbGxiYWNrIH1cbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiUmVzcG9uc2VTdGF0dXNDb2RlRXJyb3IiLCJ0b1VTVlN0cmluZyIsImdldFJlc29sdmVFcnJvckJvZHlDYWxsYmFjayIsImNhbGxiYWNrIiwiYm9keSIsImNvbnRlbnRUeXBlIiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJoZWFkZXJzIiwiY2h1bmtzIiwibGltaXQiLCJjaHVuayIsInB1c2giLCJsZW5ndGgiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJzdGFydHNXaXRoIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsIkJ1ZmZlciIsImNvbmNhdCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/api/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/balanced-pool.js":
/*!**************************************************!*\
  !*** ./node_modules/undici/lib/balanced-pool.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { BalancedPoolMissingUpstreamError, InvalidArgumentError } = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { PoolBase, kClients, kNeedDrain, kAddClient, kRemoveClient, kGetDispatcher } = __webpack_require__(/*! ./pool-base */ \"(ssr)/./node_modules/undici/lib/pool-base.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/pool.js\");\nconst { kUrl, kInterceptors } = __webpack_require__(/*! ./core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { parseOrigin } = __webpack_require__(/*! ./core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst kFactory = Symbol(\"factory\");\nconst kOptions = Symbol(\"options\");\nconst kGreatestCommonDivisor = Symbol(\"kGreatestCommonDivisor\");\nconst kCurrentWeight = Symbol(\"kCurrentWeight\");\nconst kIndex = Symbol(\"kIndex\");\nconst kWeight = Symbol(\"kWeight\");\nconst kMaxWeightPerServer = Symbol(\"kMaxWeightPerServer\");\nconst kErrorPenalty = Symbol(\"kErrorPenalty\");\nfunction getGreatestCommonDivisor(a, b) {\n    if (b === 0) return a;\n    return getGreatestCommonDivisor(b, a % b);\n}\nfunction defaultFactory(origin, opts) {\n    return new Pool(origin, opts);\n}\nclass BalancedPool extends PoolBase {\n    constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}){\n        super();\n        this[kOptions] = opts;\n        this[kIndex] = -1;\n        this[kCurrentWeight] = 0;\n        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;\n        this[kErrorPenalty] = this[kOptions].errorPenalty || 15;\n        if (!Array.isArray(upstreams)) {\n            upstreams = [\n                upstreams\n            ];\n        }\n        if (typeof factory !== \"function\") {\n            throw new InvalidArgumentError(\"factory must be a function.\");\n        }\n        this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];\n        this[kFactory] = factory;\n        for (const upstream of upstreams){\n            this.addUpstream(upstream);\n        }\n        this._updateBalancedPoolStats();\n    }\n    addUpstream(upstream) {\n        const upstreamOrigin = parseOrigin(upstream).origin;\n        if (this[kClients].find((pool)=>pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) {\n            return this;\n        }\n        const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));\n        this[kAddClient](pool);\n        pool.on(\"connect\", ()=>{\n            pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);\n        });\n        pool.on(\"connectionError\", ()=>{\n            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);\n            this._updateBalancedPoolStats();\n        });\n        pool.on(\"disconnect\", (...args)=>{\n            const err = args[2];\n            if (err && err.code === \"UND_ERR_SOCKET\") {\n                // decrease the weight of the pool.\n                pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);\n                this._updateBalancedPoolStats();\n            }\n        });\n        for (const client of this[kClients]){\n            client[kWeight] = this[kMaxWeightPerServer];\n        }\n        this._updateBalancedPoolStats();\n        return this;\n    }\n    _updateBalancedPoolStats() {\n        this[kGreatestCommonDivisor] = this[kClients].map((p)=>p[kWeight]).reduce(getGreatestCommonDivisor, 0);\n    }\n    removeUpstream(upstream) {\n        const upstreamOrigin = parseOrigin(upstream).origin;\n        const pool = this[kClients].find((pool)=>pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true);\n        if (pool) {\n            this[kRemoveClient](pool);\n        }\n        return this;\n    }\n    get upstreams() {\n        return this[kClients].filter((dispatcher)=>dispatcher.closed !== true && dispatcher.destroyed !== true).map((p)=>p[kUrl].origin);\n    }\n    [kGetDispatcher]() {\n        // We validate that pools is greater than 0,\n        // otherwise we would have to wait until an upstream\n        // is added, which might never happen.\n        if (this[kClients].length === 0) {\n            throw new BalancedPoolMissingUpstreamError();\n        }\n        const dispatcher = this[kClients].find((dispatcher)=>!dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n        if (!dispatcher) {\n            return;\n        }\n        const allClientsBusy = this[kClients].map((pool)=>pool[kNeedDrain]).reduce((a, b)=>a && b, true);\n        if (allClientsBusy) {\n            return;\n        }\n        let counter = 0;\n        let maxWeightIndex = this[kClients].findIndex((pool)=>!pool[kNeedDrain]);\n        while(counter++ < this[kClients].length){\n            this[kIndex] = (this[kIndex] + 1) % this[kClients].length;\n            const pool = this[kClients][this[kIndex]];\n            // find pool index with the largest weight\n            if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n                maxWeightIndex = this[kIndex];\n            }\n            // decrease the current weight every `this[kClients].length`.\n            if (this[kIndex] === 0) {\n                // Set the current weight to the next lower weight.\n                this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];\n                if (this[kCurrentWeight] <= 0) {\n                    this[kCurrentWeight] = this[kMaxWeightPerServer];\n                }\n            }\n            if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {\n                return pool;\n            }\n        }\n        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];\n        this[kIndex] = maxWeightIndex;\n        return this[kClients][maxWeightIndex];\n    }\n}\nmodule.exports = BalancedPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/balanced-pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/cache/cache.js":
/*!************************************************!*\
  !*** ./node_modules/undici/lib/cache/cache.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { kConstruct } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/cache/symbols.js\");\nconst { urlEquals, fieldValues: getFieldValues } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/cache/util.js\");\nconst { kEnumerableProperty, isDisturbed } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { kHeadersList } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { Response, cloneResponse } = __webpack_require__(/*! ../fetch/response */ \"(ssr)/./node_modules/undici/lib/fetch/response.js\");\nconst { Request } = __webpack_require__(/*! ../fetch/request */ \"(ssr)/./node_modules/undici/lib/fetch/request.js\");\nconst { kState, kHeaders, kGuard, kRealm } = __webpack_require__(/*! ../fetch/symbols */ \"(ssr)/./node_modules/undici/lib/fetch/symbols.js\");\nconst { fetching } = __webpack_require__(/*! ../fetch/index */ \"(ssr)/./node_modules/undici/lib/fetch/index.js\");\nconst { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { getGlobalDispatcher } = __webpack_require__(/*! ../global */ \"(ssr)/./node_modules/undici/lib/global.js\");\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation\n * @typedef {Object} CacheBatchOperation\n * @property {'delete' | 'put'} type\n * @property {any} request\n * @property {any} response\n * @property {import('../../types/cache').CacheQueryOptions} options\n */ /**\n * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list\n * @typedef {[any, any][]} requestResponseList\n */ class Cache {\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n   * @type {requestResponseList}\n   */ #relevantRequestResponseList;\n    constructor(){\n        if (arguments[0] !== kConstruct) {\n            webidl.illegalConstructor();\n        }\n        this.#relevantRequestResponseList = arguments[1];\n    }\n    async match(request, options = {}) {\n        webidl.brandCheck(this, Cache);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Cache.match\"\n        });\n        request = webidl.converters.RequestInfo(request);\n        options = webidl.converters.CacheQueryOptions(options);\n        const p = await this.matchAll(request, options);\n        if (p.length === 0) {\n            return;\n        }\n        return p[0];\n    }\n    async matchAll(request = undefined, options = {}) {\n        webidl.brandCheck(this, Cache);\n        if (request !== undefined) request = webidl.converters.RequestInfo(request);\n        options = webidl.converters.CacheQueryOptions(options);\n        // 1.\n        let r = null;\n        // 2.\n        if (request !== undefined) {\n            if (request instanceof Request) {\n                // 2.1.1\n                r = request[kState];\n                // 2.1.2\n                if (r.method !== \"GET\" && !options.ignoreMethod) {\n                    return [];\n                }\n            } else if (typeof request === \"string\") {\n                // 2.2.1\n                r = new Request(request)[kState];\n            }\n        }\n        // 5.\n        // 5.1\n        const responses = [];\n        // 5.2\n        if (request === undefined) {\n            // 5.2.1\n            for (const requestResponse of this.#relevantRequestResponseList){\n                responses.push(requestResponse[1]);\n            }\n        } else {\n            // 5.3.1\n            const requestResponses = this.#queryCache(r, options);\n            // 5.3.2\n            for (const requestResponse of requestResponses){\n                responses.push(requestResponse[1]);\n            }\n        }\n        // 5.4\n        // We don't implement CORs so we don't need to loop over the responses, yay!\n        // 5.5.1\n        const responseList = [];\n        // 5.5.2\n        for (const response of responses){\n            // 5.5.2.1\n            const responseObject = new Response(response.body?.source ?? null);\n            const body = responseObject[kState].body;\n            responseObject[kState] = response;\n            responseObject[kState].body = body;\n            responseObject[kHeaders][kHeadersList] = response.headersList;\n            responseObject[kHeaders][kGuard] = \"immutable\";\n            responseList.push(responseObject);\n        }\n        // 6.\n        return Object.freeze(responseList);\n    }\n    async add(request) {\n        webidl.brandCheck(this, Cache);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Cache.add\"\n        });\n        request = webidl.converters.RequestInfo(request);\n        // 1.\n        const requests = [\n            request\n        ];\n        // 2.\n        const responseArrayPromise = this.addAll(requests);\n        // 3.\n        return await responseArrayPromise;\n    }\n    async addAll(requests) {\n        webidl.brandCheck(this, Cache);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Cache.addAll\"\n        });\n        requests = webidl.converters[\"sequence<RequestInfo>\"](requests);\n        // 1.\n        const responsePromises = [];\n        // 2.\n        const requestList = [];\n        // 3.\n        for (const request of requests){\n            if (typeof request === \"string\") {\n                continue;\n            }\n            // 3.1\n            const r = request[kState];\n            // 3.2\n            if (!urlIsHttpHttpsScheme(r.url) || r.method !== \"GET\") {\n                throw webidl.errors.exception({\n                    header: \"Cache.addAll\",\n                    message: \"Expected http/s scheme when method is not GET.\"\n                });\n            }\n        }\n        // 4.\n        /** @type {ReturnType<typeof fetching>[]} */ const fetchControllers = [];\n        // 5.\n        for (const request of requests){\n            // 5.1\n            const r = new Request(request)[kState];\n            // 5.2\n            if (!urlIsHttpHttpsScheme(r.url)) {\n                throw webidl.errors.exception({\n                    header: \"Cache.addAll\",\n                    message: \"Expected http/s scheme.\"\n                });\n            }\n            // 5.4\n            r.initiator = \"fetch\";\n            r.destination = \"subresource\";\n            // 5.5\n            requestList.push(r);\n            // 5.6\n            const responsePromise = createDeferredPromise();\n            // 5.7\n            fetchControllers.push(fetching({\n                request: r,\n                dispatcher: getGlobalDispatcher(),\n                processResponse (response) {\n                    // 1.\n                    if (response.type === \"error\" || response.status === 206 || response.status < 200 || response.status > 299) {\n                        responsePromise.reject(webidl.errors.exception({\n                            header: \"Cache.addAll\",\n                            message: \"Received an invalid status code or the request failed.\"\n                        }));\n                    } else if (response.headersList.contains(\"vary\")) {\n                        // 2.1\n                        const fieldValues = getFieldValues(response.headersList.get(\"vary\"));\n                        // 2.2\n                        for (const fieldValue of fieldValues){\n                            // 2.2.1\n                            if (fieldValue === \"*\") {\n                                responsePromise.reject(webidl.errors.exception({\n                                    header: \"Cache.addAll\",\n                                    message: \"invalid vary field value\"\n                                }));\n                                for (const controller of fetchControllers){\n                                    controller.abort();\n                                }\n                                return;\n                            }\n                        }\n                    }\n                },\n                processResponseEndOfBody (response) {\n                    // 1.\n                    if (response.aborted) {\n                        responsePromise.reject(new DOMException(\"aborted\", \"AbortError\"));\n                        return;\n                    }\n                    // 2.\n                    responsePromise.resolve(response);\n                }\n            }));\n            // 5.8\n            responsePromises.push(responsePromise.promise);\n        }\n        // 6.\n        const p = Promise.all(responsePromises);\n        // 7.\n        const responses = await p;\n        // 7.1\n        const operations = [];\n        // 7.2\n        let index = 0;\n        // 7.3\n        for (const response of responses){\n            // 7.3.1\n            /** @type {CacheBatchOperation} */ const operation = {\n                type: \"put\",\n                request: requestList[index],\n                response\n            };\n            operations.push(operation) // 7.3.5\n            ;\n            index++ // 7.3.6\n            ;\n        }\n        // 7.5\n        const cacheJobPromise = createDeferredPromise();\n        // 7.6.1\n        let errorData = null;\n        // 7.6.2\n        try {\n            this.#batchCacheOperations(operations);\n        } catch (e) {\n            errorData = e;\n        }\n        // 7.6.3\n        queueMicrotask(()=>{\n            // 7.6.3.1\n            if (errorData === null) {\n                cacheJobPromise.resolve(undefined);\n            } else {\n                // 7.6.3.2\n                cacheJobPromise.reject(errorData);\n            }\n        });\n        // 7.7\n        return cacheJobPromise.promise;\n    }\n    async put(request, response) {\n        webidl.brandCheck(this, Cache);\n        webidl.argumentLengthCheck(arguments, 2, {\n            header: \"Cache.put\"\n        });\n        request = webidl.converters.RequestInfo(request);\n        response = webidl.converters.Response(response);\n        // 1.\n        let innerRequest = null;\n        // 2.\n        if (request instanceof Request) {\n            innerRequest = request[kState];\n        } else {\n            innerRequest = new Request(request)[kState];\n        }\n        // 4.\n        if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== \"GET\") {\n            throw webidl.errors.exception({\n                header: \"Cache.put\",\n                message: \"Expected an http/s scheme when method is not GET\"\n            });\n        }\n        // 5.\n        const innerResponse = response[kState];\n        // 6.\n        if (innerResponse.status === 206) {\n            throw webidl.errors.exception({\n                header: \"Cache.put\",\n                message: \"Got 206 status\"\n            });\n        }\n        // 7.\n        if (innerResponse.headersList.contains(\"vary\")) {\n            // 7.1.\n            const fieldValues = getFieldValues(innerResponse.headersList.get(\"vary\"));\n            // 7.2.\n            for (const fieldValue of fieldValues){\n                // 7.2.1\n                if (fieldValue === \"*\") {\n                    throw webidl.errors.exception({\n                        header: \"Cache.put\",\n                        message: \"Got * vary field value\"\n                    });\n                }\n            }\n        }\n        // 8.\n        if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n            throw webidl.errors.exception({\n                header: \"Cache.put\",\n                message: \"Response body is locked or disturbed\"\n            });\n        }\n        // 9.\n        const clonedResponse = cloneResponse(innerResponse);\n        // 10.\n        const bodyReadPromise = createDeferredPromise();\n        // 11.\n        if (innerResponse.body != null) {\n            // 11.1\n            const stream = innerResponse.body.stream;\n            // 11.2\n            const reader = stream.getReader();\n            // 11.3\n            readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);\n        } else {\n            bodyReadPromise.resolve(undefined);\n        }\n        // 12.\n        /** @type {CacheBatchOperation[]} */ const operations = [];\n        // 13.\n        /** @type {CacheBatchOperation} */ const operation = {\n            type: \"put\",\n            request: innerRequest,\n            response: clonedResponse // 16.\n        };\n        // 17.\n        operations.push(operation);\n        // 19.\n        const bytes = await bodyReadPromise.promise;\n        if (clonedResponse.body != null) {\n            clonedResponse.body.source = bytes;\n        }\n        // 19.1\n        const cacheJobPromise = createDeferredPromise();\n        // 19.2.1\n        let errorData = null;\n        // 19.2.2\n        try {\n            this.#batchCacheOperations(operations);\n        } catch (e) {\n            errorData = e;\n        }\n        // 19.2.3\n        queueMicrotask(()=>{\n            // 19.2.3.1\n            if (errorData === null) {\n                cacheJobPromise.resolve();\n            } else {\n                cacheJobPromise.reject(errorData);\n            }\n        });\n        return cacheJobPromise.promise;\n    }\n    async delete(request, options = {}) {\n        webidl.brandCheck(this, Cache);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Cache.delete\"\n        });\n        request = webidl.converters.RequestInfo(request);\n        options = webidl.converters.CacheQueryOptions(options);\n        /**\n     * @type {Request}\n     */ let r = null;\n        if (request instanceof Request) {\n            r = request[kState];\n            if (r.method !== \"GET\" && !options.ignoreMethod) {\n                return false;\n            }\n        } else {\n            assert(typeof request === \"string\");\n            r = new Request(request)[kState];\n        }\n        /** @type {CacheBatchOperation[]} */ const operations = [];\n        /** @type {CacheBatchOperation} */ const operation = {\n            type: \"delete\",\n            request: r,\n            options\n        };\n        operations.push(operation);\n        const cacheJobPromise = createDeferredPromise();\n        let errorData = null;\n        let requestResponses;\n        try {\n            requestResponses = this.#batchCacheOperations(operations);\n        } catch (e) {\n            errorData = e;\n        }\n        queueMicrotask(()=>{\n            if (errorData === null) {\n                cacheJobPromise.resolve(!!requestResponses?.length);\n            } else {\n                cacheJobPromise.reject(errorData);\n            }\n        });\n        return cacheJobPromise.promise;\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n   * @param {any} request\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @returns {readonly Request[]}\n   */ async keys(request = undefined, options = {}) {\n        webidl.brandCheck(this, Cache);\n        if (request !== undefined) request = webidl.converters.RequestInfo(request);\n        options = webidl.converters.CacheQueryOptions(options);\n        // 1.\n        let r = null;\n        // 2.\n        if (request !== undefined) {\n            // 2.1\n            if (request instanceof Request) {\n                // 2.1.1\n                r = request[kState];\n                // 2.1.2\n                if (r.method !== \"GET\" && !options.ignoreMethod) {\n                    return [];\n                }\n            } else if (typeof request === \"string\") {\n                r = new Request(request)[kState];\n            }\n        }\n        // 4.\n        const promise = createDeferredPromise();\n        // 5.\n        // 5.1\n        const requests = [];\n        // 5.2\n        if (request === undefined) {\n            // 5.2.1\n            for (const requestResponse of this.#relevantRequestResponseList){\n                // 5.2.1.1\n                requests.push(requestResponse[0]);\n            }\n        } else {\n            // 5.3.1\n            const requestResponses = this.#queryCache(r, options);\n            // 5.3.2\n            for (const requestResponse of requestResponses){\n                // 5.3.2.1\n                requests.push(requestResponse[0]);\n            }\n        }\n        // 5.4\n        queueMicrotask(()=>{\n            // 5.4.1\n            const requestList = [];\n            // 5.4.2\n            for (const request of requests){\n                const requestObject = new Request(\"https://a\");\n                requestObject[kState] = request;\n                requestObject[kHeaders][kHeadersList] = request.headersList;\n                requestObject[kHeaders][kGuard] = \"immutable\";\n                requestObject[kRealm] = request.client;\n                // 5.4.2.1\n                requestList.push(requestObject);\n            }\n            // 5.4.3\n            promise.resolve(Object.freeze(requestList));\n        });\n        return promise.promise;\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n   * @param {CacheBatchOperation[]} operations\n   * @returns {requestResponseList}\n   */ #batchCacheOperations(operations) {\n        // 1.\n        const cache = this.#relevantRequestResponseList;\n        // 2.\n        const backupCache = [\n            ...cache\n        ];\n        // 3.\n        const addedItems = [];\n        // 4.1\n        const resultList = [];\n        try {\n            // 4.2\n            for (const operation of operations){\n                // 4.2.1\n                if (operation.type !== \"delete\" && operation.type !== \"put\") {\n                    throw webidl.errors.exception({\n                        header: \"Cache.#batchCacheOperations\",\n                        message: 'operation type does not match \"delete\" or \"put\"'\n                    });\n                }\n                // 4.2.2\n                if (operation.type === \"delete\" && operation.response != null) {\n                    throw webidl.errors.exception({\n                        header: \"Cache.#batchCacheOperations\",\n                        message: \"delete operation should not have an associated response\"\n                    });\n                }\n                // 4.2.3\n                if (this.#queryCache(operation.request, operation.options, addedItems).length) {\n                    throw new DOMException(\"???\", \"InvalidStateError\");\n                }\n                // 4.2.4\n                let requestResponses;\n                // 4.2.5\n                if (operation.type === \"delete\") {\n                    // 4.2.5.1\n                    requestResponses = this.#queryCache(operation.request, operation.options);\n                    // TODO: the spec is wrong, this is needed to pass WPTs\n                    if (requestResponses.length === 0) {\n                        return [];\n                    }\n                    // 4.2.5.2\n                    for (const requestResponse of requestResponses){\n                        const idx = cache.indexOf(requestResponse);\n                        assert(idx !== -1);\n                        // 4.2.5.2.1\n                        cache.splice(idx, 1);\n                    }\n                } else if (operation.type === \"put\") {\n                    // 4.2.6.1\n                    if (operation.response == null) {\n                        throw webidl.errors.exception({\n                            header: \"Cache.#batchCacheOperations\",\n                            message: \"put operation should have an associated response\"\n                        });\n                    }\n                    // 4.2.6.2\n                    const r = operation.request;\n                    // 4.2.6.3\n                    if (!urlIsHttpHttpsScheme(r.url)) {\n                        throw webidl.errors.exception({\n                            header: \"Cache.#batchCacheOperations\",\n                            message: \"expected http or https scheme\"\n                        });\n                    }\n                    // 4.2.6.4\n                    if (r.method !== \"GET\") {\n                        throw webidl.errors.exception({\n                            header: \"Cache.#batchCacheOperations\",\n                            message: \"not get method\"\n                        });\n                    }\n                    // 4.2.6.5\n                    if (operation.options != null) {\n                        throw webidl.errors.exception({\n                            header: \"Cache.#batchCacheOperations\",\n                            message: \"options must not be defined\"\n                        });\n                    }\n                    // 4.2.6.6\n                    requestResponses = this.#queryCache(operation.request);\n                    // 4.2.6.7\n                    for (const requestResponse of requestResponses){\n                        const idx = cache.indexOf(requestResponse);\n                        assert(idx !== -1);\n                        // 4.2.6.7.1\n                        cache.splice(idx, 1);\n                    }\n                    // 4.2.6.8\n                    cache.push([\n                        operation.request,\n                        operation.response\n                    ]);\n                    // 4.2.6.10\n                    addedItems.push([\n                        operation.request,\n                        operation.response\n                    ]);\n                }\n                // 4.2.7\n                resultList.push([\n                    operation.request,\n                    operation.response\n                ]);\n            }\n            // 4.3\n            return resultList;\n        } catch (e) {\n            // 5.1\n            this.#relevantRequestResponseList.length = 0;\n            // 5.2\n            this.#relevantRequestResponseList = backupCache;\n            // 5.3\n            throw e;\n        }\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#query-cache\n   * @param {any} requestQuery\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @param {requestResponseList} targetStorage\n   * @returns {requestResponseList}\n   */ #queryCache(requestQuery, options, targetStorage) {\n        /** @type {requestResponseList} */ const resultList = [];\n        const storage = targetStorage ?? this.#relevantRequestResponseList;\n        for (const requestResponse of storage){\n            const [cachedRequest, cachedResponse] = requestResponse;\n            if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {\n                resultList.push(requestResponse);\n            }\n        }\n        return resultList;\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n   * @param {any} requestQuery\n   * @param {any} request\n   * @param {any | null} response\n   * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n   * @returns {boolean}\n   */ #requestMatchesCachedItem(requestQuery, request, response = null, options) {\n        // if (options?.ignoreMethod === false && request.method === 'GET') {\n        //   return false\n        // }\n        const queryURL = new URL(requestQuery.url);\n        const cachedURL = new URL(request.url);\n        if (options?.ignoreSearch) {\n            cachedURL.search = \"\";\n            queryURL.search = \"\";\n        }\n        if (!urlEquals(queryURL, cachedURL, true)) {\n            return false;\n        }\n        if (response == null || options?.ignoreVary || !response.headersList.contains(\"vary\")) {\n            return true;\n        }\n        const fieldValues = getFieldValues(response.headersList.get(\"vary\"));\n        for (const fieldValue of fieldValues){\n            if (fieldValue === \"*\") {\n                return false;\n            }\n            const requestValue = request.headersList.get(fieldValue);\n            const queryValue = requestQuery.headersList.get(fieldValue);\n            // If one has the header and the other doesn't, or one has\n            // a different value than the other, return false\n            if (requestValue !== queryValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nObject.defineProperties(Cache.prototype, {\n    [Symbol.toStringTag]: {\n        value: \"Cache\",\n        configurable: true\n    },\n    match: kEnumerableProperty,\n    matchAll: kEnumerableProperty,\n    add: kEnumerableProperty,\n    addAll: kEnumerableProperty,\n    put: kEnumerableProperty,\n    delete: kEnumerableProperty,\n    keys: kEnumerableProperty\n});\nconst cacheQueryOptionConverters = [\n    {\n        key: \"ignoreSearch\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    },\n    {\n        key: \"ignoreMethod\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    },\n    {\n        key: \"ignoreVary\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    }\n];\nwebidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);\nwebidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([\n    ...cacheQueryOptionConverters,\n    {\n        key: \"cacheName\",\n        converter: webidl.converters.DOMString\n    }\n]);\nwebidl.converters.Response = webidl.interfaceConverter(Response);\nwebidl.converters[\"sequence<RequestInfo>\"] = webidl.sequenceConverter(webidl.converters.RequestInfo);\nmodule.exports = {\n    Cache\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/cache/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/cache/cachestorage.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/cache/cachestorage.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { kConstruct } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/cache/symbols.js\");\nconst { Cache } = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/undici/lib/cache/cache.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nclass CacheStorage {\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map\n   * @type {Map<string, import('./cache').requestResponseList}\n   */ #caches;\n    constructor(){\n        this.#caches = new Map();\n        if (arguments[0] !== kConstruct) {\n            webidl.illegalConstructor();\n        }\n    }\n    async match(request, options = {}) {\n        webidl.brandCheck(this, CacheStorage);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"CacheStorage.match\"\n        });\n        request = webidl.converters.RequestInfo(request);\n        options = webidl.converters.MultiCacheQueryOptions(options);\n        // 1.\n        if (options.cacheName != null) {\n            // 1.1.1.1\n            if (this.#caches.has(options.cacheName)) {\n                // 1.1.1.1.1\n                const cacheList = this.#caches.get(options.cacheName);\n                const cache = new Cache(kConstruct, cacheList);\n                return await cache.match(request, options);\n            }\n        } else {\n            // 2.2\n            for (const cacheList of this.#caches.values()){\n                const cache = new Cache(kConstruct, cacheList);\n                // 2.2.1.2\n                const response = await cache.match(request, options);\n                if (response !== undefined) {\n                    return response;\n                }\n            }\n        }\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */ async has(cacheName) {\n        webidl.brandCheck(this, CacheStorage);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"CacheStorage.has\"\n        });\n        cacheName = webidl.converters.DOMString(cacheName);\n        // 2.1.1\n        // 2.2\n        return this.#caches.has(cacheName);\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open\n   * @param {string} cacheName\n   * @returns {Promise<Cache>}\n   */ async open(cacheName) {\n        webidl.brandCheck(this, CacheStorage);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"CacheStorage.open\"\n        });\n        cacheName = webidl.converters.DOMString(cacheName);\n        // 2.1\n        if (this.#caches.has(cacheName)) {\n            // await caches.open('v1') !== await caches.open('v1')\n            // 2.1.1\n            const cache = this.#caches.get(cacheName);\n            // 2.1.1.1\n            return new Cache(kConstruct, cache);\n        }\n        // 2.2\n        const cache = [];\n        // 2.3\n        this.#caches.set(cacheName, cache);\n        // 2.4\n        return new Cache(kConstruct, cache);\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */ async delete(cacheName) {\n        webidl.brandCheck(this, CacheStorage);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"CacheStorage.delete\"\n        });\n        cacheName = webidl.converters.DOMString(cacheName);\n        return this.#caches.delete(cacheName);\n    }\n    /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys\n   * @returns {string[]}\n   */ async keys() {\n        webidl.brandCheck(this, CacheStorage);\n        // 2.1\n        const keys = this.#caches.keys();\n        // 2.2\n        return [\n            ...keys\n        ];\n    }\n}\nObject.defineProperties(CacheStorage.prototype, {\n    [Symbol.toStringTag]: {\n        value: \"CacheStorage\",\n        configurable: true\n    },\n    match: kEnumerableProperty,\n    has: kEnumerableProperty,\n    open: kEnumerableProperty,\n    delete: kEnumerableProperty,\n    keys: kEnumerableProperty\n});\nmodule.exports = {\n    CacheStorage\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jYWNoZS9jYWNoZXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFVBQVUsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUMvQixNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUFHRCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNLEVBQUVFLE1BQU0sRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUMzQixNQUFNLEVBQUVHLG1CQUFtQixFQUFFLEdBQUdILG1CQUFPQSxDQUFDO0FBRXhDLE1BQU1JO0lBQ0o7OztHQUdDLEdBQ0QsQ0FBQ0MsTUFBTSxDQUFZO0lBRW5CQyxhQUFlO2FBRmYsQ0FBQ0QsTUFBTSxHQUFHLElBQUlFO1FBR1osSUFBSUMsU0FBUyxDQUFDLEVBQUUsS0FBS1QsWUFBWTtZQUMvQkcsT0FBT08sa0JBQWtCO1FBQzNCO0lBQ0Y7SUFFQSxNQUFNQyxNQUFPQyxPQUFPLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDbENWLE9BQU9XLFVBQVUsQ0FBQyxJQUFJLEVBQUVUO1FBQ3hCRixPQUFPWSxtQkFBbUIsQ0FBQ04sV0FBVyxHQUFHO1lBQUVPLFFBQVE7UUFBcUI7UUFFeEVKLFVBQVVULE9BQU9jLFVBQVUsQ0FBQ0MsV0FBVyxDQUFDTjtRQUN4Q0MsVUFBVVYsT0FBT2MsVUFBVSxDQUFDRSxzQkFBc0IsQ0FBQ047UUFFbkQsS0FBSztRQUNMLElBQUlBLFFBQVFPLFNBQVMsSUFBSSxNQUFNO1lBQzdCLFVBQVU7WUFDVixJQUFJLElBQUksQ0FBQyxDQUFDZCxNQUFNLENBQUNlLEdBQUcsQ0FBQ1IsUUFBUU8sU0FBUyxHQUFHO2dCQUN2QyxZQUFZO2dCQUNaLE1BQU1FLFlBQVksSUFBSSxDQUFDLENBQUNoQixNQUFNLENBQUNpQixHQUFHLENBQUNWLFFBQVFPLFNBQVM7Z0JBQ3BELE1BQU1JLFFBQVEsSUFBSXRCLE1BQU1GLFlBQVlzQjtnQkFFcEMsT0FBTyxNQUFNRSxNQUFNYixLQUFLLENBQUNDLFNBQVNDO1lBQ3BDO1FBQ0YsT0FBTztZQUNMLE1BQU07WUFDTixLQUFLLE1BQU1TLGFBQWEsSUFBSSxDQUFDLENBQUNoQixNQUFNLENBQUNtQixNQUFNLEdBQUk7Z0JBQzdDLE1BQU1ELFFBQVEsSUFBSXRCLE1BQU1GLFlBQVlzQjtnQkFFcEMsVUFBVTtnQkFDVixNQUFNSSxXQUFXLE1BQU1GLE1BQU1iLEtBQUssQ0FBQ0MsU0FBU0M7Z0JBRTVDLElBQUlhLGFBQWFDLFdBQVc7b0JBQzFCLE9BQU9EO2dCQUNUO1lBQ0Y7UUFDRjtJQUNGO0lBRUE7Ozs7R0FJQyxHQUNELE1BQU1MLElBQUtELFNBQVMsRUFBRTtRQUNwQmpCLE9BQU9XLFVBQVUsQ0FBQyxJQUFJLEVBQUVUO1FBQ3hCRixPQUFPWSxtQkFBbUIsQ0FBQ04sV0FBVyxHQUFHO1lBQUVPLFFBQVE7UUFBbUI7UUFFdEVJLFlBQVlqQixPQUFPYyxVQUFVLENBQUNXLFNBQVMsQ0FBQ1I7UUFFeEMsUUFBUTtRQUNSLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxDQUFDZCxNQUFNLENBQUNlLEdBQUcsQ0FBQ0Q7SUFDMUI7SUFFQTs7OztHQUlDLEdBQ0QsTUFBTVMsS0FBTVQsU0FBUyxFQUFFO1FBQ3JCakIsT0FBT1csVUFBVSxDQUFDLElBQUksRUFBRVQ7UUFDeEJGLE9BQU9ZLG1CQUFtQixDQUFDTixXQUFXLEdBQUc7WUFBRU8sUUFBUTtRQUFvQjtRQUV2RUksWUFBWWpCLE9BQU9jLFVBQVUsQ0FBQ1csU0FBUyxDQUFDUjtRQUV4QyxNQUFNO1FBQ04sSUFBSSxJQUFJLENBQUMsQ0FBQ2QsTUFBTSxDQUFDZSxHQUFHLENBQUNELFlBQVk7WUFDL0Isc0RBQXNEO1lBRXRELFFBQVE7WUFDUixNQUFNSSxRQUFRLElBQUksQ0FBQyxDQUFDbEIsTUFBTSxDQUFDaUIsR0FBRyxDQUFDSDtZQUUvQixVQUFVO1lBQ1YsT0FBTyxJQUFJbEIsTUFBTUYsWUFBWXdCO1FBQy9CO1FBRUEsTUFBTTtRQUNOLE1BQU1BLFFBQVEsRUFBRTtRQUVoQixNQUFNO1FBQ04sSUFBSSxDQUFDLENBQUNsQixNQUFNLENBQUN3QixHQUFHLENBQUNWLFdBQVdJO1FBRTVCLE1BQU07UUFDTixPQUFPLElBQUl0QixNQUFNRixZQUFZd0I7SUFDL0I7SUFFQTs7OztHQUlDLEdBQ0QsTUFBTU8sT0FBUVgsU0FBUyxFQUFFO1FBQ3ZCakIsT0FBT1csVUFBVSxDQUFDLElBQUksRUFBRVQ7UUFDeEJGLE9BQU9ZLG1CQUFtQixDQUFDTixXQUFXLEdBQUc7WUFBRU8sUUFBUTtRQUFzQjtRQUV6RUksWUFBWWpCLE9BQU9jLFVBQVUsQ0FBQ1csU0FBUyxDQUFDUjtRQUV4QyxPQUFPLElBQUksQ0FBQyxDQUFDZCxNQUFNLENBQUN5QixNQUFNLENBQUNYO0lBQzdCO0lBRUE7OztHQUdDLEdBQ0QsTUFBTVksT0FBUTtRQUNaN0IsT0FBT1csVUFBVSxDQUFDLElBQUksRUFBRVQ7UUFFeEIsTUFBTTtRQUNOLE1BQU0yQixPQUFPLElBQUksQ0FBQyxDQUFDMUIsTUFBTSxDQUFDMEIsSUFBSTtRQUU5QixNQUFNO1FBQ04sT0FBTztlQUFJQTtTQUFLO0lBQ2xCO0FBQ0Y7QUFFQUMsT0FBT0MsZ0JBQWdCLENBQUM3QixhQUFhOEIsU0FBUyxFQUFFO0lBQzlDLENBQUNDLE9BQU9DLFdBQVcsQ0FBQyxFQUFFO1FBQ3BCQyxPQUFPO1FBQ1BDLGNBQWM7SUFDaEI7SUFDQTVCLE9BQU9QO0lBQ1BpQixLQUFLakI7SUFDTHlCLE1BQU16QjtJQUNOMkIsUUFBUTNCO0lBQ1I0QixNQUFNNUI7QUFDUjtBQUVBb0MsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZwQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvY2FjaGUvY2FjaGVzdG9yYWdlLmpzP2UzOTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsga0NvbnN0cnVjdCB9ID0gcmVxdWlyZSgnLi9zeW1ib2xzJylcbmNvbnN0IHsgQ2FjaGUgfSA9IHJlcXVpcmUoJy4vY2FjaGUnKVxuY29uc3QgeyB3ZWJpZGwgfSA9IHJlcXVpcmUoJy4uL2ZldGNoL3dlYmlkbCcpXG5jb25zdCB7IGtFbnVtZXJhYmxlUHJvcGVydHkgfSA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbCcpXG5cbmNsYXNzIENhY2hlU3RvcmFnZSB7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9TZXJ2aWNlV29ya2VyLyNkZm4tcmVsZXZhbnQtbmFtZS10by1jYWNoZS1tYXBcbiAgICogQHR5cGUge01hcDxzdHJpbmcsIGltcG9ydCgnLi9jYWNoZScpLnJlcXVlc3RSZXNwb25zZUxpc3R9XG4gICAqL1xuICAjY2FjaGVzID0gbmV3IE1hcCgpXG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIGlmIChhcmd1bWVudHNbMF0gIT09IGtDb25zdHJ1Y3QpIHtcbiAgICAgIHdlYmlkbC5pbGxlZ2FsQ29uc3RydWN0b3IoKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG1hdGNoIChyZXF1ZXN0LCBvcHRpb25zID0ge30pIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBDYWNoZVN0b3JhZ2UpXG4gICAgd2ViaWRsLmFyZ3VtZW50TGVuZ3RoQ2hlY2soYXJndW1lbnRzLCAxLCB7IGhlYWRlcjogJ0NhY2hlU3RvcmFnZS5tYXRjaCcgfSlcblxuICAgIHJlcXVlc3QgPSB3ZWJpZGwuY29udmVydGVycy5SZXF1ZXN0SW5mbyhyZXF1ZXN0KVxuICAgIG9wdGlvbnMgPSB3ZWJpZGwuY29udmVydGVycy5NdWx0aUNhY2hlUXVlcnlPcHRpb25zKG9wdGlvbnMpXG5cbiAgICAvLyAxLlxuICAgIGlmIChvcHRpb25zLmNhY2hlTmFtZSAhPSBudWxsKSB7XG4gICAgICAvLyAxLjEuMS4xXG4gICAgICBpZiAodGhpcy4jY2FjaGVzLmhhcyhvcHRpb25zLmNhY2hlTmFtZSkpIHtcbiAgICAgICAgLy8gMS4xLjEuMS4xXG4gICAgICAgIGNvbnN0IGNhY2hlTGlzdCA9IHRoaXMuI2NhY2hlcy5nZXQob3B0aW9ucy5jYWNoZU5hbWUpXG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IENhY2hlKGtDb25zdHJ1Y3QsIGNhY2hlTGlzdClcblxuICAgICAgICByZXR1cm4gYXdhaXQgY2FjaGUubWF0Y2gocmVxdWVzdCwgb3B0aW9ucylcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyAyLlxuICAgICAgLy8gMi4yXG4gICAgICBmb3IgKGNvbnN0IGNhY2hlTGlzdCBvZiB0aGlzLiNjYWNoZXMudmFsdWVzKCkpIHtcbiAgICAgICAgY29uc3QgY2FjaGUgPSBuZXcgQ2FjaGUoa0NvbnN0cnVjdCwgY2FjaGVMaXN0KVxuXG4gICAgICAgIC8vIDIuMi4xLjJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWNoZS5tYXRjaChyZXF1ZXN0LCBvcHRpb25zKVxuXG4gICAgICAgIGlmIChyZXNwb25zZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHNlZSBodHRwczovL3czYy5naXRodWIuaW8vU2VydmljZVdvcmtlci8jY2FjaGUtc3RvcmFnZS1oYXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlTmFtZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIGFzeW5jIGhhcyAoY2FjaGVOYW1lKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgQ2FjaGVTdG9yYWdlKVxuICAgIHdlYmlkbC5hcmd1bWVudExlbmd0aENoZWNrKGFyZ3VtZW50cywgMSwgeyBoZWFkZXI6ICdDYWNoZVN0b3JhZ2UuaGFzJyB9KVxuXG4gICAgY2FjaGVOYW1lID0gd2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKGNhY2hlTmFtZSlcblxuICAgIC8vIDIuMS4xXG4gICAgLy8gMi4yXG4gICAgcmV0dXJuIHRoaXMuI2NhY2hlcy5oYXMoY2FjaGVOYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL1NlcnZpY2VXb3JrZXIvI2RvbS1jYWNoZXN0b3JhZ2Utb3BlblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVOYW1lXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPENhY2hlPn1cbiAgICovXG4gIGFzeW5jIG9wZW4gKGNhY2hlTmFtZSkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIENhY2hlU3RvcmFnZSlcbiAgICB3ZWJpZGwuYXJndW1lbnRMZW5ndGhDaGVjayhhcmd1bWVudHMsIDEsIHsgaGVhZGVyOiAnQ2FjaGVTdG9yYWdlLm9wZW4nIH0pXG5cbiAgICBjYWNoZU5hbWUgPSB3ZWJpZGwuY29udmVydGVycy5ET01TdHJpbmcoY2FjaGVOYW1lKVxuXG4gICAgLy8gMi4xXG4gICAgaWYgKHRoaXMuI2NhY2hlcy5oYXMoY2FjaGVOYW1lKSkge1xuICAgICAgLy8gYXdhaXQgY2FjaGVzLm9wZW4oJ3YxJykgIT09IGF3YWl0IGNhY2hlcy5vcGVuKCd2MScpXG5cbiAgICAgIC8vIDIuMS4xXG4gICAgICBjb25zdCBjYWNoZSA9IHRoaXMuI2NhY2hlcy5nZXQoY2FjaGVOYW1lKVxuXG4gICAgICAvLyAyLjEuMS4xXG4gICAgICByZXR1cm4gbmV3IENhY2hlKGtDb25zdHJ1Y3QsIGNhY2hlKVxuICAgIH1cblxuICAgIC8vIDIuMlxuICAgIGNvbnN0IGNhY2hlID0gW11cblxuICAgIC8vIDIuM1xuICAgIHRoaXMuI2NhY2hlcy5zZXQoY2FjaGVOYW1lLCBjYWNoZSlcblxuICAgIC8vIDIuNFxuICAgIHJldHVybiBuZXcgQ2FjaGUoa0NvbnN0cnVjdCwgY2FjaGUpXG4gIH1cblxuICAvKipcbiAgICogQHNlZSBodHRwczovL3czYy5naXRodWIuaW8vU2VydmljZVdvcmtlci8jY2FjaGUtc3RvcmFnZS1kZWxldGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlTmFtZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIGFzeW5jIGRlbGV0ZSAoY2FjaGVOYW1lKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgQ2FjaGVTdG9yYWdlKVxuICAgIHdlYmlkbC5hcmd1bWVudExlbmd0aENoZWNrKGFyZ3VtZW50cywgMSwgeyBoZWFkZXI6ICdDYWNoZVN0b3JhZ2UuZGVsZXRlJyB9KVxuXG4gICAgY2FjaGVOYW1lID0gd2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKGNhY2hlTmFtZSlcblxuICAgIHJldHVybiB0aGlzLiNjYWNoZXMuZGVsZXRlKGNhY2hlTmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9TZXJ2aWNlV29ya2VyLyNjYWNoZS1zdG9yYWdlLWtleXNcbiAgICogQHJldHVybnMge3N0cmluZ1tdfVxuICAgKi9cbiAgYXN5bmMga2V5cyAoKSB7XG4gICAgd2ViaWRsLmJyYW5kQ2hlY2sodGhpcywgQ2FjaGVTdG9yYWdlKVxuXG4gICAgLy8gMi4xXG4gICAgY29uc3Qga2V5cyA9IHRoaXMuI2NhY2hlcy5rZXlzKClcblxuICAgIC8vIDIuMlxuICAgIHJldHVybiBbLi4ua2V5c11cbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDYWNoZVN0b3JhZ2UucHJvdG90eXBlLCB7XG4gIFtTeW1ib2wudG9TdHJpbmdUYWddOiB7XG4gICAgdmFsdWU6ICdDYWNoZVN0b3JhZ2UnLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9LFxuICBtYXRjaDoga0VudW1lcmFibGVQcm9wZXJ0eSxcbiAgaGFzOiBrRW51bWVyYWJsZVByb3BlcnR5LFxuICBvcGVuOiBrRW51bWVyYWJsZVByb3BlcnR5LFxuICBkZWxldGU6IGtFbnVtZXJhYmxlUHJvcGVydHksXG4gIGtleXM6IGtFbnVtZXJhYmxlUHJvcGVydHlcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDYWNoZVN0b3JhZ2Vcbn1cbiJdLCJuYW1lcyI6WyJrQ29uc3RydWN0IiwicmVxdWlyZSIsIkNhY2hlIiwid2ViaWRsIiwia0VudW1lcmFibGVQcm9wZXJ0eSIsIkNhY2hlU3RvcmFnZSIsImNhY2hlcyIsImNvbnN0cnVjdG9yIiwiTWFwIiwiYXJndW1lbnRzIiwiaWxsZWdhbENvbnN0cnVjdG9yIiwibWF0Y2giLCJyZXF1ZXN0Iiwib3B0aW9ucyIsImJyYW5kQ2hlY2siLCJhcmd1bWVudExlbmd0aENoZWNrIiwiaGVhZGVyIiwiY29udmVydGVycyIsIlJlcXVlc3RJbmZvIiwiTXVsdGlDYWNoZVF1ZXJ5T3B0aW9ucyIsImNhY2hlTmFtZSIsImhhcyIsImNhY2hlTGlzdCIsImdldCIsImNhY2hlIiwidmFsdWVzIiwicmVzcG9uc2UiLCJ1bmRlZmluZWQiLCJET01TdHJpbmciLCJvcGVuIiwic2V0IiwiZGVsZXRlIiwia2V5cyIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJwcm90b3R5cGUiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/cache/cachestorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/cache/symbols.js":
/*!**************************************************!*\
  !*** ./node_modules/undici/lib/cache/symbols.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    kConstruct: Symbol(\"constructable\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jYWNoZS9zeW1ib2xzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxZQUFZQyxPQUFPO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvY2FjaGUvc3ltYm9scy5qcz9kMzUzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAga0NvbnN0cnVjdDogU3ltYm9sKCdjb25zdHJ1Y3RhYmxlJylcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwia0NvbnN0cnVjdCIsIlN5bWJvbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/cache/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/cache/util.js":
/*!***********************************************!*\
  !*** ./node_modules/undici/lib/cache/util.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { URLSerializer } = __webpack_require__(/*! ../fetch/dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nconst { isValidHeaderName } = __webpack_require__(/*! ../fetch/util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\n/**\n * @see https://url.spec.whatwg.org/#concept-url-equals\n * @param {URL} A\n * @param {URL} B\n * @param {boolean | undefined} excludeFragment\n * @returns {boolean}\n */ function urlEquals(A, B, excludeFragment = false) {\n    const serializedA = URLSerializer(A, excludeFragment);\n    const serializedB = URLSerializer(B, excludeFragment);\n    return serializedA === serializedB;\n}\n/**\n * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262\n * @param {string} header\n */ function fieldValues(header) {\n    assert(header !== null);\n    const values = [];\n    for (let value of header.split(\",\")){\n        value = value.trim();\n        if (!value.length) {\n            continue;\n        } else if (!isValidHeaderName(value)) {\n            continue;\n        }\n        values.push(value);\n    }\n    return values;\n}\nmodule.exports = {\n    urlEquals,\n    fieldValues\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jYWNoZS91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTSxFQUFFQyxhQUFhLEVBQUUsR0FBR0QsbUJBQU9BLENBQUM7QUFDbEMsTUFBTSxFQUFFRSxpQkFBaUIsRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUV0Qzs7Ozs7O0NBTUMsR0FDRCxTQUFTRyxVQUFXQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsa0JBQWtCLEtBQUs7SUFDL0MsTUFBTUMsY0FBY04sY0FBY0csR0FBR0U7SUFFckMsTUFBTUUsY0FBY1AsY0FBY0ksR0FBR0M7SUFFckMsT0FBT0MsZ0JBQWdCQztBQUN6QjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNDLFlBQWFDLE1BQU07SUFDMUJYLE9BQU9XLFdBQVc7SUFFbEIsTUFBTUMsU0FBUyxFQUFFO0lBRWpCLEtBQUssSUFBSUMsU0FBU0YsT0FBT0csS0FBSyxDQUFDLEtBQU07UUFDbkNELFFBQVFBLE1BQU1FLElBQUk7UUFFbEIsSUFBSSxDQUFDRixNQUFNRyxNQUFNLEVBQUU7WUFDakI7UUFDRixPQUFPLElBQUksQ0FBQ2Isa0JBQWtCVSxRQUFRO1lBQ3BDO1FBQ0Y7UUFFQUQsT0FBT0ssSUFBSSxDQUFDSjtJQUNkO0lBRUEsT0FBT0Q7QUFDVDtBQUVBTSxPQUFPQyxPQUFPLEdBQUc7SUFDZmY7SUFDQU07QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2NhY2hlL3V0aWwuanM/YTBhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbmNvbnN0IHsgVVJMU2VyaWFsaXplciB9ID0gcmVxdWlyZSgnLi4vZmV0Y2gvZGF0YVVSTCcpXG5jb25zdCB7IGlzVmFsaWRIZWFkZXJOYW1lIH0gPSByZXF1aXJlKCcuLi9mZXRjaC91dGlsJylcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmwtZXF1YWxzXG4gKiBAcGFyYW0ge1VSTH0gQVxuICogQHBhcmFtIHtVUkx9IEJcbiAqIEBwYXJhbSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gZXhjbHVkZUZyYWdtZW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gdXJsRXF1YWxzIChBLCBCLCBleGNsdWRlRnJhZ21lbnQgPSBmYWxzZSkge1xuICBjb25zdCBzZXJpYWxpemVkQSA9IFVSTFNlcmlhbGl6ZXIoQSwgZXhjbHVkZUZyYWdtZW50KVxuXG4gIGNvbnN0IHNlcmlhbGl6ZWRCID0gVVJMU2VyaWFsaXplcihCLCBleGNsdWRlRnJhZ21lbnQpXG5cbiAgcmV0dXJuIHNlcmlhbGl6ZWRBID09PSBzZXJpYWxpemVkQlxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Nocm9taXVtL2Nocm9taXVtL2Jsb2IvNjk0ZDIwZDEzNGNiNTUzZDhkODllNTUwMGI5MTQ4MDEyYjFiYTI5OS9jb250ZW50L2Jyb3dzZXIvY2FjaGVfc3RvcmFnZS9jYWNoZV9zdG9yYWdlX2NhY2hlLmNjI0wyNjAtTDI2MlxuICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlclxuICovXG5mdW5jdGlvbiBmaWVsZFZhbHVlcyAoaGVhZGVyKSB7XG4gIGFzc2VydChoZWFkZXIgIT09IG51bGwpXG5cbiAgY29uc3QgdmFsdWVzID0gW11cblxuICBmb3IgKGxldCB2YWx1ZSBvZiBoZWFkZXIuc3BsaXQoJywnKSkge1xuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpXG5cbiAgICBpZiAoIXZhbHVlLmxlbmd0aCkge1xuICAgICAgY29udGludWVcbiAgICB9IGVsc2UgaWYgKCFpc1ZhbGlkSGVhZGVyTmFtZSh2YWx1ZSkpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFsdWVzLnB1c2godmFsdWUpXG4gIH1cblxuICByZXR1cm4gdmFsdWVzXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1cmxFcXVhbHMsXG4gIGZpZWxkVmFsdWVzXG59XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsIlVSTFNlcmlhbGl6ZXIiLCJpc1ZhbGlkSGVhZGVyTmFtZSIsInVybEVxdWFscyIsIkEiLCJCIiwiZXhjbHVkZUZyYWdtZW50Iiwic2VyaWFsaXplZEEiLCJzZXJpYWxpemVkQiIsImZpZWxkVmFsdWVzIiwiaGVhZGVyIiwidmFsdWVzIiwidmFsdWUiLCJzcGxpdCIsInRyaW0iLCJsZW5ndGgiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/cache/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/client.js":
/*!*******************************************!*\
  !*** ./node_modules/undici/lib/client.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// @ts-check\n\n/* global WebAssembly */ const assert = __webpack_require__(/*! assert */ \"assert\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst { pipeline } = __webpack_require__(/*! stream */ \"stream\");\nconst util = __webpack_require__(/*! ./core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst timers = __webpack_require__(/*! ./timers */ \"(ssr)/./node_modules/undici/lib/timers.js\");\nconst Request = __webpack_require__(/*! ./core/request */ \"(ssr)/./node_modules/undici/lib/core/request.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher-base.js\");\nconst { RequestContentLengthMismatchError, ResponseContentLengthMismatchError, InvalidArgumentError, RequestAbortedError, HeadersTimeoutError, HeadersOverflowError, SocketError, InformationalError, BodyTimeoutError, HTTPParserError, ResponseExceededMaxSizeError, ClientDestroyedError } = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst buildConnector = __webpack_require__(/*! ./core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst { kUrl, kReset, kServerName, kClient, kBusy, kParser, kConnect, kBlocking, kResuming, kRunning, kPending, kSize, kWriting, kQueue, kConnected, kConnecting, kNeedDrain, kNoRef, kKeepAliveDefaultTimeout, kHostHeader, kPendingIdx, kRunningIdx, kError, kPipelining, kSocket, kKeepAliveTimeoutValue, kMaxHeadersSize, kKeepAliveMaxTimeout, kKeepAliveTimeoutThreshold, kHeadersTimeout, kBodyTimeout, kStrictContentLength, kConnector, kMaxRedirections, kMaxRequests, kCounter, kClose, kDestroy, kDispatch, kInterceptors, kLocalAddress, kMaxResponseSize, kHTTPConnVersion, // HTTP2\nkHost, kHTTP2Session, kHTTP2SessionState, kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = __webpack_require__(/*! ./core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\n/** @type {import('http2')} */ let http2;\ntry {\n    http2 = __webpack_require__(/*! http2 */ \"http2\");\n} catch  {\n    // @ts-ignore\n    http2 = {\n        constants: {}\n    };\n}\nconst { constants: { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS } } = http2;\n// Experimental\nlet h2ExperimentalWarned = false;\nconst FastBuffer = Buffer[Symbol.species];\nconst kClosedResolve = Symbol(\"kClosedResolve\");\nconst channels = {};\ntry {\n    const diagnosticsChannel = __webpack_require__(/*! diagnostics_channel */ \"diagnostics_channel\");\n    channels.sendHeaders = diagnosticsChannel.channel(\"undici:client:sendHeaders\");\n    channels.beforeConnect = diagnosticsChannel.channel(\"undici:client:beforeConnect\");\n    channels.connectError = diagnosticsChannel.channel(\"undici:client:connectError\");\n    channels.connected = diagnosticsChannel.channel(\"undici:client:connected\");\n} catch  {\n    channels.sendHeaders = {\n        hasSubscribers: false\n    };\n    channels.beforeConnect = {\n        hasSubscribers: false\n    };\n    channels.connectError = {\n        hasSubscribers: false\n    };\n    channels.connected = {\n        hasSubscribers: false\n    };\n}\n/**\n * @type {import('../types/client').default}\n */ class Client extends DispatcherBase {\n    /**\n   *\n   * @param {string|URL} url\n   * @param {import('../types/client').Client.Options} options\n   */ constructor(url, { interceptors, maxHeaderSize, headersTimeout, socketTimeout, requestTimeout, connectTimeout, bodyTimeout, idleTimeout, keepAlive, keepAliveTimeout, maxKeepAliveTimeout, keepAliveMaxTimeout, keepAliveTimeoutThreshold, socketPath, pipelining, tls, strictContentLength, maxCachedSessions, maxRedirections, connect, maxRequestsPerClient, localAddress, maxResponseSize, autoSelectFamily, autoSelectFamilyAttemptTimeout, // h2\n    allowH2, maxConcurrentStreams } = {}){\n        super();\n        if (keepAlive !== undefined) {\n            throw new InvalidArgumentError(\"unsupported keepAlive, use pipelining=0 instead\");\n        }\n        if (socketTimeout !== undefined) {\n            throw new InvalidArgumentError(\"unsupported socketTimeout, use headersTimeout & bodyTimeout instead\");\n        }\n        if (requestTimeout !== undefined) {\n            throw new InvalidArgumentError(\"unsupported requestTimeout, use headersTimeout & bodyTimeout instead\");\n        }\n        if (idleTimeout !== undefined) {\n            throw new InvalidArgumentError(\"unsupported idleTimeout, use keepAliveTimeout instead\");\n        }\n        if (maxKeepAliveTimeout !== undefined) {\n            throw new InvalidArgumentError(\"unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead\");\n        }\n        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {\n            throw new InvalidArgumentError(\"invalid maxHeaderSize\");\n        }\n        if (socketPath != null && typeof socketPath !== \"string\") {\n            throw new InvalidArgumentError(\"invalid socketPath\");\n        }\n        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {\n            throw new InvalidArgumentError(\"invalid connectTimeout\");\n        }\n        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {\n            throw new InvalidArgumentError(\"invalid keepAliveTimeout\");\n        }\n        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {\n            throw new InvalidArgumentError(\"invalid keepAliveMaxTimeout\");\n        }\n        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {\n            throw new InvalidArgumentError(\"invalid keepAliveTimeoutThreshold\");\n        }\n        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {\n            throw new InvalidArgumentError(\"headersTimeout must be a positive integer or zero\");\n        }\n        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {\n            throw new InvalidArgumentError(\"bodyTimeout must be a positive integer or zero\");\n        }\n        if (connect != null && typeof connect !== \"function\" && typeof connect !== \"object\") {\n            throw new InvalidArgumentError(\"connect must be a function or an object\");\n        }\n        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n            throw new InvalidArgumentError(\"maxRedirections must be a positive number\");\n        }\n        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {\n            throw new InvalidArgumentError(\"maxRequestsPerClient must be a positive number\");\n        }\n        if (localAddress != null && (typeof localAddress !== \"string\" || net.isIP(localAddress) === 0)) {\n            throw new InvalidArgumentError(\"localAddress must be valid string IP address\");\n        }\n        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {\n            throw new InvalidArgumentError(\"maxResponseSize must be a positive number\");\n        }\n        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {\n            throw new InvalidArgumentError(\"autoSelectFamilyAttemptTimeout must be a positive number\");\n        }\n        // h2\n        if (allowH2 != null && typeof allowH2 !== \"boolean\") {\n            throw new InvalidArgumentError(\"allowH2 must be a valid boolean value\");\n        }\n        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== \"number\" || maxConcurrentStreams < 1)) {\n            throw new InvalidArgumentError(\"maxConcurrentStreams must be a possitive integer, greater than 0\");\n        }\n        if (typeof connect !== \"function\") {\n            connect = buildConnector({\n                ...tls,\n                maxCachedSessions,\n                allowH2,\n                socketPath,\n                timeout: connectTimeout,\n                ...util.nodeHasAutoSelectFamily && autoSelectFamily ? {\n                    autoSelectFamily,\n                    autoSelectFamilyAttemptTimeout\n                } : undefined,\n                ...connect\n            });\n        }\n        this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [\n            createRedirectInterceptor({\n                maxRedirections\n            })\n        ];\n        this[kUrl] = util.parseOrigin(url);\n        this[kConnector] = connect;\n        this[kSocket] = null;\n        this[kPipelining] = pipelining != null ? pipelining : 1;\n        this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;\n        this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;\n        this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout;\n        this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;\n        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];\n        this[kServerName] = null;\n        this[kLocalAddress] = localAddress != null ? localAddress : null;\n        this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming\n        ;\n        this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming\n        ;\n        this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : \"\"}\\r\\n`;\n        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3;\n        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3;\n        this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;\n        this[kMaxRedirections] = maxRedirections;\n        this[kMaxRequests] = maxRequestsPerClient;\n        this[kClosedResolve] = null;\n        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;\n        this[kHTTPConnVersion] = \"h1\";\n        // HTTP/2\n        this[kHTTP2Session] = null;\n        this[kHTTP2SessionState] = !allowH2 ? null : {\n            // streams: null, // Fixed queue of streams - For future support of `push`\n            openStreams: 0,\n            maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server\n        };\n        this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : \"\"}`;\n        // kQueue is built up of 3 sections separated by\n        // the kRunningIdx and kPendingIdx indices.\n        // |   complete   |   running   |   pending   |\n        //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length\n        // kRunningIdx points to the first running element.\n        // kPendingIdx points to the first pending element.\n        // This implements a fast queue with an amortized\n        // time of O(1).\n        this[kQueue] = [];\n        this[kRunningIdx] = 0;\n        this[kPendingIdx] = 0;\n    }\n    get pipelining() {\n        return this[kPipelining];\n    }\n    set pipelining(value) {\n        this[kPipelining] = value;\n        resume(this, true);\n    }\n    get [kPending]() {\n        return this[kQueue].length - this[kPendingIdx];\n    }\n    get [kRunning]() {\n        return this[kPendingIdx] - this[kRunningIdx];\n    }\n    get [kSize]() {\n        return this[kQueue].length - this[kRunningIdx];\n    }\n    get [kConnected]() {\n        return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;\n    }\n    get [kBusy]() {\n        const socket = this[kSocket];\n        return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;\n    }\n    /* istanbul ignore: only used for test */ [kConnect](cb) {\n        connect(this);\n        this.once(\"connect\", cb);\n    }\n    [kDispatch](opts, handler) {\n        const origin = opts.origin || this[kUrl].origin;\n        const request = this[kHTTPConnVersion] === \"h2\" ? Request[kHTTP2BuildRequest](origin, opts, handler) : Request[kHTTP1BuildRequest](origin, opts, handler);\n        this[kQueue].push(request);\n        if (this[kResuming]) {\n        // Do nothing.\n        } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {\n            // Wait a tick in case stream/iterator is ended in the same tick.\n            this[kResuming] = 1;\n            process.nextTick(resume, this);\n        } else {\n            resume(this, true);\n        }\n        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {\n            this[kNeedDrain] = 2;\n        }\n        return this[kNeedDrain] < 2;\n    }\n    async [kClose]() {\n        // TODO: for H2 we need to gracefully flush the remaining enqueued\n        // request and close each stream.\n        return new Promise((resolve)=>{\n            if (!this[kSize]) {\n                resolve(null);\n            } else {\n                this[kClosedResolve] = resolve;\n            }\n        });\n    }\n    async [kDestroy](err) {\n        return new Promise((resolve)=>{\n            const requests = this[kQueue].splice(this[kPendingIdx]);\n            for(let i = 0; i < requests.length; i++){\n                const request = requests[i];\n                errorRequest(this, request, err);\n            }\n            const callback = ()=>{\n                if (this[kClosedResolve]) {\n                    // TODO (fix): Should we error here with ClientDestroyedError?\n                    this[kClosedResolve]();\n                    this[kClosedResolve] = null;\n                }\n                resolve();\n            };\n            if (this[kHTTP2Session] != null) {\n                util.destroy(this[kHTTP2Session], err);\n                this[kHTTP2Session] = null;\n                this[kHTTP2SessionState] = null;\n            }\n            if (!this[kSocket]) {\n                queueMicrotask(callback);\n            } else {\n                util.destroy(this[kSocket].on(\"close\", callback), err);\n            }\n            resume(this);\n        });\n    }\n}\nfunction onHttp2SessionError(err) {\n    assert(err.code !== \"ERR_TLS_CERT_ALTNAME_INVALID\");\n    this[kSocket][kError] = err;\n    onError(this[kClient], err);\n}\nfunction onHttp2FrameError(type, code, id) {\n    const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`);\n    if (id === 0) {\n        this[kSocket][kError] = err;\n        onError(this[kClient], err);\n    }\n}\nfunction onHttp2SessionEnd() {\n    util.destroy(this, new SocketError(\"other side closed\"));\n    util.destroy(this[kSocket], new SocketError(\"other side closed\"));\n}\nfunction onHTTP2GoAway(code) {\n    const client = this[kClient];\n    const err = new InformationalError(`HTTP/2: \"GOAWAY\" frame received with code ${code}`);\n    client[kSocket] = null;\n    client[kHTTP2Session] = null;\n    if (client.destroyed) {\n        assert(this[kPending] === 0);\n        // Fail entire queue.\n        const requests = client[kQueue].splice(client[kRunningIdx]);\n        for(let i = 0; i < requests.length; i++){\n            const request = requests[i];\n            errorRequest(this, request, err);\n        }\n    } else if (client[kRunning] > 0) {\n        // Fail head of pipeline.\n        const request = client[kQueue][client[kRunningIdx]];\n        client[kQueue][client[kRunningIdx]++] = null;\n        errorRequest(client, request, err);\n    }\n    client[kPendingIdx] = client[kRunningIdx];\n    assert(client[kRunning] === 0);\n    client.emit(\"disconnect\", client[kUrl], [\n        client\n    ], err);\n    resume(client);\n}\nconst constants = __webpack_require__(/*! ./llhttp/constants */ \"(ssr)/./node_modules/undici/lib/llhttp/constants.js\");\nconst createRedirectInterceptor = __webpack_require__(/*! ./interceptor/redirectInterceptor */ \"(ssr)/./node_modules/undici/lib/interceptor/redirectInterceptor.js\");\nconst EMPTY_BUF = Buffer.alloc(0);\nasync function lazyllhttp() {\n    const llhttpWasmData = process.env.JEST_WORKER_ID ? __webpack_require__(/*! ./llhttp/llhttp-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\") : undefined;\n    let mod;\n    try {\n        mod = await WebAssembly.compile(Buffer.from(__webpack_require__(/*! ./llhttp/llhttp_simd-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js\"), \"base64\"));\n    } catch (e) {\n        /* istanbul ignore next */ // We could check if the error was caused by the simd option not\n        // being enabled, but the occurring of this other error\n        // * https://github.com/emscripten-core/emscripten/issues/11495\n        // got me to remove that check to avoid breaking Node 12.\n        mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || __webpack_require__(/*! ./llhttp/llhttp-wasm.js */ \"(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\"), \"base64\"));\n    }\n    return await WebAssembly.instantiate(mod, {\n        env: {\n            /* eslint-disable camelcase */ wasm_on_url: (p, at, len)=>{\n                /* istanbul ignore next */ return 0;\n            },\n            wasm_on_status: (p, at, len)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n                return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n            },\n            wasm_on_message_begin: (p)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                return currentParser.onMessageBegin() || 0;\n            },\n            wasm_on_header_field: (p, at, len)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n                return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n            },\n            wasm_on_header_value: (p, at, len)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n                return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n            },\n            wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;\n            },\n            wasm_on_body: (p, at, len)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n                return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n            },\n            wasm_on_message_complete: (p)=>{\n                assert.strictEqual(currentParser.ptr, p);\n                return currentParser.onMessageComplete() || 0;\n            }\n        }\n    });\n}\nlet llhttpInstance = null;\nlet llhttpPromise = lazyllhttp();\nllhttpPromise.catch();\nlet currentParser = null;\nlet currentBufferRef = null;\nlet currentBufferSize = 0;\nlet currentBufferPtr = null;\nconst TIMEOUT_HEADERS = 1;\nconst TIMEOUT_BODY = 2;\nconst TIMEOUT_IDLE = 3;\nclass Parser {\n    constructor(client, socket, { exports }){\n        assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);\n        this.llhttp = exports;\n        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);\n        this.client = client;\n        this.socket = socket;\n        this.timeout = null;\n        this.timeoutValue = null;\n        this.timeoutType = null;\n        this.statusCode = null;\n        this.statusText = \"\";\n        this.upgrade = false;\n        this.headers = [];\n        this.headersSize = 0;\n        this.headersMaxSize = client[kMaxHeadersSize];\n        this.shouldKeepAlive = false;\n        this.paused = false;\n        this.resume = this.resume.bind(this);\n        this.bytesRead = 0;\n        this.keepAlive = \"\";\n        this.contentLength = \"\";\n        this.connection = \"\";\n        this.maxResponseSize = client[kMaxResponseSize];\n    }\n    setTimeout(value, type) {\n        this.timeoutType = type;\n        if (value !== this.timeoutValue) {\n            timers.clearTimeout(this.timeout);\n            if (value) {\n                this.timeout = timers.setTimeout(onParserTimeout, value, this);\n                // istanbul ignore else: only for jest\n                if (this.timeout.unref) {\n                    this.timeout.unref();\n                }\n            } else {\n                this.timeout = null;\n            }\n            this.timeoutValue = value;\n        } else if (this.timeout) {\n            // istanbul ignore else: only for jest\n            if (this.timeout.refresh) {\n                this.timeout.refresh();\n            }\n        }\n    }\n    resume() {\n        if (this.socket.destroyed || !this.paused) {\n            return;\n        }\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        this.llhttp.llhttp_resume(this.ptr);\n        assert(this.timeoutType === TIMEOUT_BODY);\n        if (this.timeout) {\n            // istanbul ignore else: only for jest\n            if (this.timeout.refresh) {\n                this.timeout.refresh();\n            }\n        }\n        this.paused = false;\n        this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.\n        ;\n        this.readMore();\n    }\n    readMore() {\n        while(!this.paused && this.ptr){\n            const chunk = this.socket.read();\n            if (chunk === null) {\n                break;\n            }\n            this.execute(chunk);\n        }\n    }\n    execute(data) {\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        assert(!this.paused);\n        const { socket, llhttp } = this;\n        if (data.length > currentBufferSize) {\n            if (currentBufferPtr) {\n                llhttp.free(currentBufferPtr);\n            }\n            currentBufferSize = Math.ceil(data.length / 4096) * 4096;\n            currentBufferPtr = llhttp.malloc(currentBufferSize);\n        }\n        new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);\n        // Call `execute` on the wasm parser.\n        // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,\n        // and finally the length of bytes to parse.\n        // The return value is an error code or `constants.ERROR.OK`.\n        try {\n            let ret;\n            try {\n                currentBufferRef = data;\n                currentParser = this;\n                ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);\n            /* eslint-disable-next-line no-useless-catch */ } catch (err) {\n                /* istanbul ignore next: difficult to make a test case for */ throw err;\n            } finally{\n                currentParser = null;\n                currentBufferRef = null;\n            }\n            const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;\n            if (ret === constants.ERROR.PAUSED_UPGRADE) {\n                this.onUpgrade(data.slice(offset));\n            } else if (ret === constants.ERROR.PAUSED) {\n                this.paused = true;\n                socket.unshift(data.slice(offset));\n            } else if (ret !== constants.ERROR.OK) {\n                const ptr = llhttp.llhttp_get_error_reason(this.ptr);\n                let message = \"\";\n                /* istanbul ignore else: difficult to make a test case for */ if (ptr) {\n                    const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);\n                    message = \"Response does not match the HTTP/1.1 protocol (\" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + \")\";\n                }\n                throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));\n            }\n        } catch (err) {\n            util.destroy(socket, err);\n        }\n    }\n    destroy() {\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        this.llhttp.llhttp_free(this.ptr);\n        this.ptr = null;\n        timers.clearTimeout(this.timeout);\n        this.timeout = null;\n        this.timeoutValue = null;\n        this.timeoutType = null;\n        this.paused = false;\n    }\n    onStatus(buf) {\n        this.statusText = buf.toString();\n    }\n    onMessageBegin() {\n        const { socket, client } = this;\n        /* istanbul ignore next: difficult to make a test case for */ if (socket.destroyed) {\n            return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        if (!request) {\n            return -1;\n        }\n    }\n    onHeaderField(buf) {\n        const len = this.headers.length;\n        if ((len & 1) === 0) {\n            this.headers.push(buf);\n        } else {\n            this.headers[len - 1] = Buffer.concat([\n                this.headers[len - 1],\n                buf\n            ]);\n        }\n        this.trackHeader(buf.length);\n    }\n    onHeaderValue(buf) {\n        let len = this.headers.length;\n        if ((len & 1) === 1) {\n            this.headers.push(buf);\n            len += 1;\n        } else {\n            this.headers[len - 1] = Buffer.concat([\n                this.headers[len - 1],\n                buf\n            ]);\n        }\n        const key = this.headers[len - 2];\n        if (key.length === 10 && key.toString().toLowerCase() === \"keep-alive\") {\n            this.keepAlive += buf.toString();\n        } else if (key.length === 10 && key.toString().toLowerCase() === \"connection\") {\n            this.connection += buf.toString();\n        } else if (key.length === 14 && key.toString().toLowerCase() === \"content-length\") {\n            this.contentLength += buf.toString();\n        }\n        this.trackHeader(buf.length);\n    }\n    trackHeader(len) {\n        this.headersSize += len;\n        if (this.headersSize >= this.headersMaxSize) {\n            util.destroy(this.socket, new HeadersOverflowError());\n        }\n    }\n    onUpgrade(head) {\n        const { upgrade, client, socket, headers, statusCode } = this;\n        assert(upgrade);\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        assert(!socket.destroyed);\n        assert(socket === client[kSocket]);\n        assert(!this.paused);\n        assert(request.upgrade || request.method === \"CONNECT\");\n        this.statusCode = null;\n        this.statusText = \"\";\n        this.shouldKeepAlive = null;\n        assert(this.headers.length % 2 === 0);\n        this.headers = [];\n        this.headersSize = 0;\n        socket.unshift(head);\n        socket[kParser].destroy();\n        socket[kParser] = null;\n        socket[kClient] = null;\n        socket[kError] = null;\n        socket.removeListener(\"error\", onSocketError).removeListener(\"readable\", onSocketReadable).removeListener(\"end\", onSocketEnd).removeListener(\"close\", onSocketClose);\n        client[kSocket] = null;\n        client[kQueue][client[kRunningIdx]++] = null;\n        client.emit(\"disconnect\", client[kUrl], [\n            client\n        ], new InformationalError(\"upgrade\"));\n        try {\n            request.onUpgrade(statusCode, headers, socket);\n        } catch (err) {\n            util.destroy(socket, err);\n        }\n        resume(client);\n    }\n    onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {\n        const { client, socket, headers, statusText } = this;\n        /* istanbul ignore next: difficult to make a test case for */ if (socket.destroyed) {\n            return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        /* istanbul ignore next: difficult to make a test case for */ if (!request) {\n            return -1;\n        }\n        assert(!this.upgrade);\n        assert(this.statusCode < 200);\n        if (statusCode === 100) {\n            util.destroy(socket, new SocketError(\"bad response\", util.getSocketInfo(socket)));\n            return -1;\n        }\n        /* this can only happen if server is misbehaving */ if (upgrade && !request.upgrade) {\n            util.destroy(socket, new SocketError(\"bad upgrade\", util.getSocketInfo(socket)));\n            return -1;\n        }\n        assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);\n        this.statusCode = statusCode;\n        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.\n        request.method === \"HEAD\" && !socket[kReset] && this.connection.toLowerCase() === \"keep-alive\";\n        if (this.statusCode >= 200) {\n            const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];\n            this.setTimeout(bodyTimeout, TIMEOUT_BODY);\n        } else if (this.timeout) {\n            // istanbul ignore else: only for jest\n            if (this.timeout.refresh) {\n                this.timeout.refresh();\n            }\n        }\n        if (request.method === \"CONNECT\") {\n            assert(client[kRunning] === 1);\n            this.upgrade = true;\n            return 2;\n        }\n        if (upgrade) {\n            assert(client[kRunning] === 1);\n            this.upgrade = true;\n            return 2;\n        }\n        assert(this.headers.length % 2 === 0);\n        this.headers = [];\n        this.headersSize = 0;\n        if (this.shouldKeepAlive && client[kPipelining]) {\n            const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;\n            if (keepAliveTimeout != null) {\n                const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);\n                if (timeout <= 0) {\n                    socket[kReset] = true;\n                } else {\n                    client[kKeepAliveTimeoutValue] = timeout;\n                }\n            } else {\n                client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];\n            }\n        } else {\n            // Stop more requests from being dispatched.\n            socket[kReset] = true;\n        }\n        let pause;\n        try {\n            pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;\n        } catch (err) {\n            util.destroy(socket, err);\n            return -1;\n        }\n        if (request.method === \"HEAD\") {\n            return 1;\n        }\n        if (statusCode < 200) {\n            return 1;\n        }\n        if (socket[kBlocking]) {\n            socket[kBlocking] = false;\n            resume(client);\n        }\n        return pause ? constants.ERROR.PAUSED : 0;\n    }\n    onBody(buf) {\n        const { client, socket, statusCode, maxResponseSize } = this;\n        if (socket.destroyed) {\n            return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        assert.strictEqual(this.timeoutType, TIMEOUT_BODY);\n        if (this.timeout) {\n            // istanbul ignore else: only for jest\n            if (this.timeout.refresh) {\n                this.timeout.refresh();\n            }\n        }\n        assert(statusCode >= 200);\n        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {\n            util.destroy(socket, new ResponseExceededMaxSizeError());\n            return -1;\n        }\n        this.bytesRead += buf.length;\n        try {\n            if (request.onData(buf) === false) {\n                return constants.ERROR.PAUSED;\n            }\n        } catch (err) {\n            util.destroy(socket, err);\n            return -1;\n        }\n    }\n    onMessageComplete() {\n        const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;\n        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {\n            return -1;\n        }\n        if (upgrade) {\n            return;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        assert(statusCode >= 100);\n        this.statusCode = null;\n        this.statusText = \"\";\n        this.bytesRead = 0;\n        this.contentLength = \"\";\n        this.keepAlive = \"\";\n        this.connection = \"\";\n        assert(this.headers.length % 2 === 0);\n        this.headers = [];\n        this.headersSize = 0;\n        if (statusCode < 200) {\n            return;\n        }\n        /* istanbul ignore next: should be handled by llhttp? */ if (request.method !== \"HEAD\" && contentLength && bytesRead !== parseInt(contentLength, 10)) {\n            util.destroy(socket, new ResponseContentLengthMismatchError());\n            return -1;\n        }\n        try {\n            request.onComplete(headers);\n        } catch (err) {\n            errorRequest(client, request, err);\n        }\n        client[kQueue][client[kRunningIdx]++] = null;\n        if (socket[kWriting]) {\n            assert.strictEqual(client[kRunning], 0);\n            // Response completed before request.\n            util.destroy(socket, new InformationalError(\"reset\"));\n            return constants.ERROR.PAUSED;\n        } else if (!shouldKeepAlive) {\n            util.destroy(socket, new InformationalError(\"reset\"));\n            return constants.ERROR.PAUSED;\n        } else if (socket[kReset] && client[kRunning] === 0) {\n            // Destroy socket once all requests have completed.\n            // The request at the tail of the pipeline is the one\n            // that requested reset and no further requests should\n            // have been queued since then.\n            util.destroy(socket, new InformationalError(\"reset\"));\n            return constants.ERROR.PAUSED;\n        } else if (client[kPipelining] === 1) {\n            // We must wait a full event loop cycle to reuse this socket to make sure\n            // that non-spec compliant servers are not closing the connection even if they\n            // said they won't.\n            setImmediate(resume, client);\n        } else {\n            resume(client);\n        }\n    }\n}\nfunction onParserTimeout(parser) {\n    const { socket, timeoutType, client } = parser;\n    /* istanbul ignore else */ if (timeoutType === TIMEOUT_HEADERS) {\n        if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {\n            assert(!parser.paused, \"cannot be paused while waiting for headers\");\n            util.destroy(socket, new HeadersTimeoutError());\n        }\n    } else if (timeoutType === TIMEOUT_BODY) {\n        if (!parser.paused) {\n            util.destroy(socket, new BodyTimeoutError());\n        }\n    } else if (timeoutType === TIMEOUT_IDLE) {\n        assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);\n        util.destroy(socket, new InformationalError(\"socket idle timeout\"));\n    }\n}\nfunction onSocketReadable() {\n    const { [kParser]: parser } = this;\n    if (parser) {\n        parser.readMore();\n    }\n}\nfunction onSocketError(err) {\n    const { [kClient]: client, [kParser]: parser } = this;\n    assert(err.code !== \"ERR_TLS_CERT_ALTNAME_INVALID\");\n    if (client[kHTTPConnVersion] !== \"h2\") {\n        // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded\n        // to the user.\n        if (err.code === \"ECONNRESET\" && parser.statusCode && !parser.shouldKeepAlive) {\n            // We treat all incoming data so for as a valid response.\n            parser.onMessageComplete();\n            return;\n        }\n    }\n    this[kError] = err;\n    onError(this[kClient], err);\n}\nfunction onError(client, err) {\n    if (client[kRunning] === 0 && err.code !== \"UND_ERR_INFO\" && err.code !== \"UND_ERR_SOCKET\") {\n        // Error is not caused by running request and not a recoverable\n        // socket error.\n        assert(client[kPendingIdx] === client[kRunningIdx]);\n        const requests = client[kQueue].splice(client[kRunningIdx]);\n        for(let i = 0; i < requests.length; i++){\n            const request = requests[i];\n            errorRequest(client, request, err);\n        }\n        assert(client[kSize] === 0);\n    }\n}\nfunction onSocketEnd() {\n    const { [kParser]: parser, [kClient]: client } = this;\n    if (client[kHTTPConnVersion] !== \"h2\") {\n        if (parser.statusCode && !parser.shouldKeepAlive) {\n            // We treat all incoming data so far as a valid response.\n            parser.onMessageComplete();\n            return;\n        }\n    }\n    util.destroy(this, new SocketError(\"other side closed\", util.getSocketInfo(this)));\n}\nfunction onSocketClose() {\n    const { [kClient]: client, [kParser]: parser } = this;\n    if (client[kHTTPConnVersion] === \"h1\" && parser) {\n        if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {\n            // We treat all incoming data so far as a valid response.\n            parser.onMessageComplete();\n        }\n        this[kParser].destroy();\n        this[kParser] = null;\n    }\n    const err = this[kError] || new SocketError(\"closed\", util.getSocketInfo(this));\n    client[kSocket] = null;\n    if (client.destroyed) {\n        assert(client[kPending] === 0);\n        // Fail entire queue.\n        const requests = client[kQueue].splice(client[kRunningIdx]);\n        for(let i = 0; i < requests.length; i++){\n            const request = requests[i];\n            errorRequest(client, request, err);\n        }\n    } else if (client[kRunning] > 0 && err.code !== \"UND_ERR_INFO\") {\n        // Fail head of pipeline.\n        const request = client[kQueue][client[kRunningIdx]];\n        client[kQueue][client[kRunningIdx]++] = null;\n        errorRequest(client, request, err);\n    }\n    client[kPendingIdx] = client[kRunningIdx];\n    assert(client[kRunning] === 0);\n    client.emit(\"disconnect\", client[kUrl], [\n        client\n    ], err);\n    resume(client);\n}\nasync function connect(client) {\n    assert(!client[kConnecting]);\n    assert(!client[kSocket]);\n    let { host, hostname, protocol, port } = client[kUrl];\n    // Resolve ipv6\n    if (hostname[0] === \"[\") {\n        const idx = hostname.indexOf(\"]\");\n        assert(idx !== -1);\n        const ip = hostname.substr(1, idx - 1);\n        assert(net.isIP(ip));\n        hostname = ip;\n    }\n    client[kConnecting] = true;\n    if (channels.beforeConnect.hasSubscribers) {\n        channels.beforeConnect.publish({\n            connectParams: {\n                host,\n                hostname,\n                protocol,\n                port,\n                servername: client[kServerName],\n                localAddress: client[kLocalAddress]\n            },\n            connector: client[kConnector]\n        });\n    }\n    try {\n        const socket = await new Promise((resolve, reject)=>{\n            client[kConnector]({\n                host,\n                hostname,\n                protocol,\n                port,\n                servername: client[kServerName],\n                localAddress: client[kLocalAddress]\n            }, (err, socket)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(socket);\n                }\n            });\n        });\n        if (client.destroyed) {\n            util.destroy(socket.on(\"error\", ()=>{}), new ClientDestroyedError());\n            return;\n        }\n        client[kConnecting] = false;\n        assert(socket);\n        const isH2 = socket.alpnProtocol === \"h2\";\n        if (isH2) {\n            if (!h2ExperimentalWarned) {\n                h2ExperimentalWarned = true;\n                process.emitWarning(\"H2 support is experimental, expect them to change at any time.\", {\n                    code: \"UNDICI-H2\"\n                });\n            }\n            const session = http2.connect(client[kUrl], {\n                createConnection: ()=>socket,\n                peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams\n            });\n            client[kHTTPConnVersion] = \"h2\";\n            session[kClient] = client;\n            session[kSocket] = socket;\n            session.on(\"error\", onHttp2SessionError);\n            session.on(\"frameError\", onHttp2FrameError);\n            session.on(\"end\", onHttp2SessionEnd);\n            session.on(\"goaway\", onHTTP2GoAway);\n            session.on(\"close\", onSocketClose);\n            session.unref();\n            client[kHTTP2Session] = session;\n            socket[kHTTP2Session] = session;\n        } else {\n            if (!llhttpInstance) {\n                llhttpInstance = await llhttpPromise;\n                llhttpPromise = null;\n            }\n            socket[kNoRef] = false;\n            socket[kWriting] = false;\n            socket[kReset] = false;\n            socket[kBlocking] = false;\n            socket[kParser] = new Parser(client, socket, llhttpInstance);\n        }\n        socket[kCounter] = 0;\n        socket[kMaxRequests] = client[kMaxRequests];\n        socket[kClient] = client;\n        socket[kError] = null;\n        socket.on(\"error\", onSocketError).on(\"readable\", onSocketReadable).on(\"end\", onSocketEnd).on(\"close\", onSocketClose);\n        client[kSocket] = socket;\n        if (channels.connected.hasSubscribers) {\n            channels.connected.publish({\n                connectParams: {\n                    host,\n                    hostname,\n                    protocol,\n                    port,\n                    servername: client[kServerName],\n                    localAddress: client[kLocalAddress]\n                },\n                connector: client[kConnector],\n                socket\n            });\n        }\n        client.emit(\"connect\", client[kUrl], [\n            client\n        ]);\n    } catch (err) {\n        if (client.destroyed) {\n            return;\n        }\n        client[kConnecting] = false;\n        if (channels.connectError.hasSubscribers) {\n            channels.connectError.publish({\n                connectParams: {\n                    host,\n                    hostname,\n                    protocol,\n                    port,\n                    servername: client[kServerName],\n                    localAddress: client[kLocalAddress]\n                },\n                connector: client[kConnector],\n                error: err\n            });\n        }\n        if (err.code === \"ERR_TLS_CERT_ALTNAME_INVALID\") {\n            assert(client[kRunning] === 0);\n            while(client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]){\n                const request = client[kQueue][client[kPendingIdx]++];\n                errorRequest(client, request, err);\n            }\n        } else {\n            onError(client, err);\n        }\n        client.emit(\"connectionError\", client[kUrl], [\n            client\n        ], err);\n    }\n    resume(client);\n}\nfunction emitDrain(client) {\n    client[kNeedDrain] = 0;\n    client.emit(\"drain\", client[kUrl], [\n        client\n    ]);\n}\nfunction resume(client, sync) {\n    if (client[kResuming] === 2) {\n        return;\n    }\n    client[kResuming] = 2;\n    _resume(client, sync);\n    client[kResuming] = 0;\n    if (client[kRunningIdx] > 256) {\n        client[kQueue].splice(0, client[kRunningIdx]);\n        client[kPendingIdx] -= client[kRunningIdx];\n        client[kRunningIdx] = 0;\n    }\n}\nfunction _resume(client, sync) {\n    while(true){\n        if (client.destroyed) {\n            assert(client[kPending] === 0);\n            return;\n        }\n        if (client[kClosedResolve] && !client[kSize]) {\n            client[kClosedResolve]();\n            client[kClosedResolve] = null;\n            return;\n        }\n        const socket = client[kSocket];\n        if (socket && !socket.destroyed && socket.alpnProtocol !== \"h2\") {\n            if (client[kSize] === 0) {\n                if (!socket[kNoRef] && socket.unref) {\n                    socket.unref();\n                    socket[kNoRef] = true;\n                }\n            } else if (socket[kNoRef] && socket.ref) {\n                socket.ref();\n                socket[kNoRef] = false;\n            }\n            if (client[kSize] === 0) {\n                if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {\n                    socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);\n                }\n            } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {\n                if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {\n                    const request = client[kQueue][client[kRunningIdx]];\n                    const headersTimeout = request.headersTimeout != null ? request.headersTimeout : client[kHeadersTimeout];\n                    socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);\n                }\n            }\n        }\n        if (client[kBusy]) {\n            client[kNeedDrain] = 2;\n        } else if (client[kNeedDrain] === 2) {\n            if (sync) {\n                client[kNeedDrain] = 1;\n                process.nextTick(emitDrain, client);\n            } else {\n                emitDrain(client);\n            }\n            continue;\n        }\n        if (client[kPending] === 0) {\n            return;\n        }\n        if (client[kRunning] >= (client[kPipelining] || 1)) {\n            return;\n        }\n        const request = client[kQueue][client[kPendingIdx]];\n        if (client[kUrl].protocol === \"https:\" && client[kServerName] !== request.servername) {\n            if (client[kRunning] > 0) {\n                return;\n            }\n            client[kServerName] = request.servername;\n            if (socket && socket.servername !== request.servername) {\n                util.destroy(socket, new InformationalError(\"servername changed\"));\n                return;\n            }\n        }\n        if (client[kConnecting]) {\n            return;\n        }\n        if (!socket && !client[kHTTP2Session]) {\n            connect(client);\n            return;\n        }\n        if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {\n            return;\n        }\n        if (client[kRunning] > 0 && !request.idempotent) {\n            // Non-idempotent request cannot be retried.\n            // Ensure that no other requests are inflight and\n            // could cause failure.\n            return;\n        }\n        if (client[kRunning] > 0 && (request.upgrade || request.method === \"CONNECT\")) {\n            // Don't dispatch an upgrade until all preceding requests have completed.\n            // A misbehaving server might upgrade the connection before all pipelined\n            // request has completed.\n            return;\n        }\n        if (util.isStream(request.body) && util.bodyLength(request.body) === 0) {\n            request.body.on(\"data\", /* istanbul ignore next */ function() {\n                /* istanbul ignore next */ assert(false);\n            }).on(\"error\", function(err) {\n                errorRequest(client, request, err);\n            }).on(\"end\", function() {\n                util.destroy(this);\n            });\n            request.body = null;\n        }\n        if (client[kRunning] > 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body))) {\n            // Request with stream or iterator body can error while other requests\n            // are inflight and indirectly error those as well.\n            // Ensure this doesn't happen by waiting for inflight\n            // to complete before dispatching.\n            // Request with stream or iterator body cannot be retried.\n            // Ensure that no other requests are inflight and\n            // could cause failure.\n            return;\n        }\n        if (!request.aborted && write(client, request)) {\n            client[kPendingIdx]++;\n        } else {\n            client[kQueue].splice(client[kPendingIdx], 1);\n        }\n    }\n}\nfunction write(client, request) {\n    if (client[kHTTPConnVersion] === \"h2\") {\n        writeH2(client, client[kHTTP2Session], request);\n        return;\n    }\n    const { body, method, path, host, upgrade, headers, blocking, reset } = request;\n    // https://tools.ietf.org/html/rfc7231#section-4.3.1\n    // https://tools.ietf.org/html/rfc7231#section-4.3.2\n    // https://tools.ietf.org/html/rfc7231#section-4.3.5\n    // Sending a payload body on a request that does not\n    // expect it can cause undefined behavior on some\n    // servers and corrupt connection state. Do not\n    // re-use the connection for further requests.\n    const expectsPayload = method === \"PUT\" || method === \"POST\" || method === \"PATCH\";\n    if (body && typeof body.read === \"function\") {\n        // Try to read EOF in order to get length.\n        body.read(0);\n    }\n    let contentLength = util.bodyLength(body);\n    if (contentLength === null) {\n        contentLength = request.contentLength;\n    }\n    if (contentLength === 0 && !expectsPayload) {\n        // https://tools.ietf.org/html/rfc7230#section-3.3.2\n        // A user agent SHOULD NOT send a Content-Length header field when\n        // the request message does not contain a payload body and the method\n        // semantics do not anticipate such a body.\n        contentLength = null;\n    }\n    if (request.contentLength !== null && request.contentLength !== contentLength) {\n        if (client[kStrictContentLength]) {\n            errorRequest(client, request, new RequestContentLengthMismatchError());\n            return false;\n        }\n        process.emitWarning(new RequestContentLengthMismatchError());\n    }\n    const socket = client[kSocket];\n    try {\n        request.onConnect((err)=>{\n            if (request.aborted || request.completed) {\n                return;\n            }\n            errorRequest(client, request, err || new RequestAbortedError());\n            util.destroy(socket, new InformationalError(\"aborted\"));\n        });\n    } catch (err) {\n        errorRequest(client, request, err);\n    }\n    if (request.aborted) {\n        return false;\n    }\n    if (method === \"HEAD\") {\n        // https://github.com/mcollina/undici/issues/258\n        // Close after a HEAD request to interop with misbehaving servers\n        // that may send a body in the response.\n        socket[kReset] = true;\n    }\n    if (upgrade || method === \"CONNECT\") {\n        // On CONNECT or upgrade, block pipeline from dispatching further\n        // requests on this connection.\n        socket[kReset] = true;\n    }\n    if (reset != null) {\n        socket[kReset] = reset;\n    }\n    if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {\n        socket[kReset] = true;\n    }\n    if (blocking) {\n        socket[kBlocking] = true;\n    }\n    let header = `${method} ${path} HTTP/1.1\\r\\n`;\n    if (typeof host === \"string\") {\n        header += `host: ${host}\\r\\n`;\n    } else {\n        header += client[kHostHeader];\n    }\n    if (upgrade) {\n        header += `connection: upgrade\\r\\nupgrade: ${upgrade}\\r\\n`;\n    } else if (client[kPipelining] && !socket[kReset]) {\n        header += \"connection: keep-alive\\r\\n\";\n    } else {\n        header += \"connection: close\\r\\n\";\n    }\n    if (headers) {\n        header += headers;\n    }\n    if (channels.sendHeaders.hasSubscribers) {\n        channels.sendHeaders.publish({\n            request,\n            headers: header,\n            socket\n        });\n    }\n    /* istanbul ignore else: assertion */ if (!body) {\n        if (contentLength === 0) {\n            socket.write(`${header}content-length: 0\\r\\n\\r\\n`, \"latin1\");\n        } else {\n            assert(contentLength === null, \"no body must not have content length\");\n            socket.write(`${header}\\r\\n`, \"latin1\");\n        }\n        request.onRequestSent();\n    } else if (util.isBuffer(body)) {\n        assert(contentLength === body.byteLength, \"buffer body must have content length\");\n        socket.cork();\n        socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, \"latin1\");\n        socket.write(body);\n        socket.uncork();\n        request.onBodySent(body);\n        request.onRequestSent();\n        if (!expectsPayload) {\n            socket[kReset] = true;\n        }\n    } else if (util.isBlobLike(body)) {\n        if (typeof body.stream === \"function\") {\n            writeIterable({\n                body: body.stream(),\n                client,\n                request,\n                socket,\n                contentLength,\n                header,\n                expectsPayload\n            });\n        } else {\n            writeBlob({\n                body,\n                client,\n                request,\n                socket,\n                contentLength,\n                header,\n                expectsPayload\n            });\n        }\n    } else if (util.isStream(body)) {\n        writeStream({\n            body,\n            client,\n            request,\n            socket,\n            contentLength,\n            header,\n            expectsPayload\n        });\n    } else if (util.isIterable(body)) {\n        writeIterable({\n            body,\n            client,\n            request,\n            socket,\n            contentLength,\n            header,\n            expectsPayload\n        });\n    } else {\n        assert(false);\n    }\n    return true;\n}\nfunction writeH2(client, session, request) {\n    const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;\n    let headers;\n    if (typeof reqHeaders === \"string\") headers = Request[kHTTP2CopyHeaders](reqHeaders.trim());\n    else headers = reqHeaders;\n    if (upgrade) {\n        errorRequest(client, request, new Error(\"Upgrade not supported for H2\"));\n        return false;\n    }\n    try {\n        // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?\n        request.onConnect((err)=>{\n            if (request.aborted || request.completed) {\n                return;\n            }\n            errorRequest(client, request, err || new RequestAbortedError());\n        });\n    } catch (err) {\n        errorRequest(client, request, err);\n    }\n    if (request.aborted) {\n        return false;\n    }\n    let stream;\n    const h2State = client[kHTTP2SessionState];\n    headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];\n    headers[HTTP2_HEADER_METHOD] = method;\n    if (method === \"CONNECT\") {\n        session.ref();\n        // we are already connected, streams are pending, first request\n        // will create a new stream. We trigger a request to create the stream and wait until\n        // `ready` event is triggered\n        // We disabled endStream to allow the user to write to the stream\n        stream = session.request(headers, {\n            endStream: false,\n            signal\n        });\n        if (stream.id && !stream.pending) {\n            request.onUpgrade(null, null, stream);\n            ++h2State.openStreams;\n        } else {\n            stream.once(\"ready\", ()=>{\n                request.onUpgrade(null, null, stream);\n                ++h2State.openStreams;\n            });\n        }\n        stream.once(\"close\", ()=>{\n            h2State.openStreams -= 1;\n            // TODO(HTTP/2): unref only if current streams count is 0\n            if (h2State.openStreams === 0) session.unref();\n        });\n        return true;\n    }\n    // https://tools.ietf.org/html/rfc7540#section-8.3\n    // :path and :scheme headers must be omited when sending CONNECT\n    headers[HTTP2_HEADER_PATH] = path;\n    headers[HTTP2_HEADER_SCHEME] = \"https\";\n    // https://tools.ietf.org/html/rfc7231#section-4.3.1\n    // https://tools.ietf.org/html/rfc7231#section-4.3.2\n    // https://tools.ietf.org/html/rfc7231#section-4.3.5\n    // Sending a payload body on a request that does not\n    // expect it can cause undefined behavior on some\n    // servers and corrupt connection state. Do not\n    // re-use the connection for further requests.\n    const expectsPayload = method === \"PUT\" || method === \"POST\" || method === \"PATCH\";\n    if (body && typeof body.read === \"function\") {\n        // Try to read EOF in order to get length.\n        body.read(0);\n    }\n    let contentLength = util.bodyLength(body);\n    if (contentLength == null) {\n        contentLength = request.contentLength;\n    }\n    if (contentLength === 0 || !expectsPayload) {\n        // https://tools.ietf.org/html/rfc7230#section-3.3.2\n        // A user agent SHOULD NOT send a Content-Length header field when\n        // the request message does not contain a payload body and the method\n        // semantics do not anticipate such a body.\n        contentLength = null;\n    }\n    if (request.contentLength != null && request.contentLength !== contentLength) {\n        if (client[kStrictContentLength]) {\n            errorRequest(client, request, new RequestContentLengthMismatchError());\n            return false;\n        }\n        process.emitWarning(new RequestContentLengthMismatchError());\n    }\n    if (contentLength != null) {\n        assert(body, \"no body must not have content length\");\n        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;\n    }\n    session.ref();\n    const shouldEndStream = method === \"GET\" || method === \"HEAD\";\n    if (expectContinue) {\n        headers[HTTP2_HEADER_EXPECT] = \"100-continue\";\n        /**\n     * @type {import('node:http2').ClientHttp2Stream}\n     */ stream = session.request(headers, {\n            endStream: shouldEndStream,\n            signal\n        });\n        stream.once(\"continue\", writeBodyH2);\n    } else {\n        /** @type {import('node:http2').ClientHttp2Stream} */ stream = session.request(headers, {\n            endStream: shouldEndStream,\n            signal\n        });\n        writeBodyH2();\n    }\n    // Increment counter as we have new several streams open\n    ++h2State.openStreams;\n    stream.once(\"response\", (headers)=>{\n        if (request.onHeaders(Number(headers[HTTP2_HEADER_STATUS]), headers, stream.resume.bind(stream), \"\") === false) {\n            stream.pause();\n        }\n    });\n    stream.once(\"end\", ()=>{\n        request.onComplete([]);\n    });\n    stream.on(\"data\", (chunk)=>{\n        if (request.onData(chunk) === false) stream.pause();\n    });\n    stream.once(\"close\", ()=>{\n        h2State.openStreams -= 1;\n        // TODO(HTTP/2): unref only if current streams count is 0\n        if (h2State.openStreams === 0) session.unref();\n    });\n    stream.once(\"error\", function(err) {\n        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {\n            h2State.streams -= 1;\n            util.destroy(stream, err);\n        }\n    });\n    stream.once(\"frameError\", (type, code)=>{\n        const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`);\n        errorRequest(client, request, err);\n        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {\n            h2State.streams -= 1;\n            util.destroy(stream, err);\n        }\n    });\n    // stream.on('aborted', () => {\n    //   // TODO(HTTP/2): Support aborted\n    // })\n    // stream.on('timeout', () => {\n    //   // TODO(HTTP/2): Support timeout\n    // })\n    // stream.on('push', headers => {\n    //   // TODO(HTTP/2): Suppor push\n    // })\n    // stream.on('trailers', headers => {\n    //   // TODO(HTTP/2): Support trailers\n    // })\n    return true;\n    function writeBodyH2() {\n        /* istanbul ignore else: assertion */ if (!body) {\n            request.onRequestSent();\n        } else if (util.isBuffer(body)) {\n            assert(contentLength === body.byteLength, \"buffer body must have content length\");\n            stream.cork();\n            stream.write(body);\n            stream.uncork();\n            stream.end();\n            request.onBodySent(body);\n            request.onRequestSent();\n        } else if (util.isBlobLike(body)) {\n            if (typeof body.stream === \"function\") {\n                writeIterable({\n                    client,\n                    request,\n                    contentLength,\n                    h2stream: stream,\n                    expectsPayload,\n                    body: body.stream(),\n                    socket: client[kSocket],\n                    header: \"\"\n                });\n            } else {\n                writeBlob({\n                    body,\n                    client,\n                    request,\n                    contentLength,\n                    expectsPayload,\n                    h2stream: stream,\n                    header: \"\",\n                    socket: client[kSocket]\n                });\n            }\n        } else if (util.isStream(body)) {\n            writeStream({\n                body,\n                client,\n                request,\n                contentLength,\n                expectsPayload,\n                socket: client[kSocket],\n                h2stream: stream,\n                header: \"\"\n            });\n        } else if (util.isIterable(body)) {\n            writeIterable({\n                body,\n                client,\n                request,\n                contentLength,\n                expectsPayload,\n                header: \"\",\n                h2stream: stream,\n                socket: client[kSocket]\n            });\n        } else {\n            assert(false);\n        }\n    }\n}\nfunction writeStream({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n    assert(contentLength !== 0 || client[kRunning] === 0, \"stream body cannot be pipelined\");\n    if (client[kHTTPConnVersion] === \"h2\") {\n        // For HTTP/2, is enough to pipe the stream\n        const pipe = pipeline(body, h2stream, (err)=>{\n            if (err) {\n                util.destroy(body, err);\n                util.destroy(h2stream, err);\n            } else {\n                request.onRequestSent();\n            }\n        });\n        pipe.on(\"data\", onPipeData);\n        pipe.once(\"end\", ()=>{\n            pipe.removeListener(\"data\", onPipeData);\n            util.destroy(pipe);\n        });\n        function onPipeData(chunk) {\n            request.onBodySent(chunk);\n        }\n        return;\n    }\n    let finished = false;\n    const writer = new AsyncWriter({\n        socket,\n        request,\n        contentLength,\n        client,\n        expectsPayload,\n        header\n    });\n    const onData = function(chunk) {\n        if (finished) {\n            return;\n        }\n        try {\n            if (!writer.write(chunk) && this.pause) {\n                this.pause();\n            }\n        } catch (err) {\n            util.destroy(this, err);\n        }\n    };\n    const onDrain = function() {\n        if (finished) {\n            return;\n        }\n        if (body.resume) {\n            body.resume();\n        }\n    };\n    const onAbort = function() {\n        onFinished(new RequestAbortedError());\n    };\n    const onFinished = function(err) {\n        if (finished) {\n            return;\n        }\n        finished = true;\n        assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);\n        socket.off(\"drain\", onDrain).off(\"error\", onFinished);\n        body.removeListener(\"data\", onData).removeListener(\"end\", onFinished).removeListener(\"error\", onFinished).removeListener(\"close\", onAbort);\n        if (!err) {\n            try {\n                writer.end();\n            } catch (er) {\n                err = er;\n            }\n        }\n        writer.destroy(err);\n        if (err && (err.code !== \"UND_ERR_INFO\" || err.message !== \"reset\")) {\n            util.destroy(body, err);\n        } else {\n            util.destroy(body);\n        }\n    };\n    body.on(\"data\", onData).on(\"end\", onFinished).on(\"error\", onFinished).on(\"close\", onAbort);\n    if (body.resume) {\n        body.resume();\n    }\n    socket.on(\"drain\", onDrain).on(\"error\", onFinished);\n}\nasync function writeBlob({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n    assert(contentLength === body.size, \"blob body must have content length\");\n    const isH2 = client[kHTTPConnVersion] === \"h2\";\n    try {\n        if (contentLength != null && contentLength !== body.size) {\n            throw new RequestContentLengthMismatchError();\n        }\n        const buffer = Buffer.from(await body.arrayBuffer());\n        if (isH2) {\n            h2stream.cork();\n            h2stream.write(buffer);\n            h2stream.uncork();\n        } else {\n            socket.cork();\n            socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, \"latin1\");\n            socket.write(buffer);\n            socket.uncork();\n        }\n        request.onBodySent(buffer);\n        request.onRequestSent();\n        if (!expectsPayload) {\n            socket[kReset] = true;\n        }\n        resume(client);\n    } catch (err) {\n        util.destroy(isH2 ? h2stream : socket, err);\n    }\n}\nasync function writeIterable({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n    assert(contentLength !== 0 || client[kRunning] === 0, \"iterator body cannot be pipelined\");\n    let callback = null;\n    function onDrain() {\n        if (callback) {\n            const cb = callback;\n            callback = null;\n            cb();\n        }\n    }\n    const waitForDrain = ()=>new Promise((resolve, reject)=>{\n            assert(callback === null);\n            if (socket[kError]) {\n                reject(socket[kError]);\n            } else {\n                callback = resolve;\n            }\n        });\n    if (client[kHTTPConnVersion] === \"h2\") {\n        h2stream.on(\"close\", onDrain).on(\"drain\", onDrain);\n        try {\n            // It's up to the user to somehow abort the async iterable.\n            for await (const chunk of body){\n                if (socket[kError]) {\n                    throw socket[kError];\n                }\n                const res = h2stream.write(chunk);\n                request.onBodySent(chunk);\n                if (!res) {\n                    await waitForDrain();\n                }\n            }\n        } catch (err) {\n            h2stream.destroy(err);\n        } finally{\n            request.onRequestSent();\n            h2stream.end();\n            h2stream.off(\"close\", onDrain).off(\"drain\", onDrain);\n        }\n        return;\n    }\n    socket.on(\"close\", onDrain).on(\"drain\", onDrain);\n    const writer = new AsyncWriter({\n        socket,\n        request,\n        contentLength,\n        client,\n        expectsPayload,\n        header\n    });\n    try {\n        // It's up to the user to somehow abort the async iterable.\n        for await (const chunk of body){\n            if (socket[kError]) {\n                throw socket[kError];\n            }\n            if (!writer.write(chunk)) {\n                await waitForDrain();\n            }\n        }\n        writer.end();\n    } catch (err) {\n        writer.destroy(err);\n    } finally{\n        socket.off(\"close\", onDrain).off(\"drain\", onDrain);\n    }\n}\nclass AsyncWriter {\n    constructor({ socket, request, contentLength, client, expectsPayload, header }){\n        this.socket = socket;\n        this.request = request;\n        this.contentLength = contentLength;\n        this.client = client;\n        this.bytesWritten = 0;\n        this.expectsPayload = expectsPayload;\n        this.header = header;\n        socket[kWriting] = true;\n    }\n    write(chunk) {\n        const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;\n        if (socket[kError]) {\n            throw socket[kError];\n        }\n        if (socket.destroyed) {\n            return false;\n        }\n        const len = Buffer.byteLength(chunk);\n        if (!len) {\n            return true;\n        }\n        // We should defer writing chunks.\n        if (contentLength !== null && bytesWritten + len > contentLength) {\n            if (client[kStrictContentLength]) {\n                throw new RequestContentLengthMismatchError();\n            }\n            process.emitWarning(new RequestContentLengthMismatchError());\n        }\n        socket.cork();\n        if (bytesWritten === 0) {\n            if (!expectsPayload) {\n                socket[kReset] = true;\n            }\n            if (contentLength === null) {\n                socket.write(`${header}transfer-encoding: chunked\\r\\n`, \"latin1\");\n            } else {\n                socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, \"latin1\");\n            }\n        }\n        if (contentLength === null) {\n            socket.write(`\\r\\n${len.toString(16)}\\r\\n`, \"latin1\");\n        }\n        this.bytesWritten += len;\n        const ret = socket.write(chunk);\n        socket.uncork();\n        request.onBodySent(chunk);\n        if (!ret) {\n            if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n                // istanbul ignore else: only for jest\n                if (socket[kParser].timeout.refresh) {\n                    socket[kParser].timeout.refresh();\n                }\n            }\n        }\n        return ret;\n    }\n    end() {\n        const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;\n        request.onRequestSent();\n        socket[kWriting] = false;\n        if (socket[kError]) {\n            throw socket[kError];\n        }\n        if (socket.destroyed) {\n            return;\n        }\n        if (bytesWritten === 0) {\n            if (expectsPayload) {\n                // https://tools.ietf.org/html/rfc7230#section-3.3.2\n                // A user agent SHOULD send a Content-Length in a request message when\n                // no Transfer-Encoding is sent and the request method defines a meaning\n                // for an enclosed payload body.\n                socket.write(`${header}content-length: 0\\r\\n\\r\\n`, \"latin1\");\n            } else {\n                socket.write(`${header}\\r\\n`, \"latin1\");\n            }\n        } else if (contentLength === null) {\n            socket.write(\"\\r\\n0\\r\\n\\r\\n\", \"latin1\");\n        }\n        if (contentLength !== null && bytesWritten !== contentLength) {\n            if (client[kStrictContentLength]) {\n                throw new RequestContentLengthMismatchError();\n            } else {\n                process.emitWarning(new RequestContentLengthMismatchError());\n            }\n        }\n        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n            // istanbul ignore else: only for jest\n            if (socket[kParser].timeout.refresh) {\n                socket[kParser].timeout.refresh();\n            }\n        }\n        resume(client);\n    }\n    destroy(err) {\n        const { socket, client } = this;\n        socket[kWriting] = false;\n        if (err) {\n            assert(client[kRunning] <= 1, \"pipeline should only contain this request\");\n            util.destroy(socket, err);\n        }\n    }\n}\nfunction errorRequest(client, request, err) {\n    try {\n        request.onError(err);\n        assert(request.aborted);\n    } catch (err) {\n        client.emit(\"error\", err);\n    }\n}\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/compat/dispatcher-weakref.js":
/*!**************************************************************!*\
  !*** ./node_modules/undici/lib/compat/dispatcher-weakref.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/* istanbul ignore file: only for Node 12 */ const { kConnected, kSize } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nclass CompatWeakRef {\n    constructor(value){\n        this.value = value;\n    }\n    deref() {\n        return this.value[kConnected] === 0 && this.value[kSize] === 0 ? undefined : this.value;\n    }\n}\nclass CompatFinalizer {\n    constructor(finalizer){\n        this.finalizer = finalizer;\n    }\n    register(dispatcher, key) {\n        if (dispatcher.on) {\n            dispatcher.on(\"disconnect\", ()=>{\n                if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {\n                    this.finalizer(key);\n                }\n            });\n        }\n    }\n}\nmodule.exports = function() {\n    // FIXME: remove workaround when the Node bug is fixed\n    // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\n    if (process.env.NODE_V8_COVERAGE) {\n        return {\n            WeakRef: CompatWeakRef,\n            FinalizationRegistry: CompatFinalizer\n        };\n    }\n    return {\n        WeakRef: global.WeakRef || CompatWeakRef,\n        FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb21wYXQvZGlzcGF0Y2hlci13ZWFrcmVmLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsMENBQTBDLEdBRTFDLE1BQU0sRUFBRUEsVUFBVSxFQUFFQyxLQUFLLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFdEMsTUFBTUM7SUFDSkMsWUFBYUMsS0FBSyxDQUFFO1FBQ2xCLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtJQUNmO0lBRUFDLFFBQVM7UUFDUCxPQUFPLElBQUksQ0FBQ0QsS0FBSyxDQUFDTCxXQUFXLEtBQUssS0FBSyxJQUFJLENBQUNLLEtBQUssQ0FBQ0osTUFBTSxLQUFLLElBQ3pETSxZQUNBLElBQUksQ0FBQ0YsS0FBSztJQUNoQjtBQUNGO0FBRUEsTUFBTUc7SUFDSkosWUFBYUssU0FBUyxDQUFFO1FBQ3RCLElBQUksQ0FBQ0EsU0FBUyxHQUFHQTtJQUNuQjtJQUVBQyxTQUFVQyxVQUFVLEVBQUVDLEdBQUcsRUFBRTtRQUN6QixJQUFJRCxXQUFXRSxFQUFFLEVBQUU7WUFDakJGLFdBQVdFLEVBQUUsQ0FBQyxjQUFjO2dCQUMxQixJQUFJRixVQUFVLENBQUNYLFdBQVcsS0FBSyxLQUFLVyxVQUFVLENBQUNWLE1BQU0sS0FBSyxHQUFHO29CQUMzRCxJQUFJLENBQUNRLFNBQVMsQ0FBQ0c7Z0JBQ2pCO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFQUUsT0FBT0MsT0FBTyxHQUFHO0lBQ2Ysc0RBQXNEO0lBQ3RELHNFQUFzRTtJQUN0RSxJQUFJQyxRQUFRQyxHQUFHLENBQUNDLGdCQUFnQixFQUFFO1FBQ2hDLE9BQU87WUFDTEMsU0FBU2hCO1lBQ1RpQixzQkFBc0JaO1FBQ3hCO0lBQ0Y7SUFDQSxPQUFPO1FBQ0xXLFNBQVNFLE9BQU9GLE9BQU8sSUFBSWhCO1FBQzNCaUIsc0JBQXNCQyxPQUFPRCxvQkFBb0IsSUFBSVo7SUFDdkQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2NvbXBhdC9kaXNwYXRjaGVyLXdlYWtyZWYuanM/YjU0OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IG9ubHkgZm9yIE5vZGUgMTIgKi9cblxuY29uc3QgeyBrQ29ubmVjdGVkLCBrU2l6ZSB9ID0gcmVxdWlyZSgnLi4vY29yZS9zeW1ib2xzJylcblxuY2xhc3MgQ29tcGF0V2Vha1JlZiB7XG4gIGNvbnN0cnVjdG9yICh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICB9XG5cbiAgZGVyZWYgKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlW2tDb25uZWN0ZWRdID09PSAwICYmIHRoaXMudmFsdWVba1NpemVdID09PSAwXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiB0aGlzLnZhbHVlXG4gIH1cbn1cblxuY2xhc3MgQ29tcGF0RmluYWxpemVyIHtcbiAgY29uc3RydWN0b3IgKGZpbmFsaXplcikge1xuICAgIHRoaXMuZmluYWxpemVyID0gZmluYWxpemVyXG4gIH1cblxuICByZWdpc3RlciAoZGlzcGF0Y2hlciwga2V5KSB7XG4gICAgaWYgKGRpc3BhdGNoZXIub24pIHtcbiAgICAgIGRpc3BhdGNoZXIub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICAgIGlmIChkaXNwYXRjaGVyW2tDb25uZWN0ZWRdID09PSAwICYmIGRpc3BhdGNoZXJba1NpemVdID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5maW5hbGl6ZXIoa2V5KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gRklYTUU6IHJlbW92ZSB3b3JrYXJvdW5kIHdoZW4gdGhlIE5vZGUgYnVnIGlzIGZpeGVkXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvNDkzNDQjaXNzdWVjb21tZW50LTE3NDE3NzYzMDhcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfVjhfQ09WRVJBR0UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgV2Vha1JlZjogQ29tcGF0V2Vha1JlZixcbiAgICAgIEZpbmFsaXphdGlvblJlZ2lzdHJ5OiBDb21wYXRGaW5hbGl6ZXJcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBXZWFrUmVmOiBnbG9iYWwuV2Vha1JlZiB8fCBDb21wYXRXZWFrUmVmLFxuICAgIEZpbmFsaXphdGlvblJlZ2lzdHJ5OiBnbG9iYWwuRmluYWxpemF0aW9uUmVnaXN0cnkgfHwgQ29tcGF0RmluYWxpemVyXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJrQ29ubmVjdGVkIiwia1NpemUiLCJyZXF1aXJlIiwiQ29tcGF0V2Vha1JlZiIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJkZXJlZiIsInVuZGVmaW5lZCIsIkNvbXBhdEZpbmFsaXplciIsImZpbmFsaXplciIsInJlZ2lzdGVyIiwiZGlzcGF0Y2hlciIsImtleSIsIm9uIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX1Y4X0NPVkVSQUdFIiwiV2Vha1JlZiIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiZ2xvYmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/compat/dispatcher-weakref.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/cookies/constants.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/cookies/constants.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\n// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size\nconst maxAttributeValueSize = 1024;\n// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size\nconst maxNameValuePairSize = 4096;\nmodule.exports = {\n    maxAttributeValueSize,\n    maxNameValuePairSize\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb29raWVzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLDJFQUEyRTtBQUMzRSxNQUFNQSx3QkFBd0I7QUFFOUIsMkVBQTJFO0FBQzNFLE1BQU1DLHVCQUF1QjtBQUU3QkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZIO0lBQ0FDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb29raWVzL2NvbnN0YW50cy5qcz85OTU1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vLyBodHRwczovL3dpY2cuZ2l0aHViLmlvL2Nvb2tpZS1zdG9yZS8jY29va2llLW1heGltdW0tYXR0cmlidXRlLXZhbHVlLXNpemVcbmNvbnN0IG1heEF0dHJpYnV0ZVZhbHVlU2l6ZSA9IDEwMjRcblxuLy8gaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb29raWUtc3RvcmUvI2Nvb2tpZS1tYXhpbXVtLW5hbWUtdmFsdWUtcGFpci1zaXplXG5jb25zdCBtYXhOYW1lVmFsdWVQYWlyU2l6ZSA9IDQwOTZcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1heEF0dHJpYnV0ZVZhbHVlU2l6ZSxcbiAgbWF4TmFtZVZhbHVlUGFpclNpemVcbn1cbiJdLCJuYW1lcyI6WyJtYXhBdHRyaWJ1dGVWYWx1ZVNpemUiLCJtYXhOYW1lVmFsdWVQYWlyU2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/cookies/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/cookies/index.js":
/*!**************************************************!*\
  !*** ./node_modules/undici/lib/cookies/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { parseSetCookie } = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/undici/lib/cookies/parse.js\");\nconst { stringify, getHeadersList } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/cookies/util.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { Headers } = __webpack_require__(/*! ../fetch/headers */ \"(ssr)/./node_modules/undici/lib/fetch/headers.js\");\n/**\n * @typedef {Object} Cookie\n * @property {string} name\n * @property {string} value\n * @property {Date|number|undefined} expires\n * @property {number|undefined} maxAge\n * @property {string|undefined} domain\n * @property {string|undefined} path\n * @property {boolean|undefined} secure\n * @property {boolean|undefined} httpOnly\n * @property {'Strict'|'Lax'|'None'} sameSite\n * @property {string[]} unparsed\n */ /**\n * @param {Headers} headers\n * @returns {Record<string, string>}\n */ function getCookies(headers) {\n    webidl.argumentLengthCheck(arguments, 1, {\n        header: \"getCookies\"\n    });\n    webidl.brandCheck(headers, Headers, {\n        strict: false\n    });\n    const cookie = headers.get(\"cookie\");\n    const out = {};\n    if (!cookie) {\n        return out;\n    }\n    for (const piece of cookie.split(\";\")){\n        const [name, ...value] = piece.split(\"=\");\n        out[name.trim()] = value.join(\"=\");\n    }\n    return out;\n}\n/**\n * @param {Headers} headers\n * @param {string} name\n * @param {{ path?: string, domain?: string }|undefined} attributes\n * @returns {void}\n */ function deleteCookie(headers, name, attributes) {\n    webidl.argumentLengthCheck(arguments, 2, {\n        header: \"deleteCookie\"\n    });\n    webidl.brandCheck(headers, Headers, {\n        strict: false\n    });\n    name = webidl.converters.DOMString(name);\n    attributes = webidl.converters.DeleteCookieAttributes(attributes);\n    // Matches behavior of\n    // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278\n    setCookie(headers, {\n        name,\n        value: \"\",\n        expires: new Date(0),\n        ...attributes\n    });\n}\n/**\n * @param {Headers} headers\n * @returns {Cookie[]}\n */ function getSetCookies(headers) {\n    webidl.argumentLengthCheck(arguments, 1, {\n        header: \"getSetCookies\"\n    });\n    webidl.brandCheck(headers, Headers, {\n        strict: false\n    });\n    const cookies = getHeadersList(headers).cookies;\n    if (!cookies) {\n        return [];\n    }\n    // In older versions of undici, cookies is a list of name:value.\n    return cookies.map((pair)=>parseSetCookie(Array.isArray(pair) ? pair[1] : pair));\n}\n/**\n * @param {Headers} headers\n * @param {Cookie} cookie\n * @returns {void}\n */ function setCookie(headers, cookie) {\n    webidl.argumentLengthCheck(arguments, 2, {\n        header: \"setCookie\"\n    });\n    webidl.brandCheck(headers, Headers, {\n        strict: false\n    });\n    cookie = webidl.converters.Cookie(cookie);\n    const str = stringify(cookie);\n    if (str) {\n        headers.append(\"Set-Cookie\", stringify(cookie));\n    }\n}\nwebidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([\n    {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: \"path\",\n        defaultValue: null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: \"domain\",\n        defaultValue: null\n    }\n]);\nwebidl.converters.Cookie = webidl.dictionaryConverter([\n    {\n        converter: webidl.converters.DOMString,\n        key: \"name\"\n    },\n    {\n        converter: webidl.converters.DOMString,\n        key: \"value\"\n    },\n    {\n        converter: webidl.nullableConverter((value)=>{\n            if (typeof value === \"number\") {\n                return webidl.converters[\"unsigned long long\"](value);\n            }\n            return new Date(value);\n        }),\n        key: \"expires\",\n        defaultValue: null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters[\"long long\"]),\n        key: \"maxAge\",\n        defaultValue: null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: \"domain\",\n        defaultValue: null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: \"path\",\n        defaultValue: null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.boolean),\n        key: \"secure\",\n        defaultValue: null\n    },\n    {\n        converter: webidl.nullableConverter(webidl.converters.boolean),\n        key: \"httpOnly\",\n        defaultValue: null\n    },\n    {\n        converter: webidl.converters.USVString,\n        key: \"sameSite\",\n        allowedValues: [\n            \"Strict\",\n            \"Lax\",\n            \"None\"\n        ]\n    },\n    {\n        converter: webidl.sequenceConverter(webidl.converters.DOMString),\n        key: \"unparsed\",\n        defaultValue: []\n    }\n]);\nmodule.exports = {\n    getCookies,\n    deleteCookie,\n    getSetCookies,\n    setCookie\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/cookies/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/cookies/parse.js":
/*!**************************************************!*\
  !*** ./node_modules/undici/lib/cookies/parse.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { maxNameValuePairSize, maxAttributeValueSize } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/cookies/constants.js\");\nconst { isCTLExcludingHtab } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/cookies/util.js\");\nconst { collectASequenceOfCodePointsFast } = __webpack_require__(/*! ../fetch/dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\n/**\n * @description Parses the field-value attributes of a set-cookie header string.\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} header\n * @returns if the header is invalid, null will be returned\n */ function parseSetCookie(header) {\n    // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F\n    //    character (CTL characters excluding HTAB): Abort these steps and\n    //    ignore the set-cookie-string entirely.\n    if (isCTLExcludingHtab(header)) {\n        return null;\n    }\n    let nameValuePair = \"\";\n    let unparsedAttributes = \"\";\n    let name = \"\";\n    let value = \"\";\n    // 2. If the set-cookie-string contains a %x3B (\";\") character:\n    if (header.includes(\";\")) {\n        // 1. The name-value-pair string consists of the characters up to,\n        //    but not including, the first %x3B (\";\"), and the unparsed-\n        //    attributes consist of the remainder of the set-cookie-string\n        //    (including the %x3B (\";\") in question).\n        const position = {\n            position: 0\n        };\n        nameValuePair = collectASequenceOfCodePointsFast(\";\", header, position);\n        unparsedAttributes = header.slice(position.position);\n    } else {\n        // Otherwise:\n        // 1. The name-value-pair string consists of all the characters\n        //    contained in the set-cookie-string, and the unparsed-\n        //    attributes is the empty string.\n        nameValuePair = header;\n    }\n    // 3. If the name-value-pair string lacks a %x3D (\"=\") character, then\n    //    the name string is empty, and the value string is the value of\n    //    name-value-pair.\n    if (!nameValuePair.includes(\"=\")) {\n        value = nameValuePair;\n    } else {\n        //    Otherwise, the name string consists of the characters up to, but\n        //    not including, the first %x3D (\"=\") character, and the (possibly\n        //    empty) value string consists of the characters after the first\n        //    %x3D (\"=\") character.\n        const position = {\n            position: 0\n        };\n        name = collectASequenceOfCodePointsFast(\"=\", nameValuePair, position);\n        value = nameValuePair.slice(position.position + 1);\n    }\n    // 4. Remove any leading or trailing WSP characters from the name\n    //    string and the value string.\n    name = name.trim();\n    value = value.trim();\n    // 5. If the sum of the lengths of the name string and the value string\n    //    is more than 4096 octets, abort these steps and ignore the set-\n    //    cookie-string entirely.\n    if (name.length + value.length > maxNameValuePairSize) {\n        return null;\n    }\n    // 6. The cookie-name is the name string, and the cookie-value is the\n    //    value string.\n    return {\n        name,\n        value,\n        ...parseUnparsedAttributes(unparsedAttributes)\n    };\n}\n/**\n * Parses the remaining attributes of a set-cookie header\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} unparsedAttributes\n * @param {[Object.<string, unknown>]={}} cookieAttributeList\n */ function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {\n    // 1. If the unparsed-attributes string is empty, skip the rest of\n    //    these steps.\n    if (unparsedAttributes.length === 0) {\n        return cookieAttributeList;\n    }\n    // 2. Discard the first character of the unparsed-attributes (which\n    //    will be a %x3B (\";\") character).\n    assert(unparsedAttributes[0] === \";\");\n    unparsedAttributes = unparsedAttributes.slice(1);\n    let cookieAv = \"\";\n    // 3. If the remaining unparsed-attributes contains a %x3B (\";\")\n    //    character:\n    if (unparsedAttributes.includes(\";\")) {\n        // 1. Consume the characters of the unparsed-attributes up to, but\n        //    not including, the first %x3B (\";\") character.\n        cookieAv = collectASequenceOfCodePointsFast(\";\", unparsedAttributes, {\n            position: 0\n        });\n        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);\n    } else {\n        // Otherwise:\n        // 1. Consume the remainder of the unparsed-attributes.\n        cookieAv = unparsedAttributes;\n        unparsedAttributes = \"\";\n    }\n    // Let the cookie-av string be the characters consumed in this step.\n    let attributeName = \"\";\n    let attributeValue = \"\";\n    // 4. If the cookie-av string contains a %x3D (\"=\") character:\n    if (cookieAv.includes(\"=\")) {\n        // 1. The (possibly empty) attribute-name string consists of the\n        //    characters up to, but not including, the first %x3D (\"=\")\n        //    character, and the (possibly empty) attribute-value string\n        //    consists of the characters after the first %x3D (\"=\")\n        //    character.\n        const position = {\n            position: 0\n        };\n        attributeName = collectASequenceOfCodePointsFast(\"=\", cookieAv, position);\n        attributeValue = cookieAv.slice(position.position + 1);\n    } else {\n        // Otherwise:\n        // 1. The attribute-name string consists of the entire cookie-av\n        //    string, and the attribute-value string is empty.\n        attributeName = cookieAv;\n    }\n    // 5. Remove any leading or trailing WSP characters from the attribute-\n    //    name string and the attribute-value string.\n    attributeName = attributeName.trim();\n    attributeValue = attributeValue.trim();\n    // 6. If the attribute-value is longer than 1024 octets, ignore the\n    //    cookie-av string and return to Step 1 of this algorithm.\n    if (attributeValue.length > maxAttributeValueSize) {\n        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n    }\n    // 7. Process the attribute-name and attribute-value according to the\n    //    requirements in the following subsections.  (Notice that\n    //    attributes with unrecognized attribute-names are ignored.)\n    const attributeNameLowercase = attributeName.toLowerCase();\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1\n    // If the attribute-name case-insensitively matches the string\n    // \"Expires\", the user agent MUST process the cookie-av as follows.\n    if (attributeNameLowercase === \"expires\") {\n        // 1. Let the expiry-time be the result of parsing the attribute-value\n        //    as cookie-date (see Section 5.1.1).\n        const expiryTime = new Date(attributeValue);\n        // 2. If the attribute-value failed to parse as a cookie date, ignore\n        //    the cookie-av.\n        cookieAttributeList.expires = expiryTime;\n    } else if (attributeNameLowercase === \"max-age\") {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2\n        // If the attribute-name case-insensitively matches the string \"Max-\n        // Age\", the user agent MUST process the cookie-av as follows.\n        // 1. If the first character of the attribute-value is not a DIGIT or a\n        //    \"-\" character, ignore the cookie-av.\n        const charCode = attributeValue.charCodeAt(0);\n        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== \"-\") {\n            return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n        }\n        // 2. If the remainder of attribute-value contains a non-DIGIT\n        //    character, ignore the cookie-av.\n        if (!/^\\d+$/.test(attributeValue)) {\n            return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n        }\n        // 3. Let delta-seconds be the attribute-value converted to an integer.\n        const deltaSeconds = Number(attributeValue);\n        // 4. Let cookie-age-limit be the maximum age of the cookie (which\n        //    SHOULD be 400 days or less, see Section 4.1.2.2).\n        // 5. Set delta-seconds to the smaller of its present value and cookie-\n        //    age-limit.\n        // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)\n        // 6. If delta-seconds is less than or equal to zero (0), let expiry-\n        //    time be the earliest representable date and time.  Otherwise, let\n        //    the expiry-time be the current date and time plus delta-seconds\n        //    seconds.\n        // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds\n        // 7. Append an attribute to the cookie-attribute-list with an\n        //    attribute-name of Max-Age and an attribute-value of expiry-time.\n        cookieAttributeList.maxAge = deltaSeconds;\n    } else if (attributeNameLowercase === \"domain\") {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3\n        // If the attribute-name case-insensitively matches the string \"Domain\",\n        // the user agent MUST process the cookie-av as follows.\n        // 1. Let cookie-domain be the attribute-value.\n        let cookieDomain = attributeValue;\n        // 2. If cookie-domain starts with %x2E (\".\"), let cookie-domain be\n        //    cookie-domain without its leading %x2E (\".\").\n        if (cookieDomain[0] === \".\") {\n            cookieDomain = cookieDomain.slice(1);\n        }\n        // 3. Convert the cookie-domain to lower case.\n        cookieDomain = cookieDomain.toLowerCase();\n        // 4. Append an attribute to the cookie-attribute-list with an\n        //    attribute-name of Domain and an attribute-value of cookie-domain.\n        cookieAttributeList.domain = cookieDomain;\n    } else if (attributeNameLowercase === \"path\") {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4\n        // If the attribute-name case-insensitively matches the string \"Path\",\n        // the user agent MUST process the cookie-av as follows.\n        // 1. If the attribute-value is empty or if the first character of the\n        //    attribute-value is not %x2F (\"/\"):\n        let cookiePath = \"\";\n        if (attributeValue.length === 0 || attributeValue[0] !== \"/\") {\n            // 1. Let cookie-path be the default-path.\n            cookiePath = \"/\";\n        } else {\n            // Otherwise:\n            // 1. Let cookie-path be the attribute-value.\n            cookiePath = attributeValue;\n        }\n        // 2. Append an attribute to the cookie-attribute-list with an\n        //    attribute-name of Path and an attribute-value of cookie-path.\n        cookieAttributeList.path = cookiePath;\n    } else if (attributeNameLowercase === \"secure\") {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5\n        // If the attribute-name case-insensitively matches the string \"Secure\",\n        // the user agent MUST append an attribute to the cookie-attribute-list\n        // with an attribute-name of Secure and an empty attribute-value.\n        cookieAttributeList.secure = true;\n    } else if (attributeNameLowercase === \"httponly\") {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6\n        // If the attribute-name case-insensitively matches the string\n        // \"HttpOnly\", the user agent MUST append an attribute to the cookie-\n        // attribute-list with an attribute-name of HttpOnly and an empty\n        // attribute-value.\n        cookieAttributeList.httpOnly = true;\n    } else if (attributeNameLowercase === \"samesite\") {\n        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7\n        // If the attribute-name case-insensitively matches the string\n        // \"SameSite\", the user agent MUST process the cookie-av as follows:\n        // 1. Let enforcement be \"Default\".\n        let enforcement = \"Default\";\n        const attributeValueLowercase = attributeValue.toLowerCase();\n        // 2. If cookie-av's attribute-value is a case-insensitive match for\n        //    \"None\", set enforcement to \"None\".\n        if (attributeValueLowercase.includes(\"none\")) {\n            enforcement = \"None\";\n        }\n        // 3. If cookie-av's attribute-value is a case-insensitive match for\n        //    \"Strict\", set enforcement to \"Strict\".\n        if (attributeValueLowercase.includes(\"strict\")) {\n            enforcement = \"Strict\";\n        }\n        // 4. If cookie-av's attribute-value is a case-insensitive match for\n        //    \"Lax\", set enforcement to \"Lax\".\n        if (attributeValueLowercase.includes(\"lax\")) {\n            enforcement = \"Lax\";\n        }\n        // 5. Append an attribute to the cookie-attribute-list with an\n        //    attribute-name of \"SameSite\" and an attribute-value of\n        //    enforcement.\n        cookieAttributeList.sameSite = enforcement;\n    } else {\n        cookieAttributeList.unparsed ??= [];\n        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);\n    }\n    // 8. Return to Step 1 of this algorithm.\n    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n}\nmodule.exports = {\n    parseSetCookie,\n    parseUnparsedAttributes\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/cookies/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/cookies/util.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/cookies/util.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { kHeadersList } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nfunction isCTLExcludingHtab(value) {\n    if (value.length === 0) {\n        return false;\n    }\n    for (const char of value){\n        const code = char.charCodeAt(0);\n        if (code >= 0x00 || code <= 0x08 || code >= 0x0A || code <= 0x1F || code === 0x7F) {\n            return false;\n        }\n    }\n}\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */ function validateCookieName(name) {\n    for (const char of name){\n        const code = char.charCodeAt(0);\n        if (code <= 0x20 || code > 0x7F || char === \"(\" || char === \")\" || char === \">\" || char === \"<\" || char === \"@\" || char === \",\" || char === \";\" || char === \":\" || char === \"\\\\\" || char === '\"' || char === \"/\" || char === \"[\" || char === \"]\" || char === \"?\" || char === \"=\" || char === \"{\" || char === \"}\") {\n            throw new Error(\"Invalid cookie name\");\n        }\n    }\n}\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */ function validateCookieValue(value) {\n    for (const char of value){\n        const code = char.charCodeAt(0);\n        if (code < 0x21 || // exclude CTLs (0-31)\n        code === 0x22 || code === 0x2C || code === 0x3B || code === 0x5C || code > 0x7E // non-ascii\n        ) {\n            throw new Error(\"Invalid header value\");\n        }\n    }\n}\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */ function validateCookiePath(path) {\n    for (const char of path){\n        const code = char.charCodeAt(0);\n        if (code < 0x21 || char === \";\") {\n            throw new Error(\"Invalid cookie path\");\n        }\n    }\n}\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */ function validateCookieDomain(domain) {\n    if (domain.startsWith(\"-\") || domain.endsWith(\".\") || domain.endsWith(\"-\")) {\n        throw new Error(\"Invalid cookie domain\");\n    }\n}\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */ function toIMFDate(date) {\n    if (typeof date === \"number\") {\n        date = new Date(date);\n    }\n    const days = [\n        \"Sun\",\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thu\",\n        \"Fri\",\n        \"Sat\"\n    ];\n    const months = [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ];\n    const dayName = days[date.getUTCDay()];\n    const day = date.getUTCDate().toString().padStart(2, \"0\");\n    const month = months[date.getUTCMonth()];\n    const year = date.getUTCFullYear();\n    const hour = date.getUTCHours().toString().padStart(2, \"0\");\n    const minute = date.getUTCMinutes().toString().padStart(2, \"0\");\n    const second = date.getUTCSeconds().toString().padStart(2, \"0\");\n    return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;\n}\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */ function validateCookieMaxAge(maxAge) {\n    if (maxAge < 0) {\n        throw new Error(\"Invalid cookie max-age\");\n    }\n}\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */ function stringify(cookie) {\n    if (cookie.name.length === 0) {\n        return null;\n    }\n    validateCookieName(cookie.name);\n    validateCookieValue(cookie.value);\n    const out = [\n        `${cookie.name}=${cookie.value}`\n    ];\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n    if (cookie.name.startsWith(\"__Secure-\")) {\n        cookie.secure = true;\n    }\n    if (cookie.name.startsWith(\"__Host-\")) {\n        cookie.secure = true;\n        cookie.domain = null;\n        cookie.path = \"/\";\n    }\n    if (cookie.secure) {\n        out.push(\"Secure\");\n    }\n    if (cookie.httpOnly) {\n        out.push(\"HttpOnly\");\n    }\n    if (typeof cookie.maxAge === \"number\") {\n        validateCookieMaxAge(cookie.maxAge);\n        out.push(`Max-Age=${cookie.maxAge}`);\n    }\n    if (cookie.domain) {\n        validateCookieDomain(cookie.domain);\n        out.push(`Domain=${cookie.domain}`);\n    }\n    if (cookie.path) {\n        validateCookiePath(cookie.path);\n        out.push(`Path=${cookie.path}`);\n    }\n    if (cookie.expires && cookie.expires.toString() !== \"Invalid Date\") {\n        out.push(`Expires=${toIMFDate(cookie.expires)}`);\n    }\n    if (cookie.sameSite) {\n        out.push(`SameSite=${cookie.sameSite}`);\n    }\n    for (const part of cookie.unparsed){\n        if (!part.includes(\"=\")) {\n            throw new Error(\"Invalid unparsed\");\n        }\n        const [key, ...value] = part.split(\"=\");\n        out.push(`${key.trim()}=${value.join(\"=\")}`);\n    }\n    return out.join(\"; \");\n}\nlet kHeadersListNode;\nfunction getHeadersList(headers) {\n    if (headers[kHeadersList]) {\n        return headers[kHeadersList];\n    }\n    if (!kHeadersListNode) {\n        kHeadersListNode = Object.getOwnPropertySymbols(headers).find((symbol)=>symbol.description === \"headers list\");\n        assert(kHeadersListNode, \"Headers cannot be parsed\");\n    }\n    const headersList = headers[kHeadersListNode];\n    assert(headersList);\n    return headersList;\n}\nmodule.exports = {\n    isCTLExcludingHtab,\n    stringify,\n    getHeadersList\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb29raWVzL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHRCxtQkFBT0EsQ0FBQztBQUVqQyxTQUFTRSxtQkFBb0JDLEtBQUs7SUFDaEMsSUFBSUEsTUFBTUMsTUFBTSxLQUFLLEdBQUc7UUFDdEIsT0FBTztJQUNUO0lBRUEsS0FBSyxNQUFNQyxRQUFRRixNQUFPO1FBQ3hCLE1BQU1HLE9BQU9ELEtBQUtFLFVBQVUsQ0FBQztRQUU3QixJQUNFLFFBQVMsUUFBUUQsUUFBUSxRQUN4QkEsUUFBUSxRQUFRQSxRQUFRLFFBQ3pCQSxTQUFTLE1BQ1Q7WUFDQSxPQUFPO1FBQ1Q7SUFDRjtBQUNGO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTRSxtQkFBb0JDLElBQUk7SUFDL0IsS0FBSyxNQUFNSixRQUFRSSxLQUFNO1FBQ3ZCLE1BQU1ILE9BQU9ELEtBQUtFLFVBQVUsQ0FBQztRQUU3QixJQUNFLFFBQVMsUUFBUUQsT0FBTyxRQUN4QkQsU0FBUyxPQUNUQSxTQUFTLE9BQ1RBLFNBQVMsT0FDVEEsU0FBUyxPQUNUQSxTQUFTLE9BQ1RBLFNBQVMsT0FDVEEsU0FBUyxPQUNUQSxTQUFTLE9BQ1RBLFNBQVMsUUFDVEEsU0FBUyxPQUNUQSxTQUFTLE9BQ1RBLFNBQVMsT0FDVEEsU0FBUyxPQUNUQSxTQUFTLE9BQ1RBLFNBQVMsT0FDVEEsU0FBUyxPQUNUQSxTQUFTLEtBQ1Q7WUFDQSxNQUFNLElBQUlLLE1BQU07UUFDbEI7SUFDRjtBQUNGO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNDLG9CQUFxQlIsS0FBSztJQUNqQyxLQUFLLE1BQU1FLFFBQVFGLE1BQU87UUFDeEIsTUFBTUcsT0FBT0QsS0FBS0UsVUFBVSxDQUFDO1FBRTdCLElBQ0VELE9BQU8sUUFBUSxzQkFBc0I7UUFDckNBLFNBQVMsUUFDVEEsU0FBUyxRQUNUQSxTQUFTLFFBQ1RBLFNBQVMsUUFDVEEsT0FBTyxLQUFLLFlBQVk7VUFDeEI7WUFDQSxNQUFNLElBQUlJLE1BQU07UUFDbEI7SUFDRjtBQUNGO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0UsbUJBQW9CQyxJQUFJO0lBQy9CLEtBQUssTUFBTVIsUUFBUVEsS0FBTTtRQUN2QixNQUFNUCxPQUFPRCxLQUFLRSxVQUFVLENBQUM7UUFFN0IsSUFBSUQsT0FBTyxRQUFRRCxTQUFTLEtBQUs7WUFDL0IsTUFBTSxJQUFJSyxNQUFNO1FBQ2xCO0lBQ0Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTSSxxQkFBc0JDLE1BQU07SUFDbkMsSUFDRUEsT0FBT0MsVUFBVSxDQUFDLFFBQ2xCRCxPQUFPRSxRQUFRLENBQUMsUUFDaEJGLE9BQU9FLFFBQVEsQ0FBQyxNQUNoQjtRQUNBLE1BQU0sSUFBSVAsTUFBTTtJQUNsQjtBQUNGO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F3Q0MsR0FDRCxTQUFTUSxVQUFXQyxJQUFJO0lBQ3RCLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzVCQSxPQUFPLElBQUlDLEtBQUtEO0lBQ2xCO0lBRUEsTUFBTUUsT0FBTztRQUNYO1FBQU87UUFBTztRQUFPO1FBQ3JCO1FBQU87UUFBTztLQUNmO0lBRUQsTUFBTUMsU0FBUztRQUNiO1FBQU87UUFBTztRQUFPO1FBQU87UUFBTztRQUNuQztRQUFPO1FBQU87UUFBTztRQUFPO1FBQU87S0FDcEM7SUFFRCxNQUFNQyxVQUFVRixJQUFJLENBQUNGLEtBQUtLLFNBQVMsR0FBRztJQUN0QyxNQUFNQyxNQUFNTixLQUFLTyxVQUFVLEdBQUdDLFFBQVEsR0FBR0MsUUFBUSxDQUFDLEdBQUc7SUFDckQsTUFBTUMsUUFBUVAsTUFBTSxDQUFDSCxLQUFLVyxXQUFXLEdBQUc7SUFDeEMsTUFBTUMsT0FBT1osS0FBS2EsY0FBYztJQUNoQyxNQUFNQyxPQUFPZCxLQUFLZSxXQUFXLEdBQUdQLFFBQVEsR0FBR0MsUUFBUSxDQUFDLEdBQUc7SUFDdkQsTUFBTU8sU0FBU2hCLEtBQUtpQixhQUFhLEdBQUdULFFBQVEsR0FBR0MsUUFBUSxDQUFDLEdBQUc7SUFDM0QsTUFBTVMsU0FBU2xCLEtBQUttQixhQUFhLEdBQUdYLFFBQVEsR0FBR0MsUUFBUSxDQUFDLEdBQUc7SUFFM0QsT0FBTyxDQUFDLEVBQUVMLFFBQVEsRUFBRSxFQUFFRSxJQUFJLENBQUMsRUFBRUksTUFBTSxDQUFDLEVBQUVFLEtBQUssQ0FBQyxFQUFFRSxLQUFLLENBQUMsRUFBRUUsT0FBTyxDQUFDLEVBQUVFLE9BQU8sSUFBSSxDQUFDO0FBQzlFO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU0UscUJBQXNCQyxNQUFNO0lBQ25DLElBQUlBLFNBQVMsR0FBRztRQUNkLE1BQU0sSUFBSTlCLE1BQU07SUFDbEI7QUFDRjtBQUVBOzs7Q0FHQyxHQUNELFNBQVMrQixVQUFXQyxNQUFNO0lBQ3hCLElBQUlBLE9BQU9qQyxJQUFJLENBQUNMLE1BQU0sS0FBSyxHQUFHO1FBQzVCLE9BQU87SUFDVDtJQUVBSSxtQkFBbUJrQyxPQUFPakMsSUFBSTtJQUM5QkUsb0JBQW9CK0IsT0FBT3ZDLEtBQUs7SUFFaEMsTUFBTXdDLE1BQU07UUFBQyxDQUFDLEVBQUVELE9BQU9qQyxJQUFJLENBQUMsQ0FBQyxFQUFFaUMsT0FBT3ZDLEtBQUssQ0FBQyxDQUFDO0tBQUM7SUFFOUMsMEZBQTBGO0lBQzFGLDBGQUEwRjtJQUMxRixJQUFJdUMsT0FBT2pDLElBQUksQ0FBQ08sVUFBVSxDQUFDLGNBQWM7UUFDdkMwQixPQUFPRSxNQUFNLEdBQUc7SUFDbEI7SUFFQSxJQUFJRixPQUFPakMsSUFBSSxDQUFDTyxVQUFVLENBQUMsWUFBWTtRQUNyQzBCLE9BQU9FLE1BQU0sR0FBRztRQUNoQkYsT0FBTzNCLE1BQU0sR0FBRztRQUNoQjJCLE9BQU83QixJQUFJLEdBQUc7SUFDaEI7SUFFQSxJQUFJNkIsT0FBT0UsTUFBTSxFQUFFO1FBQ2pCRCxJQUFJRSxJQUFJLENBQUM7SUFDWDtJQUVBLElBQUlILE9BQU9JLFFBQVEsRUFBRTtRQUNuQkgsSUFBSUUsSUFBSSxDQUFDO0lBQ1g7SUFFQSxJQUFJLE9BQU9ILE9BQU9GLE1BQU0sS0FBSyxVQUFVO1FBQ3JDRCxxQkFBcUJHLE9BQU9GLE1BQU07UUFDbENHLElBQUlFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRUgsT0FBT0YsTUFBTSxDQUFDLENBQUM7SUFDckM7SUFFQSxJQUFJRSxPQUFPM0IsTUFBTSxFQUFFO1FBQ2pCRCxxQkFBcUI0QixPQUFPM0IsTUFBTTtRQUNsQzRCLElBQUlFLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRUgsT0FBTzNCLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDO0lBRUEsSUFBSTJCLE9BQU83QixJQUFJLEVBQUU7UUFDZkQsbUJBQW1COEIsT0FBTzdCLElBQUk7UUFDOUI4QixJQUFJRSxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUVILE9BQU83QixJQUFJLENBQUMsQ0FBQztJQUNoQztJQUVBLElBQUk2QixPQUFPSyxPQUFPLElBQUlMLE9BQU9LLE9BQU8sQ0FBQ3BCLFFBQVEsT0FBTyxnQkFBZ0I7UUFDbEVnQixJQUFJRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUzQixVQUFVd0IsT0FBT0ssT0FBTyxFQUFFLENBQUM7SUFDakQ7SUFFQSxJQUFJTCxPQUFPTSxRQUFRLEVBQUU7UUFDbkJMLElBQUlFLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRUgsT0FBT00sUUFBUSxDQUFDLENBQUM7SUFDeEM7SUFFQSxLQUFLLE1BQU1DLFFBQVFQLE9BQU9RLFFBQVEsQ0FBRTtRQUNsQyxJQUFJLENBQUNELEtBQUtFLFFBQVEsQ0FBQyxNQUFNO1lBQ3ZCLE1BQU0sSUFBSXpDLE1BQU07UUFDbEI7UUFFQSxNQUFNLENBQUMwQyxLQUFLLEdBQUdqRCxNQUFNLEdBQUc4QyxLQUFLSSxLQUFLLENBQUM7UUFFbkNWLElBQUlFLElBQUksQ0FBQyxDQUFDLEVBQUVPLElBQUlFLElBQUksR0FBRyxDQUFDLEVBQUVuRCxNQUFNb0QsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM3QztJQUVBLE9BQU9aLElBQUlZLElBQUksQ0FBQztBQUNsQjtBQUVBLElBQUlDO0FBRUosU0FBU0MsZUFBZ0JDLE9BQU87SUFDOUIsSUFBSUEsT0FBTyxDQUFDekQsYUFBYSxFQUFFO1FBQ3pCLE9BQU95RCxPQUFPLENBQUN6RCxhQUFhO0lBQzlCO0lBRUEsSUFBSSxDQUFDdUQsa0JBQWtCO1FBQ3JCQSxtQkFBbUJHLE9BQU9DLHFCQUFxQixDQUFDRixTQUFTRyxJQUFJLENBQzNELENBQUNDLFNBQVdBLE9BQU9DLFdBQVcsS0FBSztRQUdyQ2hFLE9BQU95RCxrQkFBa0I7SUFDM0I7SUFFQSxNQUFNUSxjQUFjTixPQUFPLENBQUNGLGlCQUFpQjtJQUM3Q3pELE9BQU9pRTtJQUVQLE9BQU9BO0FBQ1Q7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZoRTtJQUNBdUM7SUFDQWdCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb29raWVzL3V0aWwuanM/Y2Q2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbmNvbnN0IHsga0hlYWRlcnNMaXN0IH0gPSByZXF1aXJlKCcuLi9jb3JlL3N5bWJvbHMnKVxuXG5mdW5jdGlvbiBpc0NUTEV4Y2x1ZGluZ0h0YWIgKHZhbHVlKSB7XG4gIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGZvciAoY29uc3QgY2hhciBvZiB2YWx1ZSkge1xuICAgIGNvbnN0IGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMClcblxuICAgIGlmIChcbiAgICAgIChjb2RlID49IDB4MDAgfHwgY29kZSA8PSAweDA4KSB8fFxuICAgICAgKGNvZGUgPj0gMHgwQSB8fCBjb2RlIDw9IDB4MUYpIHx8XG4gICAgICBjb2RlID09PSAweDdGXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gQ0hBUiAgICAgICAgICAgPSA8YW55IFVTLUFTQ0lJIGNoYXJhY3RlciAob2N0ZXRzIDAgLSAxMjcpPlxuIHRva2VuICAgICAgICAgID0gMSo8YW55IENIQVIgZXhjZXB0IENUTHMgb3Igc2VwYXJhdG9ycz5cbiBzZXBhcmF0b3JzICAgICA9IFwiKFwiIHwgXCIpXCIgfCBcIjxcIiB8IFwiPlwiIHwgXCJAXCJcbiAgICAgICAgICAgICAgICB8IFwiLFwiIHwgXCI7XCIgfCBcIjpcIiB8IFwiXFxcIiB8IDxcIj5cbiAgICAgICAgICAgICAgICB8IFwiL1wiIHwgXCJbXCIgfCBcIl1cIiB8IFwiP1wiIHwgXCI9XCJcbiAgICAgICAgICAgICAgICB8IFwie1wiIHwgXCJ9XCIgfCBTUCB8IEhUXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUNvb2tpZU5hbWUgKG5hbWUpIHtcbiAgZm9yIChjb25zdCBjaGFyIG9mIG5hbWUpIHtcbiAgICBjb25zdCBjb2RlID0gY2hhci5jaGFyQ29kZUF0KDApXG5cbiAgICBpZiAoXG4gICAgICAoY29kZSA8PSAweDIwIHx8IGNvZGUgPiAweDdGKSB8fFxuICAgICAgY2hhciA9PT0gJygnIHx8XG4gICAgICBjaGFyID09PSAnKScgfHxcbiAgICAgIGNoYXIgPT09ICc+JyB8fFxuICAgICAgY2hhciA9PT0gJzwnIHx8XG4gICAgICBjaGFyID09PSAnQCcgfHxcbiAgICAgIGNoYXIgPT09ICcsJyB8fFxuICAgICAgY2hhciA9PT0gJzsnIHx8XG4gICAgICBjaGFyID09PSAnOicgfHxcbiAgICAgIGNoYXIgPT09ICdcXFxcJyB8fFxuICAgICAgY2hhciA9PT0gJ1wiJyB8fFxuICAgICAgY2hhciA9PT0gJy8nIHx8XG4gICAgICBjaGFyID09PSAnWycgfHxcbiAgICAgIGNoYXIgPT09ICddJyB8fFxuICAgICAgY2hhciA9PT0gJz8nIHx8XG4gICAgICBjaGFyID09PSAnPScgfHxcbiAgICAgIGNoYXIgPT09ICd7JyB8fFxuICAgICAgY2hhciA9PT0gJ30nXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29va2llIG5hbWUnKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiBjb29raWUtdmFsdWUgICAgICA9ICpjb29raWUtb2N0ZXQgLyAoIERRVU9URSAqY29va2llLW9jdGV0IERRVU9URSApXG4gY29va2llLW9jdGV0ICAgICAgPSAleDIxIC8gJXgyMy0yQiAvICV4MkQtM0EgLyAleDNDLTVCIC8gJXg1RC03RVxuICAgICAgICAgICAgICAgICAgICAgICA7IFVTLUFTQ0lJIGNoYXJhY3RlcnMgZXhjbHVkaW5nIENUTHMsXG4gICAgICAgICAgICAgICAgICAgICAgIDsgd2hpdGVzcGFjZSBEUVVPVEUsIGNvbW1hLCBzZW1pY29sb24sXG4gICAgICAgICAgICAgICAgICAgICAgIDsgYW5kIGJhY2tzbGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQ29va2llVmFsdWUgKHZhbHVlKSB7XG4gIGZvciAoY29uc3QgY2hhciBvZiB2YWx1ZSkge1xuICAgIGNvbnN0IGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMClcblxuICAgIGlmIChcbiAgICAgIGNvZGUgPCAweDIxIHx8IC8vIGV4Y2x1ZGUgQ1RMcyAoMC0zMSlcbiAgICAgIGNvZGUgPT09IDB4MjIgfHxcbiAgICAgIGNvZGUgPT09IDB4MkMgfHxcbiAgICAgIGNvZGUgPT09IDB4M0IgfHxcbiAgICAgIGNvZGUgPT09IDB4NUMgfHxcbiAgICAgIGNvZGUgPiAweDdFIC8vIG5vbi1hc2NpaVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhlYWRlciB2YWx1ZScpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogcGF0aC12YWx1ZSAgICAgICAgPSA8YW55IENIQVIgZXhjZXB0IENUTHMgb3IgXCI7XCI+XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUNvb2tpZVBhdGggKHBhdGgpIHtcbiAgZm9yIChjb25zdCBjaGFyIG9mIHBhdGgpIHtcbiAgICBjb25zdCBjb2RlID0gY2hhci5jaGFyQ29kZUF0KDApXG5cbiAgICBpZiAoY29kZSA8IDB4MjEgfHwgY2hhciA9PT0gJzsnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29va2llIHBhdGgnKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEkgaGF2ZSBubyBpZGVhIHdoeSB0aGVzZSB2YWx1ZXMgYXJlbid0IGFsbG93ZWQgdG8gYmUgaG9uZXN0LFxuICogYnV0IERlbm8gdGVzdHMgdGhlc2UuIC0gS2hhZnJhXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tYWluXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQ29va2llRG9tYWluIChkb21haW4pIHtcbiAgaWYgKFxuICAgIGRvbWFpbi5zdGFydHNXaXRoKCctJykgfHxcbiAgICBkb21haW4uZW5kc1dpdGgoJy4nKSB8fFxuICAgIGRvbWFpbi5lbmRzV2l0aCgnLScpXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb29raWUgZG9tYWluJylcbiAgfVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzcyMzEjc2VjdGlvbi03LjEuMS4xXG4gKiBAcGFyYW0ge251bWJlcnxEYXRlfSBkYXRlXG4gIElNRi1maXhkYXRlICA9IGRheS1uYW1lIFwiLFwiIFNQIGRhdGUxIFNQIHRpbWUtb2YtZGF5IFNQIEdNVFxuICA7IGZpeGVkIGxlbmd0aC96b25lL2NhcGl0YWxpemF0aW9uIHN1YnNldCBvZiB0aGUgZm9ybWF0XG4gIDsgc2VlIFNlY3Rpb24gMy4zIG9mIFtSRkM1MzIyXVxuXG4gIGRheS1uYW1lICAgICA9ICV4NEQuNkYuNkUgOyBcIk1vblwiLCBjYXNlLXNlbnNpdGl2ZVxuICAgICAgICAgICAgICAvICV4NTQuNzUuNjUgOyBcIlR1ZVwiLCBjYXNlLXNlbnNpdGl2ZVxuICAgICAgICAgICAgICAvICV4NTcuNjUuNjQgOyBcIldlZFwiLCBjYXNlLXNlbnNpdGl2ZVxuICAgICAgICAgICAgICAvICV4NTQuNjguNzUgOyBcIlRodVwiLCBjYXNlLXNlbnNpdGl2ZVxuICAgICAgICAgICAgICAvICV4NDYuNzIuNjkgOyBcIkZyaVwiLCBjYXNlLXNlbnNpdGl2ZVxuICAgICAgICAgICAgICAvICV4NTMuNjEuNzQgOyBcIlNhdFwiLCBjYXNlLXNlbnNpdGl2ZVxuICAgICAgICAgICAgICAvICV4NTMuNzUuNkUgOyBcIlN1blwiLCBjYXNlLXNlbnNpdGl2ZVxuICBkYXRlMSAgICAgICAgPSBkYXkgU1AgbW9udGggU1AgeWVhclxuICAgICAgICAgICAgICAgICAgOyBlLmcuLCAwMiBKdW4gMTk4MlxuXG4gIGRheSAgICAgICAgICA9IDJESUdJVFxuICBtb250aCAgICAgICAgPSAleDRBLjYxLjZFIDsgXCJKYW5cIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDQ2LjY1LjYyIDsgXCJGZWJcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDRELjYxLjcyIDsgXCJNYXJcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDQxLjcwLjcyIDsgXCJBcHJcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDRELjYxLjc5IDsgXCJNYXlcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDRBLjc1LjZFIDsgXCJKdW5cIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDRBLjc1LjZDIDsgXCJKdWxcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDQxLjc1LjY3IDsgXCJBdWdcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDUzLjY1LjcwIDsgXCJTZXBcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDRGLjYzLjc0IDsgXCJPY3RcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDRFLjZGLjc2IDsgXCJOb3ZcIiwgY2FzZS1zZW5zaXRpdmVcbiAgICAgICAgICAgICAgLyAleDQ0LjY1LjYzIDsgXCJEZWNcIiwgY2FzZS1zZW5zaXRpdmVcbiAgeWVhciAgICAgICAgID0gNERJR0lUXG5cbiAgR01UICAgICAgICAgID0gJXg0Ny40RC41NCA7IFwiR01UXCIsIGNhc2Utc2Vuc2l0aXZlXG5cbiAgdGltZS1vZi1kYXkgID0gaG91ciBcIjpcIiBtaW51dGUgXCI6XCIgc2Vjb25kXG4gICAgICAgICAgICAgIDsgMDA6MDA6MDAgLSAyMzo1OTo2MCAobGVhcCBzZWNvbmQpXG5cbiAgaG91ciAgICAgICAgID0gMkRJR0lUXG4gIG1pbnV0ZSAgICAgICA9IDJESUdJVFxuICBzZWNvbmQgICAgICAgPSAyRElHSVRcbiAqL1xuZnVuY3Rpb24gdG9JTUZEYXRlIChkYXRlKSB7XG4gIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSlcbiAgfVxuXG4gIGNvbnN0IGRheXMgPSBbXG4gICAgJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsXG4gICAgJ1RodScsICdGcmknLCAnU2F0J1xuICBdXG5cbiAgY29uc3QgbW9udGhzID0gW1xuICAgICdKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsXG4gICAgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ1xuICBdXG5cbiAgY29uc3QgZGF5TmFtZSA9IGRheXNbZGF0ZS5nZXRVVENEYXkoKV1cbiAgY29uc3QgZGF5ID0gZGF0ZS5nZXRVVENEYXRlKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpXG4gIGNvbnN0IG1vbnRoID0gbW9udGhzW2RhdGUuZ2V0VVRDTW9udGgoKV1cbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKVxuICBjb25zdCBob3VyID0gZGF0ZS5nZXRVVENIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKVxuICBjb25zdCBtaW51dGUgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJylcbiAgY29uc3Qgc2Vjb25kID0gZGF0ZS5nZXRVVENTZWNvbmRzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpXG5cbiAgcmV0dXJuIGAke2RheU5hbWV9LCAke2RheX0gJHttb250aH0gJHt5ZWFyfSAke2hvdXJ9OiR7bWludXRlfToke3NlY29uZH0gR01UYFxufVxuXG4vKipcbiBtYXgtYWdlLWF2ICAgICAgICA9IFwiTWF4LUFnZT1cIiBub24temVyby1kaWdpdCAqRElHSVRcbiAgICAgICAgICAgICAgICAgICAgICAgOyBJbiBwcmFjdGljZSwgYm90aCBleHBpcmVzLWF2IGFuZCBtYXgtYWdlLWF2XG4gICAgICAgICAgICAgICAgICAgICAgIDsgYXJlIGxpbWl0ZWQgdG8gZGF0ZXMgcmVwcmVzZW50YWJsZSBieSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgOyB1c2VyIGFnZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IG1heEFnZVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUNvb2tpZU1heEFnZSAobWF4QWdlKSB7XG4gIGlmIChtYXhBZ2UgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvb2tpZSBtYXgtYWdlJylcbiAgfVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzYyNjUjc2VjdGlvbi00LjEuMVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5Db29raWV9IGNvb2tpZVxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnkgKGNvb2tpZSkge1xuICBpZiAoY29va2llLm5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHZhbGlkYXRlQ29va2llTmFtZShjb29raWUubmFtZSlcbiAgdmFsaWRhdGVDb29raWVWYWx1ZShjb29raWUudmFsdWUpXG5cbiAgY29uc3Qgb3V0ID0gW2Ake2Nvb2tpZS5uYW1lfT0ke2Nvb2tpZS52YWx1ZX1gXVxuXG4gIC8vIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvZHJhZnQtaWV0Zi1odHRwYmlzLWNvb2tpZS1wcmVmaXhlcy0wMCNzZWN0aW9uLTMuMVxuICAvLyBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL2RyYWZ0LWlldGYtaHR0cGJpcy1jb29raWUtcHJlZml4ZXMtMDAjc2VjdGlvbi0zLjJcbiAgaWYgKGNvb2tpZS5uYW1lLnN0YXJ0c1dpdGgoJ19fU2VjdXJlLScpKSB7XG4gICAgY29va2llLnNlY3VyZSA9IHRydWVcbiAgfVxuXG4gIGlmIChjb29raWUubmFtZS5zdGFydHNXaXRoKCdfX0hvc3QtJykpIHtcbiAgICBjb29raWUuc2VjdXJlID0gdHJ1ZVxuICAgIGNvb2tpZS5kb21haW4gPSBudWxsXG4gICAgY29va2llLnBhdGggPSAnLydcbiAgfVxuXG4gIGlmIChjb29raWUuc2VjdXJlKSB7XG4gICAgb3V0LnB1c2goJ1NlY3VyZScpXG4gIH1cblxuICBpZiAoY29va2llLmh0dHBPbmx5KSB7XG4gICAgb3V0LnB1c2goJ0h0dHBPbmx5JylcbiAgfVxuXG4gIGlmICh0eXBlb2YgY29va2llLm1heEFnZSA9PT0gJ251bWJlcicpIHtcbiAgICB2YWxpZGF0ZUNvb2tpZU1heEFnZShjb29raWUubWF4QWdlKVxuICAgIG91dC5wdXNoKGBNYXgtQWdlPSR7Y29va2llLm1heEFnZX1gKVxuICB9XG5cbiAgaWYgKGNvb2tpZS5kb21haW4pIHtcbiAgICB2YWxpZGF0ZUNvb2tpZURvbWFpbihjb29raWUuZG9tYWluKVxuICAgIG91dC5wdXNoKGBEb21haW49JHtjb29raWUuZG9tYWlufWApXG4gIH1cblxuICBpZiAoY29va2llLnBhdGgpIHtcbiAgICB2YWxpZGF0ZUNvb2tpZVBhdGgoY29va2llLnBhdGgpXG4gICAgb3V0LnB1c2goYFBhdGg9JHtjb29raWUucGF0aH1gKVxuICB9XG5cbiAgaWYgKGNvb2tpZS5leHBpcmVzICYmIGNvb2tpZS5leHBpcmVzLnRvU3RyaW5nKCkgIT09ICdJbnZhbGlkIERhdGUnKSB7XG4gICAgb3V0LnB1c2goYEV4cGlyZXM9JHt0b0lNRkRhdGUoY29va2llLmV4cGlyZXMpfWApXG4gIH1cblxuICBpZiAoY29va2llLnNhbWVTaXRlKSB7XG4gICAgb3V0LnB1c2goYFNhbWVTaXRlPSR7Y29va2llLnNhbWVTaXRlfWApXG4gIH1cblxuICBmb3IgKGNvbnN0IHBhcnQgb2YgY29va2llLnVucGFyc2VkKSB7XG4gICAgaWYgKCFwYXJ0LmluY2x1ZGVzKCc9JykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1bnBhcnNlZCcpXG4gICAgfVxuXG4gICAgY29uc3QgW2tleSwgLi4udmFsdWVdID0gcGFydC5zcGxpdCgnPScpXG5cbiAgICBvdXQucHVzaChgJHtrZXkudHJpbSgpfT0ke3ZhbHVlLmpvaW4oJz0nKX1gKVxuICB9XG5cbiAgcmV0dXJuIG91dC5qb2luKCc7ICcpXG59XG5cbmxldCBrSGVhZGVyc0xpc3ROb2RlXG5cbmZ1bmN0aW9uIGdldEhlYWRlcnNMaXN0IChoZWFkZXJzKSB7XG4gIGlmIChoZWFkZXJzW2tIZWFkZXJzTGlzdF0pIHtcbiAgICByZXR1cm4gaGVhZGVyc1trSGVhZGVyc0xpc3RdXG4gIH1cblxuICBpZiAoIWtIZWFkZXJzTGlzdE5vZGUpIHtcbiAgICBrSGVhZGVyc0xpc3ROb2RlID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhoZWFkZXJzKS5maW5kKFxuICAgICAgKHN5bWJvbCkgPT4gc3ltYm9sLmRlc2NyaXB0aW9uID09PSAnaGVhZGVycyBsaXN0J1xuICAgIClcblxuICAgIGFzc2VydChrSGVhZGVyc0xpc3ROb2RlLCAnSGVhZGVycyBjYW5ub3QgYmUgcGFyc2VkJylcbiAgfVxuXG4gIGNvbnN0IGhlYWRlcnNMaXN0ID0gaGVhZGVyc1trSGVhZGVyc0xpc3ROb2RlXVxuICBhc3NlcnQoaGVhZGVyc0xpc3QpXG5cbiAgcmV0dXJuIGhlYWRlcnNMaXN0XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0NUTEV4Y2x1ZGluZ0h0YWIsXG4gIHN0cmluZ2lmeSxcbiAgZ2V0SGVhZGVyc0xpc3Rcbn1cbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwia0hlYWRlcnNMaXN0IiwiaXNDVExFeGNsdWRpbmdIdGFiIiwidmFsdWUiLCJsZW5ndGgiLCJjaGFyIiwiY29kZSIsImNoYXJDb2RlQXQiLCJ2YWxpZGF0ZUNvb2tpZU5hbWUiLCJuYW1lIiwiRXJyb3IiLCJ2YWxpZGF0ZUNvb2tpZVZhbHVlIiwidmFsaWRhdGVDb29raWVQYXRoIiwicGF0aCIsInZhbGlkYXRlQ29va2llRG9tYWluIiwiZG9tYWluIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwidG9JTUZEYXRlIiwiZGF0ZSIsIkRhdGUiLCJkYXlzIiwibW9udGhzIiwiZGF5TmFtZSIsImdldFVUQ0RheSIsImRheSIsImdldFVUQ0RhdGUiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwibW9udGgiLCJnZXRVVENNb250aCIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImhvdXIiLCJnZXRVVENIb3VycyIsIm1pbnV0ZSIsImdldFVUQ01pbnV0ZXMiLCJzZWNvbmQiLCJnZXRVVENTZWNvbmRzIiwidmFsaWRhdGVDb29raWVNYXhBZ2UiLCJtYXhBZ2UiLCJzdHJpbmdpZnkiLCJjb29raWUiLCJvdXQiLCJzZWN1cmUiLCJwdXNoIiwiaHR0cE9ubHkiLCJleHBpcmVzIiwic2FtZVNpdGUiLCJwYXJ0IiwidW5wYXJzZWQiLCJpbmNsdWRlcyIsImtleSIsInNwbGl0IiwidHJpbSIsImpvaW4iLCJrSGVhZGVyc0xpc3ROb2RlIiwiZ2V0SGVhZGVyc0xpc3QiLCJoZWFkZXJzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmluZCIsInN5bWJvbCIsImRlc2NyaXB0aW9uIiwiaGVhZGVyc0xpc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/cookies/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/connect.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/connect.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst net = __webpack_require__(/*! net */ \"net\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { InvalidArgumentError, ConnectTimeoutError } = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nlet tls // include tls conditionally since it is not always available\n;\n// TODO: session re-use does not wait for the first\n// connection to resolve the session and might therefore\n// resolve the same servername multiple times even when\n// re-use is enabled.\nlet SessionCache;\n// FIXME: remove workaround when the Node bug is fixed\n// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\nif (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {\n    SessionCache = class WeakSessionCache {\n        constructor(maxCachedSessions){\n            this._maxCachedSessions = maxCachedSessions;\n            this._sessionCache = new Map();\n            this._sessionRegistry = new global.FinalizationRegistry((key)=>{\n                if (this._sessionCache.size < this._maxCachedSessions) {\n                    return;\n                }\n                const ref = this._sessionCache.get(key);\n                if (ref !== undefined && ref.deref() === undefined) {\n                    this._sessionCache.delete(key);\n                }\n            });\n        }\n        get(sessionKey) {\n            const ref = this._sessionCache.get(sessionKey);\n            return ref ? ref.deref() : null;\n        }\n        set(sessionKey, session) {\n            if (this._maxCachedSessions === 0) {\n                return;\n            }\n            this._sessionCache.set(sessionKey, new WeakRef(session));\n            this._sessionRegistry.register(session, sessionKey);\n        }\n    };\n} else {\n    SessionCache = class SimpleSessionCache {\n        constructor(maxCachedSessions){\n            this._maxCachedSessions = maxCachedSessions;\n            this._sessionCache = new Map();\n        }\n        get(sessionKey) {\n            return this._sessionCache.get(sessionKey);\n        }\n        set(sessionKey, session) {\n            if (this._maxCachedSessions === 0) {\n                return;\n            }\n            if (this._sessionCache.size >= this._maxCachedSessions) {\n                // remove the oldest session\n                const { value: oldestKey } = this._sessionCache.keys().next();\n                this._sessionCache.delete(oldestKey);\n            }\n            this._sessionCache.set(sessionKey, session);\n        }\n    };\n}\nfunction buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {\n    if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {\n        throw new InvalidArgumentError(\"maxCachedSessions must be a positive integer or zero\");\n    }\n    const options = {\n        path: socketPath,\n        ...opts\n    };\n    const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);\n    timeout = timeout == null ? 10e3 : timeout;\n    allowH2 = allowH2 != null ? allowH2 : false;\n    return function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {\n        let socket;\n        if (protocol === \"https:\") {\n            if (!tls) {\n                tls = __webpack_require__(/*! tls */ \"tls\");\n            }\n            servername = servername || options.servername || util.getServerName(host) || null;\n            const sessionKey = servername || hostname;\n            const session = sessionCache.get(sessionKey) || null;\n            assert(sessionKey);\n            socket = tls.connect({\n                highWaterMark: 16384,\n                ...options,\n                servername,\n                session,\n                localAddress,\n                // TODO(HTTP/2): Add support for h2c\n                ALPNProtocols: allowH2 ? [\n                    \"http/1.1\",\n                    \"h2\"\n                ] : [\n                    \"http/1.1\"\n                ],\n                socket: httpSocket,\n                port: port || 443,\n                host: hostname\n            });\n            socket.on(\"session\", function(session) {\n                // TODO (fix): Can a session become invalid once established? Don't think so?\n                sessionCache.set(sessionKey, session);\n            });\n        } else {\n            assert(!httpSocket, \"httpSocket can only be sent on TLS update\");\n            socket = net.connect({\n                highWaterMark: 64 * 1024,\n                ...options,\n                localAddress,\n                port: port || 80,\n                host: hostname\n            });\n        }\n        // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket\n        if (options.keepAlive == null || options.keepAlive) {\n            const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay;\n            socket.setKeepAlive(true, keepAliveInitialDelay);\n        }\n        const cancelTimeout = setupTimeout(()=>onConnectTimeout(socket), timeout);\n        socket.setNoDelay(true).once(protocol === \"https:\" ? \"secureConnect\" : \"connect\", function() {\n            cancelTimeout();\n            if (callback) {\n                const cb = callback;\n                callback = null;\n                cb(null, this);\n            }\n        }).on(\"error\", function(err) {\n            cancelTimeout();\n            if (callback) {\n                const cb = callback;\n                callback = null;\n                cb(err);\n            }\n        });\n        return socket;\n    };\n}\nfunction setupTimeout(onConnectTimeout, timeout) {\n    if (!timeout) {\n        return ()=>{};\n    }\n    let s1 = null;\n    let s2 = null;\n    const timeoutId = setTimeout(()=>{\n        // setImmediate is added to make sure that we priotorise socket error events over timeouts\n        s1 = setImmediate(()=>{\n            if (process.platform === \"win32\") {\n                // Windows needs an extra setImmediate probably due to implementation differences in the socket logic\n                s2 = setImmediate(()=>onConnectTimeout());\n            } else {\n                onConnectTimeout();\n            }\n        });\n    }, timeout);\n    return ()=>{\n        clearTimeout(timeoutId);\n        clearImmediate(s1);\n        clearImmediate(s2);\n    };\n}\nfunction onConnectTimeout(socket) {\n    util.destroy(socket, new ConnectTimeoutError());\n}\nmodule.exports = buildConnector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/errors.js":
/*!************************************************!*\
  !*** ./node_modules/undici/lib/core/errors.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\nclass UndiciError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"UndiciError\";\n        this.code = \"UND_ERR\";\n    }\n}\nclass ConnectTimeoutError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, ConnectTimeoutError);\n        this.name = \"ConnectTimeoutError\";\n        this.message = message || \"Connect Timeout Error\";\n        this.code = \"UND_ERR_CONNECT_TIMEOUT\";\n    }\n}\nclass HeadersTimeoutError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, HeadersTimeoutError);\n        this.name = \"HeadersTimeoutError\";\n        this.message = message || \"Headers Timeout Error\";\n        this.code = \"UND_ERR_HEADERS_TIMEOUT\";\n    }\n}\nclass HeadersOverflowError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, HeadersOverflowError);\n        this.name = \"HeadersOverflowError\";\n        this.message = message || \"Headers Overflow Error\";\n        this.code = \"UND_ERR_HEADERS_OVERFLOW\";\n    }\n}\nclass BodyTimeoutError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, BodyTimeoutError);\n        this.name = \"BodyTimeoutError\";\n        this.message = message || \"Body Timeout Error\";\n        this.code = \"UND_ERR_BODY_TIMEOUT\";\n    }\n}\nclass ResponseStatusCodeError extends UndiciError {\n    constructor(message, statusCode, headers, body){\n        super(message);\n        Error.captureStackTrace(this, ResponseStatusCodeError);\n        this.name = \"ResponseStatusCodeError\";\n        this.message = message || \"Response Status Code Error\";\n        this.code = \"UND_ERR_RESPONSE_STATUS_CODE\";\n        this.body = body;\n        this.status = statusCode;\n        this.statusCode = statusCode;\n        this.headers = headers;\n    }\n}\nclass InvalidArgumentError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, InvalidArgumentError);\n        this.name = \"InvalidArgumentError\";\n        this.message = message || \"Invalid Argument Error\";\n        this.code = \"UND_ERR_INVALID_ARG\";\n    }\n}\nclass InvalidReturnValueError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, InvalidReturnValueError);\n        this.name = \"InvalidReturnValueError\";\n        this.message = message || \"Invalid Return Value Error\";\n        this.code = \"UND_ERR_INVALID_RETURN_VALUE\";\n    }\n}\nclass RequestAbortedError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, RequestAbortedError);\n        this.name = \"AbortError\";\n        this.message = message || \"Request aborted\";\n        this.code = \"UND_ERR_ABORTED\";\n    }\n}\nclass InformationalError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, InformationalError);\n        this.name = \"InformationalError\";\n        this.message = message || \"Request information\";\n        this.code = \"UND_ERR_INFO\";\n    }\n}\nclass RequestContentLengthMismatchError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, RequestContentLengthMismatchError);\n        this.name = \"RequestContentLengthMismatchError\";\n        this.message = message || \"Request body length does not match content-length header\";\n        this.code = \"UND_ERR_REQ_CONTENT_LENGTH_MISMATCH\";\n    }\n}\nclass ResponseContentLengthMismatchError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, ResponseContentLengthMismatchError);\n        this.name = \"ResponseContentLengthMismatchError\";\n        this.message = message || \"Response body length does not match content-length header\";\n        this.code = \"UND_ERR_RES_CONTENT_LENGTH_MISMATCH\";\n    }\n}\nclass ClientDestroyedError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, ClientDestroyedError);\n        this.name = \"ClientDestroyedError\";\n        this.message = message || \"The client is destroyed\";\n        this.code = \"UND_ERR_DESTROYED\";\n    }\n}\nclass ClientClosedError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, ClientClosedError);\n        this.name = \"ClientClosedError\";\n        this.message = message || \"The client is closed\";\n        this.code = \"UND_ERR_CLOSED\";\n    }\n}\nclass SocketError extends UndiciError {\n    constructor(message, socket){\n        super(message);\n        Error.captureStackTrace(this, SocketError);\n        this.name = \"SocketError\";\n        this.message = message || \"Socket error\";\n        this.code = \"UND_ERR_SOCKET\";\n        this.socket = socket;\n    }\n}\nclass NotSupportedError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, NotSupportedError);\n        this.name = \"NotSupportedError\";\n        this.message = message || \"Not supported error\";\n        this.code = \"UND_ERR_NOT_SUPPORTED\";\n    }\n}\nclass BalancedPoolMissingUpstreamError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, NotSupportedError);\n        this.name = \"MissingUpstreamError\";\n        this.message = message || \"No upstream has been added to the BalancedPool\";\n        this.code = \"UND_ERR_BPL_MISSING_UPSTREAM\";\n    }\n}\nclass HTTPParserError extends Error {\n    constructor(message, code, data){\n        super(message);\n        Error.captureStackTrace(this, HTTPParserError);\n        this.name = \"HTTPParserError\";\n        this.code = code ? `HPE_${code}` : undefined;\n        this.data = data ? data.toString() : undefined;\n    }\n}\nclass ResponseExceededMaxSizeError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, ResponseExceededMaxSizeError);\n        this.name = \"ResponseExceededMaxSizeError\";\n        this.message = message || \"Response content exceeded max size\";\n        this.code = \"UND_ERR_RES_EXCEEDED_MAX_SIZE\";\n    }\n}\nmodule.exports = {\n    HTTPParserError,\n    UndiciError,\n    HeadersTimeoutError,\n    HeadersOverflowError,\n    BodyTimeoutError,\n    RequestContentLengthMismatchError,\n    ConnectTimeoutError,\n    ResponseStatusCodeError,\n    InvalidArgumentError,\n    InvalidReturnValueError,\n    RequestAbortedError,\n    ClientDestroyedError,\n    ClientClosedError,\n    InformationalError,\n    SocketError,\n    NotSupportedError,\n    ResponseContentLengthMismatchError,\n    BalancedPoolMissingUpstreamError,\n    ResponseExceededMaxSizeError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/request.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/request.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { InvalidArgumentError, NotSupportedError } = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\n// tokenRegExp and headerCharRegex have been lifted from\n// https://github.com/nodejs/node/blob/main/lib/_http_common.js\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n */ const tokenRegExp = /^[\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]+$/;\n/**\n * Matches if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n */ const headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n// Verifies that a given path is valid does not contain control chars \\x00 to \\x20\nconst invalidPathRegex = /[^\\u0021-\\u00ff]/;\nconst kHandler = Symbol(\"handler\");\nconst channels = {};\nlet extractBody;\ntry {\n    const diagnosticsChannel = __webpack_require__(/*! diagnostics_channel */ \"diagnostics_channel\");\n    channels.create = diagnosticsChannel.channel(\"undici:request:create\");\n    channels.bodySent = diagnosticsChannel.channel(\"undici:request:bodySent\");\n    channels.headers = diagnosticsChannel.channel(\"undici:request:headers\");\n    channels.trailers = diagnosticsChannel.channel(\"undici:request:trailers\");\n    channels.error = diagnosticsChannel.channel(\"undici:request:error\");\n} catch  {\n    channels.create = {\n        hasSubscribers: false\n    };\n    channels.bodySent = {\n        hasSubscribers: false\n    };\n    channels.headers = {\n        hasSubscribers: false\n    };\n    channels.trailers = {\n        hasSubscribers: false\n    };\n    channels.error = {\n        hasSubscribers: false\n    };\n}\nclass Request {\n    constructor(origin, { path, method, body, headers, query, idempotent, blocking, upgrade, headersTimeout, bodyTimeout, reset, throwOnError, expectContinue }, handler){\n        if (typeof path !== \"string\") {\n            throw new InvalidArgumentError(\"path must be a string\");\n        } else if (path[0] !== \"/\" && !(path.startsWith(\"http://\") || path.startsWith(\"https://\")) && method !== \"CONNECT\") {\n            throw new InvalidArgumentError(\"path must be an absolute URL or start with a slash\");\n        } else if (invalidPathRegex.exec(path) !== null) {\n            throw new InvalidArgumentError(\"invalid request path\");\n        }\n        if (typeof method !== \"string\") {\n            throw new InvalidArgumentError(\"method must be a string\");\n        } else if (tokenRegExp.exec(method) === null) {\n            throw new InvalidArgumentError(\"invalid request method\");\n        }\n        if (upgrade && typeof upgrade !== \"string\") {\n            throw new InvalidArgumentError(\"upgrade must be a string\");\n        }\n        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {\n            throw new InvalidArgumentError(\"invalid headersTimeout\");\n        }\n        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {\n            throw new InvalidArgumentError(\"invalid bodyTimeout\");\n        }\n        if (reset != null && typeof reset !== \"boolean\") {\n            throw new InvalidArgumentError(\"invalid reset\");\n        }\n        if (expectContinue != null && typeof expectContinue !== \"boolean\") {\n            throw new InvalidArgumentError(\"invalid expectContinue\");\n        }\n        this.headersTimeout = headersTimeout;\n        this.bodyTimeout = bodyTimeout;\n        this.throwOnError = throwOnError === true;\n        this.method = method;\n        if (body == null) {\n            this.body = null;\n        } else if (util.isStream(body)) {\n            this.body = body;\n        } else if (util.isBuffer(body)) {\n            this.body = body.byteLength ? body : null;\n        } else if (ArrayBuffer.isView(body)) {\n            this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;\n        } else if (body instanceof ArrayBuffer) {\n            this.body = body.byteLength ? Buffer.from(body) : null;\n        } else if (typeof body === \"string\") {\n            this.body = body.length ? Buffer.from(body) : null;\n        } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {\n            this.body = body;\n        } else {\n            throw new InvalidArgumentError(\"body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable\");\n        }\n        this.completed = false;\n        this.aborted = false;\n        this.upgrade = upgrade || null;\n        this.path = query ? util.buildURL(path, query) : path;\n        this.origin = origin;\n        this.idempotent = idempotent == null ? method === \"HEAD\" || method === \"GET\" : idempotent;\n        this.blocking = blocking == null ? false : blocking;\n        this.reset = reset == null ? null : reset;\n        this.host = null;\n        this.contentLength = null;\n        this.contentType = null;\n        this.headers = \"\";\n        // Only for H2\n        this.expectContinue = expectContinue != null ? expectContinue : false;\n        if (Array.isArray(headers)) {\n            if (headers.length % 2 !== 0) {\n                throw new InvalidArgumentError(\"headers array must be even\");\n            }\n            for(let i = 0; i < headers.length; i += 2){\n                processHeader(this, headers[i], headers[i + 1]);\n            }\n        } else if (headers && typeof headers === \"object\") {\n            const keys = Object.keys(headers);\n            for(let i = 0; i < keys.length; i++){\n                const key = keys[i];\n                processHeader(this, key, headers[key]);\n            }\n        } else if (headers != null) {\n            throw new InvalidArgumentError(\"headers must be an object or an array\");\n        }\n        if (util.isFormDataLike(this.body)) {\n            if (util.nodeMajor < 16 || util.nodeMajor === 16 && util.nodeMinor < 8) {\n                throw new InvalidArgumentError(\"Form-Data bodies are only supported in node v16.8 and newer.\");\n            }\n            if (!extractBody) {\n                extractBody = (__webpack_require__(/*! ../fetch/body.js */ \"(ssr)/./node_modules/undici/lib/fetch/body.js\").extractBody);\n            }\n            const [bodyStream, contentType] = extractBody(body);\n            if (this.contentType == null) {\n                this.contentType = contentType;\n                this.headers += `content-type: ${contentType}\\r\\n`;\n            }\n            this.body = bodyStream.stream;\n            this.contentLength = bodyStream.length;\n        } else if (util.isBlobLike(body) && this.contentType == null && body.type) {\n            this.contentType = body.type;\n            this.headers += `content-type: ${body.type}\\r\\n`;\n        }\n        util.validateHandler(handler, method, upgrade);\n        this.servername = util.getServerName(this.host);\n        this[kHandler] = handler;\n        if (channels.create.hasSubscribers) {\n            channels.create.publish({\n                request: this\n            });\n        }\n    }\n    onBodySent(chunk) {\n        if (this[kHandler].onBodySent) {\n            try {\n                this[kHandler].onBodySent(chunk);\n            } catch (err) {\n                this.onError(err);\n            }\n        }\n    }\n    onRequestSent() {\n        if (channels.bodySent.hasSubscribers) {\n            channels.bodySent.publish({\n                request: this\n            });\n        }\n    }\n    onConnect(abort) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        return this[kHandler].onConnect(abort);\n    }\n    onHeaders(statusCode, headers, resume, statusText) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        if (channels.headers.hasSubscribers) {\n            channels.headers.publish({\n                request: this,\n                response: {\n                    statusCode,\n                    headers,\n                    statusText\n                }\n            });\n        }\n        return this[kHandler].onHeaders(statusCode, headers, resume, statusText);\n    }\n    onData(chunk) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        return this[kHandler].onData(chunk);\n    }\n    onUpgrade(statusCode, headers, socket) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        return this[kHandler].onUpgrade(statusCode, headers, socket);\n    }\n    onComplete(trailers) {\n        assert(!this.aborted);\n        this.completed = true;\n        if (channels.trailers.hasSubscribers) {\n            channels.trailers.publish({\n                request: this,\n                trailers\n            });\n        }\n        return this[kHandler].onComplete(trailers);\n    }\n    onError(error) {\n        if (channels.error.hasSubscribers) {\n            channels.error.publish({\n                request: this,\n                error\n            });\n        }\n        if (this.aborted) {\n            return;\n        }\n        this.aborted = true;\n        return this[kHandler].onError(error);\n    }\n    // TODO: adjust to support H2\n    addHeader(key, value) {\n        processHeader(this, key, value);\n        return this;\n    }\n    static [kHTTP1BuildRequest](origin, opts, handler) {\n        // TODO: Migrate header parsing here, to make Requests\n        // HTTP agnostic\n        return new Request(origin, opts, handler);\n    }\n    static [kHTTP2BuildRequest](origin, opts, handler) {\n        const headers = opts.headers;\n        opts = {\n            ...opts,\n            headers: null\n        };\n        const request = new Request(origin, opts, handler);\n        request.headers = {};\n        if (Array.isArray(headers)) {\n            if (headers.length % 2 !== 0) {\n                throw new InvalidArgumentError(\"headers array must be even\");\n            }\n            for(let i = 0; i < headers.length; i += 2){\n                processHeader(request, headers[i], headers[i + 1], true);\n            }\n        } else if (headers && typeof headers === \"object\") {\n            const keys = Object.keys(headers);\n            for(let i = 0; i < keys.length; i++){\n                const key = keys[i];\n                processHeader(request, key, headers[key], true);\n            }\n        } else if (headers != null) {\n            throw new InvalidArgumentError(\"headers must be an object or an array\");\n        }\n        return request;\n    }\n    static [kHTTP2CopyHeaders](raw) {\n        const rawHeaders = raw.split(\"\\r\\n\");\n        const headers = {};\n        for (const header of rawHeaders){\n            const [key, value] = header.split(\": \");\n            if (value == null || value.length === 0) continue;\n            if (headers[key]) headers[key] += `,${value}`;\n            else headers[key] = value;\n        }\n        return headers;\n    }\n}\nfunction processHeaderValue(key, val, skipAppend) {\n    if (val && typeof val === \"object\") {\n        throw new InvalidArgumentError(`invalid ${key} header`);\n    }\n    val = val != null ? `${val}` : \"\";\n    if (headerCharRegex.exec(val) !== null) {\n        throw new InvalidArgumentError(`invalid ${key} header`);\n    }\n    return skipAppend ? val : `${key}: ${val}\\r\\n`;\n}\nfunction processHeader(request, key, val, skipAppend = false) {\n    if (val && typeof val === \"object\" && !Array.isArray(val)) {\n        throw new InvalidArgumentError(`invalid ${key} header`);\n    } else if (val === undefined) {\n        return;\n    }\n    if (request.host === null && key.length === 4 && key.toLowerCase() === \"host\") {\n        if (headerCharRegex.exec(val) !== null) {\n            throw new InvalidArgumentError(`invalid ${key} header`);\n        }\n        // Consumed by Client\n        request.host = val;\n    } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === \"content-length\") {\n        request.contentLength = parseInt(val, 10);\n        if (!Number.isFinite(request.contentLength)) {\n            throw new InvalidArgumentError(\"invalid content-length header\");\n        }\n    } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === \"content-type\") {\n        request.contentType = val;\n        if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend);\n        else request.headers += processHeaderValue(key, val);\n    } else if (key.length === 17 && key.toLowerCase() === \"transfer-encoding\") {\n        throw new InvalidArgumentError(\"invalid transfer-encoding header\");\n    } else if (key.length === 10 && key.toLowerCase() === \"connection\") {\n        const value = typeof val === \"string\" ? val.toLowerCase() : null;\n        if (value !== \"close\" && value !== \"keep-alive\") {\n            throw new InvalidArgumentError(\"invalid connection header\");\n        } else if (value === \"close\") {\n            request.reset = true;\n        }\n    } else if (key.length === 10 && key.toLowerCase() === \"keep-alive\") {\n        throw new InvalidArgumentError(\"invalid keep-alive header\");\n    } else if (key.length === 7 && key.toLowerCase() === \"upgrade\") {\n        throw new InvalidArgumentError(\"invalid upgrade header\");\n    } else if (key.length === 6 && key.toLowerCase() === \"expect\") {\n        throw new NotSupportedError(\"expect header not supported\");\n    } else if (tokenRegExp.exec(key) === null) {\n        throw new InvalidArgumentError(\"invalid header key\");\n    } else {\n        if (Array.isArray(val)) {\n            for(let i = 0; i < val.length; i++){\n                if (skipAppend) {\n                    if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`;\n                    else request.headers[key] = processHeaderValue(key, val[i], skipAppend);\n                } else {\n                    request.headers += processHeaderValue(key, val[i]);\n                }\n            }\n        } else {\n            if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend);\n            else request.headers += processHeaderValue(key, val);\n        }\n    }\n}\nmodule.exports = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/symbols.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/core/symbols.js ***!
  \*************************************************/
/***/ ((module) => {

eval("module.exports = {\n    kClose: Symbol(\"close\"),\n    kDestroy: Symbol(\"destroy\"),\n    kDispatch: Symbol(\"dispatch\"),\n    kUrl: Symbol(\"url\"),\n    kWriting: Symbol(\"writing\"),\n    kResuming: Symbol(\"resuming\"),\n    kQueue: Symbol(\"queue\"),\n    kConnect: Symbol(\"connect\"),\n    kConnecting: Symbol(\"connecting\"),\n    kHeadersList: Symbol(\"headers list\"),\n    kKeepAliveDefaultTimeout: Symbol(\"default keep alive timeout\"),\n    kKeepAliveMaxTimeout: Symbol(\"max keep alive timeout\"),\n    kKeepAliveTimeoutThreshold: Symbol(\"keep alive timeout threshold\"),\n    kKeepAliveTimeoutValue: Symbol(\"keep alive timeout\"),\n    kKeepAlive: Symbol(\"keep alive\"),\n    kHeadersTimeout: Symbol(\"headers timeout\"),\n    kBodyTimeout: Symbol(\"body timeout\"),\n    kServerName: Symbol(\"server name\"),\n    kLocalAddress: Symbol(\"local address\"),\n    kHost: Symbol(\"host\"),\n    kNoRef: Symbol(\"no ref\"),\n    kBodyUsed: Symbol(\"used\"),\n    kRunning: Symbol(\"running\"),\n    kBlocking: Symbol(\"blocking\"),\n    kPending: Symbol(\"pending\"),\n    kSize: Symbol(\"size\"),\n    kBusy: Symbol(\"busy\"),\n    kQueued: Symbol(\"queued\"),\n    kFree: Symbol(\"free\"),\n    kConnected: Symbol(\"connected\"),\n    kClosed: Symbol(\"closed\"),\n    kNeedDrain: Symbol(\"need drain\"),\n    kReset: Symbol(\"reset\"),\n    kDestroyed: Symbol.for(\"nodejs.stream.destroyed\"),\n    kMaxHeadersSize: Symbol(\"max headers size\"),\n    kRunningIdx: Symbol(\"running index\"),\n    kPendingIdx: Symbol(\"pending index\"),\n    kError: Symbol(\"error\"),\n    kClients: Symbol(\"clients\"),\n    kClient: Symbol(\"client\"),\n    kParser: Symbol(\"parser\"),\n    kOnDestroyed: Symbol(\"destroy callbacks\"),\n    kPipelining: Symbol(\"pipelining\"),\n    kSocket: Symbol(\"socket\"),\n    kHostHeader: Symbol(\"host header\"),\n    kConnector: Symbol(\"connector\"),\n    kStrictContentLength: Symbol(\"strict content length\"),\n    kMaxRedirections: Symbol(\"maxRedirections\"),\n    kMaxRequests: Symbol(\"maxRequestsPerClient\"),\n    kProxy: Symbol(\"proxy agent options\"),\n    kCounter: Symbol(\"socket request counter\"),\n    kInterceptors: Symbol(\"dispatch interceptors\"),\n    kMaxResponseSize: Symbol(\"max response size\"),\n    kHTTP2Session: Symbol(\"http2Session\"),\n    kHTTP2SessionState: Symbol(\"http2Session state\"),\n    kHTTP2BuildRequest: Symbol(\"http2 build request\"),\n    kHTTP1BuildRequest: Symbol(\"http1 build request\"),\n    kHTTP2CopyHeaders: Symbol(\"http2 copy headers\"),\n    kHTTPConnVersion: Symbol(\"http connection version\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9jb3JlL3N5bWJvbHMuanM/ZTU3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAga0Nsb3NlOiBTeW1ib2woJ2Nsb3NlJyksXG4gIGtEZXN0cm95OiBTeW1ib2woJ2Rlc3Ryb3knKSxcbiAga0Rpc3BhdGNoOiBTeW1ib2woJ2Rpc3BhdGNoJyksXG4gIGtVcmw6IFN5bWJvbCgndXJsJyksXG4gIGtXcml0aW5nOiBTeW1ib2woJ3dyaXRpbmcnKSxcbiAga1Jlc3VtaW5nOiBTeW1ib2woJ3Jlc3VtaW5nJyksXG4gIGtRdWV1ZTogU3ltYm9sKCdxdWV1ZScpLFxuICBrQ29ubmVjdDogU3ltYm9sKCdjb25uZWN0JyksXG4gIGtDb25uZWN0aW5nOiBTeW1ib2woJ2Nvbm5lY3RpbmcnKSxcbiAga0hlYWRlcnNMaXN0OiBTeW1ib2woJ2hlYWRlcnMgbGlzdCcpLFxuICBrS2VlcEFsaXZlRGVmYXVsdFRpbWVvdXQ6IFN5bWJvbCgnZGVmYXVsdCBrZWVwIGFsaXZlIHRpbWVvdXQnKSxcbiAga0tlZXBBbGl2ZU1heFRpbWVvdXQ6IFN5bWJvbCgnbWF4IGtlZXAgYWxpdmUgdGltZW91dCcpLFxuICBrS2VlcEFsaXZlVGltZW91dFRocmVzaG9sZDogU3ltYm9sKCdrZWVwIGFsaXZlIHRpbWVvdXQgdGhyZXNob2xkJyksXG4gIGtLZWVwQWxpdmVUaW1lb3V0VmFsdWU6IFN5bWJvbCgna2VlcCBhbGl2ZSB0aW1lb3V0JyksXG4gIGtLZWVwQWxpdmU6IFN5bWJvbCgna2VlcCBhbGl2ZScpLFxuICBrSGVhZGVyc1RpbWVvdXQ6IFN5bWJvbCgnaGVhZGVycyB0aW1lb3V0JyksXG4gIGtCb2R5VGltZW91dDogU3ltYm9sKCdib2R5IHRpbWVvdXQnKSxcbiAga1NlcnZlck5hbWU6IFN5bWJvbCgnc2VydmVyIG5hbWUnKSxcbiAga0xvY2FsQWRkcmVzczogU3ltYm9sKCdsb2NhbCBhZGRyZXNzJyksXG4gIGtIb3N0OiBTeW1ib2woJ2hvc3QnKSxcbiAga05vUmVmOiBTeW1ib2woJ25vIHJlZicpLFxuICBrQm9keVVzZWQ6IFN5bWJvbCgndXNlZCcpLFxuICBrUnVubmluZzogU3ltYm9sKCdydW5uaW5nJyksXG4gIGtCbG9ja2luZzogU3ltYm9sKCdibG9ja2luZycpLFxuICBrUGVuZGluZzogU3ltYm9sKCdwZW5kaW5nJyksXG4gIGtTaXplOiBTeW1ib2woJ3NpemUnKSxcbiAga0J1c3k6IFN5bWJvbCgnYnVzeScpLFxuICBrUXVldWVkOiBTeW1ib2woJ3F1ZXVlZCcpLFxuICBrRnJlZTogU3ltYm9sKCdmcmVlJyksXG4gIGtDb25uZWN0ZWQ6IFN5bWJvbCgnY29ubmVjdGVkJyksXG4gIGtDbG9zZWQ6IFN5bWJvbCgnY2xvc2VkJyksXG4gIGtOZWVkRHJhaW46IFN5bWJvbCgnbmVlZCBkcmFpbicpLFxuICBrUmVzZXQ6IFN5bWJvbCgncmVzZXQnKSxcbiAga0Rlc3Ryb3llZDogU3ltYm9sLmZvcignbm9kZWpzLnN0cmVhbS5kZXN0cm95ZWQnKSxcbiAga01heEhlYWRlcnNTaXplOiBTeW1ib2woJ21heCBoZWFkZXJzIHNpemUnKSxcbiAga1J1bm5pbmdJZHg6IFN5bWJvbCgncnVubmluZyBpbmRleCcpLFxuICBrUGVuZGluZ0lkeDogU3ltYm9sKCdwZW5kaW5nIGluZGV4JyksXG4gIGtFcnJvcjogU3ltYm9sKCdlcnJvcicpLFxuICBrQ2xpZW50czogU3ltYm9sKCdjbGllbnRzJyksXG4gIGtDbGllbnQ6IFN5bWJvbCgnY2xpZW50JyksXG4gIGtQYXJzZXI6IFN5bWJvbCgncGFyc2VyJyksXG4gIGtPbkRlc3Ryb3llZDogU3ltYm9sKCdkZXN0cm95IGNhbGxiYWNrcycpLFxuICBrUGlwZWxpbmluZzogU3ltYm9sKCdwaXBlbGluaW5nJyksXG4gIGtTb2NrZXQ6IFN5bWJvbCgnc29ja2V0JyksXG4gIGtIb3N0SGVhZGVyOiBTeW1ib2woJ2hvc3QgaGVhZGVyJyksXG4gIGtDb25uZWN0b3I6IFN5bWJvbCgnY29ubmVjdG9yJyksXG4gIGtTdHJpY3RDb250ZW50TGVuZ3RoOiBTeW1ib2woJ3N0cmljdCBjb250ZW50IGxlbmd0aCcpLFxuICBrTWF4UmVkaXJlY3Rpb25zOiBTeW1ib2woJ21heFJlZGlyZWN0aW9ucycpLFxuICBrTWF4UmVxdWVzdHM6IFN5bWJvbCgnbWF4UmVxdWVzdHNQZXJDbGllbnQnKSxcbiAga1Byb3h5OiBTeW1ib2woJ3Byb3h5IGFnZW50IG9wdGlvbnMnKSxcbiAga0NvdW50ZXI6IFN5bWJvbCgnc29ja2V0IHJlcXVlc3QgY291bnRlcicpLFxuICBrSW50ZXJjZXB0b3JzOiBTeW1ib2woJ2Rpc3BhdGNoIGludGVyY2VwdG9ycycpLFxuICBrTWF4UmVzcG9uc2VTaXplOiBTeW1ib2woJ21heCByZXNwb25zZSBzaXplJyksXG4gIGtIVFRQMlNlc3Npb246IFN5bWJvbCgnaHR0cDJTZXNzaW9uJyksXG4gIGtIVFRQMlNlc3Npb25TdGF0ZTogU3ltYm9sKCdodHRwMlNlc3Npb24gc3RhdGUnKSxcbiAga0hUVFAyQnVpbGRSZXF1ZXN0OiBTeW1ib2woJ2h0dHAyIGJ1aWxkIHJlcXVlc3QnKSxcbiAga0hUVFAxQnVpbGRSZXF1ZXN0OiBTeW1ib2woJ2h0dHAxIGJ1aWxkIHJlcXVlc3QnKSxcbiAga0hUVFAyQ29weUhlYWRlcnM6IFN5bWJvbCgnaHR0cDIgY29weSBoZWFkZXJzJyksXG4gIGtIVFRQQ29ublZlcnNpb246IFN5bWJvbCgnaHR0cCBjb25uZWN0aW9uIHZlcnNpb24nKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJrQ2xvc2UiLCJTeW1ib2wiLCJrRGVzdHJveSIsImtEaXNwYXRjaCIsImtVcmwiLCJrV3JpdGluZyIsImtSZXN1bWluZyIsImtRdWV1ZSIsImtDb25uZWN0Iiwia0Nvbm5lY3RpbmciLCJrSGVhZGVyc0xpc3QiLCJrS2VlcEFsaXZlRGVmYXVsdFRpbWVvdXQiLCJrS2VlcEFsaXZlTWF4VGltZW91dCIsImtLZWVwQWxpdmVUaW1lb3V0VGhyZXNob2xkIiwia0tlZXBBbGl2ZVRpbWVvdXRWYWx1ZSIsImtLZWVwQWxpdmUiLCJrSGVhZGVyc1RpbWVvdXQiLCJrQm9keVRpbWVvdXQiLCJrU2VydmVyTmFtZSIsImtMb2NhbEFkZHJlc3MiLCJrSG9zdCIsImtOb1JlZiIsImtCb2R5VXNlZCIsImtSdW5uaW5nIiwia0Jsb2NraW5nIiwia1BlbmRpbmciLCJrU2l6ZSIsImtCdXN5Iiwia1F1ZXVlZCIsImtGcmVlIiwia0Nvbm5lY3RlZCIsImtDbG9zZWQiLCJrTmVlZERyYWluIiwia1Jlc2V0Iiwia0Rlc3Ryb3llZCIsImZvciIsImtNYXhIZWFkZXJzU2l6ZSIsImtSdW5uaW5nSWR4Iiwia1BlbmRpbmdJZHgiLCJrRXJyb3IiLCJrQ2xpZW50cyIsImtDbGllbnQiLCJrUGFyc2VyIiwia09uRGVzdHJveWVkIiwia1BpcGVsaW5pbmciLCJrU29ja2V0Iiwia0hvc3RIZWFkZXIiLCJrQ29ubmVjdG9yIiwia1N0cmljdENvbnRlbnRMZW5ndGgiLCJrTWF4UmVkaXJlY3Rpb25zIiwia01heFJlcXVlc3RzIiwia1Byb3h5Iiwia0NvdW50ZXIiLCJrSW50ZXJjZXB0b3JzIiwia01heFJlc3BvbnNlU2l6ZSIsImtIVFRQMlNlc3Npb24iLCJrSFRUUDJTZXNzaW9uU3RhdGUiLCJrSFRUUDJCdWlsZFJlcXVlc3QiLCJrSFRUUDFCdWlsZFJlcXVlc3QiLCJrSFRUUDJDb3B5SGVhZGVycyIsImtIVFRQQ29ublZlcnNpb24iXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsUUFBUUMsT0FBTztJQUNmQyxVQUFVRCxPQUFPO0lBQ2pCRSxXQUFXRixPQUFPO0lBQ2xCRyxNQUFNSCxPQUFPO0lBQ2JJLFVBQVVKLE9BQU87SUFDakJLLFdBQVdMLE9BQU87SUFDbEJNLFFBQVFOLE9BQU87SUFDZk8sVUFBVVAsT0FBTztJQUNqQlEsYUFBYVIsT0FBTztJQUNwQlMsY0FBY1QsT0FBTztJQUNyQlUsMEJBQTBCVixPQUFPO0lBQ2pDVyxzQkFBc0JYLE9BQU87SUFDN0JZLDRCQUE0QlosT0FBTztJQUNuQ2Esd0JBQXdCYixPQUFPO0lBQy9CYyxZQUFZZCxPQUFPO0lBQ25CZSxpQkFBaUJmLE9BQU87SUFDeEJnQixjQUFjaEIsT0FBTztJQUNyQmlCLGFBQWFqQixPQUFPO0lBQ3BCa0IsZUFBZWxCLE9BQU87SUFDdEJtQixPQUFPbkIsT0FBTztJQUNkb0IsUUFBUXBCLE9BQU87SUFDZnFCLFdBQVdyQixPQUFPO0lBQ2xCc0IsVUFBVXRCLE9BQU87SUFDakJ1QixXQUFXdkIsT0FBTztJQUNsQndCLFVBQVV4QixPQUFPO0lBQ2pCeUIsT0FBT3pCLE9BQU87SUFDZDBCLE9BQU8xQixPQUFPO0lBQ2QyQixTQUFTM0IsT0FBTztJQUNoQjRCLE9BQU81QixPQUFPO0lBQ2Q2QixZQUFZN0IsT0FBTztJQUNuQjhCLFNBQVM5QixPQUFPO0lBQ2hCK0IsWUFBWS9CLE9BQU87SUFDbkJnQyxRQUFRaEMsT0FBTztJQUNmaUMsWUFBWWpDLE9BQU9rQyxHQUFHLENBQUM7SUFDdkJDLGlCQUFpQm5DLE9BQU87SUFDeEJvQyxhQUFhcEMsT0FBTztJQUNwQnFDLGFBQWFyQyxPQUFPO0lBQ3BCc0MsUUFBUXRDLE9BQU87SUFDZnVDLFVBQVV2QyxPQUFPO0lBQ2pCd0MsU0FBU3hDLE9BQU87SUFDaEJ5QyxTQUFTekMsT0FBTztJQUNoQjBDLGNBQWMxQyxPQUFPO0lBQ3JCMkMsYUFBYTNDLE9BQU87SUFDcEI0QyxTQUFTNUMsT0FBTztJQUNoQjZDLGFBQWE3QyxPQUFPO0lBQ3BCOEMsWUFBWTlDLE9BQU87SUFDbkIrQyxzQkFBc0IvQyxPQUFPO0lBQzdCZ0Qsa0JBQWtCaEQsT0FBTztJQUN6QmlELGNBQWNqRCxPQUFPO0lBQ3JCa0QsUUFBUWxELE9BQU87SUFDZm1ELFVBQVVuRCxPQUFPO0lBQ2pCb0QsZUFBZXBELE9BQU87SUFDdEJxRCxrQkFBa0JyRCxPQUFPO0lBQ3pCc0QsZUFBZXRELE9BQU87SUFDdEJ1RCxvQkFBb0J2RCxPQUFPO0lBQzNCd0Qsb0JBQW9CeEQsT0FBTztJQUMzQnlELG9CQUFvQnpELE9BQU87SUFDM0IwRCxtQkFBbUIxRCxPQUFPO0lBQzFCMkQsa0JBQWtCM0QsT0FBTztBQUMzQiIsImZpbGUiOiIoc3NyKS8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL2NvcmUvc3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/core/util.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/core/util.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { kDestroyed, kBodyUsed } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { IncomingMessage } = __webpack_require__(/*! http */ \"http\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { Blob } = __webpack_require__(/*! buffer */ \"buffer\");\nconst nodeUtil = __webpack_require__(/*! util */ \"util\");\nconst { stringify } = __webpack_require__(/*! querystring */ \"querystring\");\nconst [nodeMajor, nodeMinor] = process.versions.node.split(\".\").map((v)=>Number(v));\nfunction nop() {}\nfunction isStream(obj) {\n    return obj && typeof obj === \"object\" && typeof obj.pipe === \"function\" && typeof obj.on === \"function\";\n}\n// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)\nfunction isBlobLike(object) {\n    return Blob && object instanceof Blob || object && typeof object === \"object\" && (typeof object.stream === \"function\" || typeof object.arrayBuffer === \"function\") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n}\nfunction buildURL(url, queryParams) {\n    if (url.includes(\"?\") || url.includes(\"#\")) {\n        throw new Error('Query params cannot be passed when url already contains \"?\" or \"#\".');\n    }\n    const stringified = stringify(queryParams);\n    if (stringified) {\n        url += \"?\" + stringified;\n    }\n    return url;\n}\nfunction parseURL(url) {\n    if (typeof url === \"string\") {\n        url = new URL(url);\n        if (!/^https?:/.test(url.origin || url.protocol)) {\n            throw new InvalidArgumentError(\"Invalid URL protocol: the URL must start with `http:` or `https:`.\");\n        }\n        return url;\n    }\n    if (!url || typeof url !== \"object\") {\n        throw new InvalidArgumentError(\"Invalid URL: The URL argument must be a non-null object.\");\n    }\n    if (!/^https?:/.test(url.origin || url.protocol)) {\n        throw new InvalidArgumentError(\"Invalid URL protocol: the URL must start with `http:` or `https:`.\");\n    }\n    if (!(url instanceof URL)) {\n        if (url.port != null && url.port !== \"\" && !Number.isFinite(parseInt(url.port))) {\n            throw new InvalidArgumentError(\"Invalid URL: port must be a valid integer or a string representation of an integer.\");\n        }\n        if (url.path != null && typeof url.path !== \"string\") {\n            throw new InvalidArgumentError(\"Invalid URL path: the path must be a string or null/undefined.\");\n        }\n        if (url.pathname != null && typeof url.pathname !== \"string\") {\n            throw new InvalidArgumentError(\"Invalid URL pathname: the pathname must be a string or null/undefined.\");\n        }\n        if (url.hostname != null && typeof url.hostname !== \"string\") {\n            throw new InvalidArgumentError(\"Invalid URL hostname: the hostname must be a string or null/undefined.\");\n        }\n        if (url.origin != null && typeof url.origin !== \"string\") {\n            throw new InvalidArgumentError(\"Invalid URL origin: the origin must be a string or null/undefined.\");\n        }\n        const port = url.port != null ? url.port : url.protocol === \"https:\" ? 443 : 80;\n        let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;\n        let path = url.path != null ? url.path : `${url.pathname || \"\"}${url.search || \"\"}`;\n        if (origin.endsWith(\"/\")) {\n            origin = origin.substring(0, origin.length - 1);\n        }\n        if (path && !path.startsWith(\"/\")) {\n            path = `/${path}`;\n        }\n        // new URL(path, origin) is unsafe when `path` contains an absolute URL\n        // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:\n        // If first parameter is a relative URL, second param is required, and will be used as the base URL.\n        // If first parameter is an absolute URL, a given second param will be ignored.\n        url = new URL(origin + path);\n    }\n    return url;\n}\nfunction parseOrigin(url) {\n    url = parseURL(url);\n    if (url.pathname !== \"/\" || url.search || url.hash) {\n        throw new InvalidArgumentError(\"invalid url\");\n    }\n    return url;\n}\nfunction getHostname(host) {\n    if (host[0] === \"[\") {\n        const idx = host.indexOf(\"]\");\n        assert(idx !== -1);\n        return host.substr(1, idx - 1);\n    }\n    const idx = host.indexOf(\":\");\n    if (idx === -1) return host;\n    return host.substr(0, idx);\n}\n// IP addresses are not valid server names per RFC6066\n// > Currently, the only server names supported are DNS hostnames\nfunction getServerName(host) {\n    if (!host) {\n        return null;\n    }\n    assert.strictEqual(typeof host, \"string\");\n    const servername = getHostname(host);\n    if (net.isIP(servername)) {\n        return \"\";\n    }\n    return servername;\n}\nfunction deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nfunction isAsyncIterable(obj) {\n    return !!(obj != null && typeof obj[Symbol.asyncIterator] === \"function\");\n}\nfunction isIterable(obj) {\n    return !!(obj != null && (typeof obj[Symbol.iterator] === \"function\" || typeof obj[Symbol.asyncIterator] === \"function\"));\n}\nfunction bodyLength(body) {\n    if (body == null) {\n        return 0;\n    } else if (isStream(body)) {\n        const state = body._readableState;\n        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;\n    } else if (isBlobLike(body)) {\n        return body.size != null ? body.size : null;\n    } else if (isBuffer(body)) {\n        return body.byteLength;\n    }\n    return null;\n}\nfunction isDestroyed(stream) {\n    return !stream || !!(stream.destroyed || stream[kDestroyed]);\n}\nfunction isReadableAborted(stream) {\n    const state = stream && stream._readableState;\n    return isDestroyed(stream) && state && !state.endEmitted;\n}\nfunction destroy(stream, err) {\n    if (!isStream(stream) || isDestroyed(stream)) {\n        return;\n    }\n    if (typeof stream.destroy === \"function\") {\n        if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {\n            // See: https://github.com/nodejs/node/pull/38505/files\n            stream.socket = null;\n        }\n        stream.destroy(err);\n    } else if (err) {\n        process.nextTick((stream, err)=>{\n            stream.emit(\"error\", err);\n        }, stream, err);\n    }\n    if (stream.destroyed !== true) {\n        stream[kDestroyed] = true;\n    }\n}\nconst KEEPALIVE_TIMEOUT_EXPR = /timeout=(\\d+)/;\nfunction parseKeepAliveTimeout(val) {\n    const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);\n    return m ? parseInt(m[1], 10) * 1000 : null;\n}\nfunction parseHeaders(headers, obj = {}) {\n    // For H2 support\n    if (!Array.isArray(headers)) return headers;\n    for(let i = 0; i < headers.length; i += 2){\n        const key = headers[i].toString().toLowerCase();\n        let val = obj[key];\n        if (!val) {\n            if (Array.isArray(headers[i + 1])) {\n                obj[key] = headers[i + 1];\n            } else {\n                obj[key] = headers[i + 1].toString(\"utf8\");\n            }\n        } else {\n            if (!Array.isArray(val)) {\n                val = [\n                    val\n                ];\n                obj[key] = val;\n            }\n            val.push(headers[i + 1].toString(\"utf8\"));\n        }\n    }\n    // See https://github.com/nodejs/node/pull/46528\n    if (\"content-length\" in obj && \"content-disposition\" in obj) {\n        obj[\"content-disposition\"] = Buffer.from(obj[\"content-disposition\"]).toString(\"latin1\");\n    }\n    return obj;\n}\nfunction parseRawHeaders(headers) {\n    const ret = [];\n    let hasContentLength = false;\n    let contentDispositionIdx = -1;\n    for(let n = 0; n < headers.length; n += 2){\n        const key = headers[n + 0].toString();\n        const val = headers[n + 1].toString(\"utf8\");\n        if (key.length === 14 && (key === \"content-length\" || key.toLowerCase() === \"content-length\")) {\n            ret.push(key, val);\n            hasContentLength = true;\n        } else if (key.length === 19 && (key === \"content-disposition\" || key.toLowerCase() === \"content-disposition\")) {\n            contentDispositionIdx = ret.push(key, val) - 1;\n        } else {\n            ret.push(key, val);\n        }\n    }\n    // See https://github.com/nodejs/node/pull/46528\n    if (hasContentLength && contentDispositionIdx !== -1) {\n        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString(\"latin1\");\n    }\n    return ret;\n}\nfunction isBuffer(buffer) {\n    // See, https://github.com/mcollina/undici/pull/319\n    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);\n}\nfunction validateHandler(handler, method, upgrade) {\n    if (!handler || typeof handler !== \"object\") {\n        throw new InvalidArgumentError(\"handler must be an object\");\n    }\n    if (typeof handler.onConnect !== \"function\") {\n        throw new InvalidArgumentError(\"invalid onConnect method\");\n    }\n    if (typeof handler.onError !== \"function\") {\n        throw new InvalidArgumentError(\"invalid onError method\");\n    }\n    if (typeof handler.onBodySent !== \"function\" && handler.onBodySent !== undefined) {\n        throw new InvalidArgumentError(\"invalid onBodySent method\");\n    }\n    if (upgrade || method === \"CONNECT\") {\n        if (typeof handler.onUpgrade !== \"function\") {\n            throw new InvalidArgumentError(\"invalid onUpgrade method\");\n        }\n    } else {\n        if (typeof handler.onHeaders !== \"function\") {\n            throw new InvalidArgumentError(\"invalid onHeaders method\");\n        }\n        if (typeof handler.onData !== \"function\") {\n            throw new InvalidArgumentError(\"invalid onData method\");\n        }\n        if (typeof handler.onComplete !== \"function\") {\n            throw new InvalidArgumentError(\"invalid onComplete method\");\n        }\n    }\n}\n// A body is disturbed if it has been read from and it cannot\n// be re-used without losing state or data.\nfunction isDisturbed(body) {\n    return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?\n     : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));\n}\nfunction isErrored(body) {\n    return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));\n}\nfunction isReadable(body) {\n    return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));\n}\nfunction getSocketInfo(socket) {\n    return {\n        localAddress: socket.localAddress,\n        localPort: socket.localPort,\n        remoteAddress: socket.remoteAddress,\n        remotePort: socket.remotePort,\n        remoteFamily: socket.remoteFamily,\n        timeout: socket.timeout,\n        bytesWritten: socket.bytesWritten,\n        bytesRead: socket.bytesRead\n    };\n}\nasync function* convertIterableToBuffer(iterable) {\n    for await (const chunk of iterable){\n        yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);\n    }\n}\nlet ReadableStream;\nfunction ReadableStreamFrom(iterable) {\n    if (!ReadableStream) {\n        ReadableStream = (__webpack_require__(/*! stream/web */ \"stream/web\").ReadableStream);\n    }\n    if (ReadableStream.from) {\n        return ReadableStream.from(convertIterableToBuffer(iterable));\n    }\n    let iterator;\n    return new ReadableStream({\n        async start () {\n            iterator = iterable[Symbol.asyncIterator]();\n        },\n        async pull (controller) {\n            const { done, value } = await iterator.next();\n            if (done) {\n                queueMicrotask(()=>{\n                    controller.close();\n                });\n            } else {\n                const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);\n                controller.enqueue(new Uint8Array(buf));\n            }\n            return controller.desiredSize > 0;\n        },\n        async cancel (reason) {\n            await iterator.return();\n        }\n    }, 0);\n}\n// The chunk should be a FormData instance and contains\n// all the required methods.\nfunction isFormDataLike(object) {\n    return object && typeof object === \"object\" && typeof object.append === \"function\" && typeof object.delete === \"function\" && typeof object.get === \"function\" && typeof object.getAll === \"function\" && typeof object.has === \"function\" && typeof object.set === \"function\" && object[Symbol.toStringTag] === \"FormData\";\n}\nfunction throwIfAborted(signal) {\n    if (!signal) {\n        return;\n    }\n    if (typeof signal.throwIfAborted === \"function\") {\n        signal.throwIfAborted();\n    } else {\n        if (signal.aborted) {\n            // DOMException not available < v17.0.0\n            const err = new Error(\"The operation was aborted\");\n            err.name = \"AbortError\";\n            throw err;\n        }\n    }\n}\nlet events;\nfunction addAbortListener(signal, listener) {\n    if (typeof Symbol.dispose === \"symbol\") {\n        if (!events) {\n            events = __webpack_require__(/*! events */ \"events\");\n        }\n        if (typeof events.addAbortListener === \"function\" && \"aborted\" in signal) {\n            return events.addAbortListener(signal, listener);\n        }\n    }\n    if (\"addEventListener\" in signal) {\n        signal.addEventListener(\"abort\", listener, {\n            once: true\n        });\n        return ()=>signal.removeEventListener(\"abort\", listener);\n    }\n    signal.addListener(\"abort\", listener);\n    return ()=>signal.removeListener(\"abort\", listener);\n}\nconst hasToWellFormed = !!String.prototype.toWellFormed;\n/**\n * @param {string} val\n */ function toUSVString(val) {\n    if (hasToWellFormed) {\n        return `${val}`.toWellFormed();\n    } else if (nodeUtil.toUSVString) {\n        return nodeUtil.toUSVString(val);\n    }\n    return `${val}`;\n}\nconst kEnumerableProperty = Object.create(null);\nkEnumerableProperty.enumerable = true;\nmodule.exports = {\n    kEnumerableProperty,\n    nop,\n    isDisturbed,\n    isErrored,\n    isReadable,\n    toUSVString,\n    isReadableAborted,\n    isBlobLike,\n    parseOrigin,\n    parseURL,\n    getServerName,\n    isStream,\n    isIterable,\n    isAsyncIterable,\n    isDestroyed,\n    parseRawHeaders,\n    parseHeaders,\n    parseKeepAliveTimeout,\n    destroy,\n    bodyLength,\n    deepClone,\n    ReadableStreamFrom,\n    isBuffer,\n    validateHandler,\n    getSocketInfo,\n    isFormDataLike,\n    buildURL,\n    throwIfAborted,\n    addAbortListener,\n    nodeMajor,\n    nodeMinor,\n    nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/core/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher-base.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/dispatcher-base.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Dispatcher = __webpack_require__(/*! ./dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher.js\");\nconst { ClientDestroyedError, ClientClosedError, InvalidArgumentError } = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { kDestroy, kClose, kDispatch, kInterceptors } = __webpack_require__(/*! ./core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst kDestroyed = Symbol(\"destroyed\");\nconst kClosed = Symbol(\"closed\");\nconst kOnDestroyed = Symbol(\"onDestroyed\");\nconst kOnClosed = Symbol(\"onClosed\");\nconst kInterceptedDispatch = Symbol(\"Intercepted Dispatch\");\nclass DispatcherBase extends Dispatcher {\n    constructor(){\n        super();\n        this[kDestroyed] = false;\n        this[kOnDestroyed] = null;\n        this[kClosed] = false;\n        this[kOnClosed] = [];\n    }\n    get destroyed() {\n        return this[kDestroyed];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get interceptors() {\n        return this[kInterceptors];\n    }\n    set interceptors(newInterceptors) {\n        if (newInterceptors) {\n            for(let i = newInterceptors.length - 1; i >= 0; i--){\n                const interceptor = this[kInterceptors][i];\n                if (typeof interceptor !== \"function\") {\n                    throw new InvalidArgumentError(\"interceptor must be an function\");\n                }\n            }\n        }\n        this[kInterceptors] = newInterceptors;\n    }\n    close(callback) {\n        if (callback === undefined) {\n            return new Promise((resolve, reject)=>{\n                this.close((err, data)=>{\n                    return err ? reject(err) : resolve(data);\n                });\n            });\n        }\n        if (typeof callback !== \"function\") {\n            throw new InvalidArgumentError(\"invalid callback\");\n        }\n        if (this[kDestroyed]) {\n            queueMicrotask(()=>callback(new ClientDestroyedError(), null));\n            return;\n        }\n        if (this[kClosed]) {\n            if (this[kOnClosed]) {\n                this[kOnClosed].push(callback);\n            } else {\n                queueMicrotask(()=>callback(null, null));\n            }\n            return;\n        }\n        this[kClosed] = true;\n        this[kOnClosed].push(callback);\n        const onClosed = ()=>{\n            const callbacks = this[kOnClosed];\n            this[kOnClosed] = null;\n            for(let i = 0; i < callbacks.length; i++){\n                callbacks[i](null, null);\n            }\n        };\n        // Should not error.\n        this[kClose]().then(()=>this.destroy()).then(()=>{\n            queueMicrotask(onClosed);\n        });\n    }\n    destroy(err, callback) {\n        if (typeof err === \"function\") {\n            callback = err;\n            err = null;\n        }\n        if (callback === undefined) {\n            return new Promise((resolve, reject)=>{\n                this.destroy(err, (err, data)=>{\n                    return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data);\n                });\n            });\n        }\n        if (typeof callback !== \"function\") {\n            throw new InvalidArgumentError(\"invalid callback\");\n        }\n        if (this[kDestroyed]) {\n            if (this[kOnDestroyed]) {\n                this[kOnDestroyed].push(callback);\n            } else {\n                queueMicrotask(()=>callback(null, null));\n            }\n            return;\n        }\n        if (!err) {\n            err = new ClientDestroyedError();\n        }\n        this[kDestroyed] = true;\n        this[kOnDestroyed] = this[kOnDestroyed] || [];\n        this[kOnDestroyed].push(callback);\n        const onDestroyed = ()=>{\n            const callbacks = this[kOnDestroyed];\n            this[kOnDestroyed] = null;\n            for(let i = 0; i < callbacks.length; i++){\n                callbacks[i](null, null);\n            }\n        };\n        // Should not error.\n        this[kDestroy](err).then(()=>{\n            queueMicrotask(onDestroyed);\n        });\n    }\n    [kInterceptedDispatch](opts, handler) {\n        if (!this[kInterceptors] || this[kInterceptors].length === 0) {\n            this[kInterceptedDispatch] = this[kDispatch];\n            return this[kDispatch](opts, handler);\n        }\n        let dispatch = this[kDispatch].bind(this);\n        for(let i = this[kInterceptors].length - 1; i >= 0; i--){\n            dispatch = this[kInterceptors][i](dispatch);\n        }\n        this[kInterceptedDispatch] = dispatch;\n        return dispatch(opts, handler);\n    }\n    dispatch(opts, handler) {\n        if (!handler || typeof handler !== \"object\") {\n            throw new InvalidArgumentError(\"handler must be an object\");\n        }\n        try {\n            if (!opts || typeof opts !== \"object\") {\n                throw new InvalidArgumentError(\"opts must be an object.\");\n            }\n            if (this[kDestroyed] || this[kOnDestroyed]) {\n                throw new ClientDestroyedError();\n            }\n            if (this[kClosed]) {\n                throw new ClientClosedError();\n            }\n            return this[kInterceptedDispatch](opts, handler);\n        } catch (err) {\n            if (typeof handler.onError !== \"function\") {\n                throw new InvalidArgumentError(\"invalid onError method\");\n            }\n            handler.onError(err);\n            return false;\n        }\n    }\n}\nmodule.exports = DispatcherBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/dispatcher.js":
/*!***********************************************!*\
  !*** ./node_modules/undici/lib/dispatcher.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nclass Dispatcher extends EventEmitter {\n    dispatch() {\n        throw new Error(\"not implemented\");\n    }\n    close() {\n        throw new Error(\"not implemented\");\n    }\n    destroy() {\n        throw new Error(\"not implemented\");\n    }\n}\nmodule.exports = Dispatcher;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9kaXNwYXRjaGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsZUFBZUMsbUJBQU9BLENBQUM7QUFFN0IsTUFBTUMsbUJBQW1CRjtJQUN2QkcsV0FBWTtRQUNWLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUVBQyxRQUFTO1FBQ1AsTUFBTSxJQUFJRCxNQUFNO0lBQ2xCO0lBRUFFLFVBQVc7UUFDVCxNQUFNLElBQUlGLE1BQU07SUFDbEI7QUFDRjtBQUVBRyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvZGlzcGF0Y2hlci5qcz9mYzE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKVxuXG5jbGFzcyBEaXNwYXRjaGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgZGlzcGF0Y2ggKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJylcbiAgfVxuXG4gIGNsb3NlICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEaXNwYXRjaGVyXG4iXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwicmVxdWlyZSIsIkRpc3BhdGNoZXIiLCJkaXNwYXRjaCIsIkVycm9yIiwiY2xvc2UiLCJkZXN0cm95IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/dispatcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/body.js":
/*!***********************************************!*\
  !*** ./node_modules/undici/lib/fetch/body.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Busboy = __webpack_require__(/*! @fastify/busboy */ \"(ssr)/./node_modules/@fastify/busboy/lib/main.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { ReadableStreamFrom, isBlobLike, isReadableStreamLike, readableStreamClose, createDeferredPromise, fullyReadBody } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst { FormData } = __webpack_require__(/*! ./formdata */ \"(ssr)/./node_modules/undici/lib/fetch/formdata.js\");\nconst { kState } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fetch/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { DOMException, structuredClone } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/fetch/constants.js\");\nconst { Blob, File: NativeFile } = __webpack_require__(/*! buffer */ \"buffer\");\nconst { kBodyUsed } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { isErrored } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { isUint8Array, isArrayBuffer } = __webpack_require__(/*! util/types */ \"util/types\");\nconst { File: UndiciFile } = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/undici/lib/fetch/file.js\");\nconst { parseMIMEType, serializeAMimeType } = __webpack_require__(/*! ./dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nlet ReadableStream = globalThis.ReadableStream;\n/** @type {globalThis['File']} */ const File = NativeFile ?? UndiciFile;\n// https://fetch.spec.whatwg.org/#concept-bodyinit-extract\nfunction extractBody(object, keepalive = false) {\n    if (!ReadableStream) {\n        ReadableStream = (__webpack_require__(/*! stream/web */ \"stream/web\").ReadableStream);\n    }\n    // 1. Let stream be null.\n    let stream = null;\n    // 2. If object is a ReadableStream object, then set stream to object.\n    if (object instanceof ReadableStream) {\n        stream = object;\n    } else if (isBlobLike(object)) {\n        // 3. Otherwise, if object is a Blob object, set stream to the\n        //    result of running object’s get stream.\n        stream = object.stream();\n    } else {\n        // 4. Otherwise, set stream to a new ReadableStream object, and set\n        //    up stream.\n        stream = new ReadableStream({\n            async pull (controller) {\n                controller.enqueue(typeof source === \"string\" ? new TextEncoder().encode(source) : source);\n                queueMicrotask(()=>readableStreamClose(controller));\n            },\n            start () {},\n            type: undefined\n        });\n    }\n    // 5. Assert: stream is a ReadableStream object.\n    assert(isReadableStreamLike(stream));\n    // 6. Let action be null.\n    let action = null;\n    // 7. Let source be null.\n    let source = null;\n    // 8. Let length be null.\n    let length = null;\n    // 9. Let type be null.\n    let type = null;\n    // 10. Switch on object:\n    if (typeof object === \"string\") {\n        // Set source to the UTF-8 encoding of object.\n        // Note: setting source to a Uint8Array here breaks some mocking assumptions.\n        source = object;\n        // Set type to `text/plain;charset=UTF-8`.\n        type = \"text/plain;charset=UTF-8\";\n    } else if (object instanceof URLSearchParams) {\n        // URLSearchParams\n        // spec says to run application/x-www-form-urlencoded on body.list\n        // this is implemented in Node.js as apart of an URLSearchParams instance toString method\n        // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490\n        // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100\n        // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.\n        source = object.toString();\n        // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.\n        type = \"application/x-www-form-urlencoded;charset=UTF-8\";\n    } else if (isArrayBuffer(object)) {\n        // BufferSource/ArrayBuffer\n        // Set source to a copy of the bytes held by object.\n        source = new Uint8Array(object.slice());\n    } else if (ArrayBuffer.isView(object)) {\n        // BufferSource/ArrayBufferView\n        // Set source to a copy of the bytes held by object.\n        source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));\n    } else if (util.isFormDataLike(object)) {\n        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, \"0\")}`;\n        const prefix = `--${boundary}\\r\\nContent-Disposition: form-data`;\n        /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ const escape = (str)=>str.replace(/\\n/g, \"%0A\").replace(/\\r/g, \"%0D\").replace(/\"/g, \"%22\");\n        const normalizeLinefeeds = (value)=>value.replace(/\\r?\\n|\\r/g, \"\\r\\n\");\n        // Set action to this step: run the multipart/form-data\n        // encoding algorithm, with object’s entry list and UTF-8.\n        // - This ensures that the body is immutable and can't be changed afterwords\n        // - That the content-length is calculated in advance.\n        // - And that all parts are pre-encoded and ready to be sent.\n        const enc = new TextEncoder();\n        const blobParts = [];\n        const rn = new Uint8Array([\n            13,\n            10\n        ]) // '\\r\\n'\n        ;\n        length = 0;\n        let hasUnknownSizeValue = false;\n        for (const [name, value] of object){\n            if (typeof value === \"string\") {\n                const chunk = enc.encode(prefix + `; name=\"${escape(normalizeLinefeeds(name))}\"` + `\\r\\n\\r\\n${normalizeLinefeeds(value)}\\r\\n`);\n                blobParts.push(chunk);\n                length += chunk.byteLength;\n            } else {\n                const chunk = enc.encode(`${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"` + (value.name ? `; filename=\"${escape(value.name)}\"` : \"\") + \"\\r\\n\" + `Content-Type: ${value.type || \"application/octet-stream\"}\\r\\n\\r\\n`);\n                blobParts.push(chunk, value, rn);\n                if (typeof value.size === \"number\") {\n                    length += chunk.byteLength + value.size + rn.byteLength;\n                } else {\n                    hasUnknownSizeValue = true;\n                }\n            }\n        }\n        const chunk = enc.encode(`--${boundary}--`);\n        blobParts.push(chunk);\n        length += chunk.byteLength;\n        if (hasUnknownSizeValue) {\n            length = null;\n        }\n        // Set source to object.\n        source = object;\n        action = async function*() {\n            for (const part of blobParts){\n                if (part.stream) {\n                    yield* part.stream();\n                } else {\n                    yield part;\n                }\n            }\n        };\n        // Set type to `multipart/form-data; boundary=`,\n        // followed by the multipart/form-data boundary string generated\n        // by the multipart/form-data encoding algorithm.\n        type = \"multipart/form-data; boundary=\" + boundary;\n    } else if (isBlobLike(object)) {\n        // Blob\n        // Set source to object.\n        source = object;\n        // Set length to object’s size.\n        length = object.size;\n        // If object’s type attribute is not the empty byte sequence, set\n        // type to its value.\n        if (object.type) {\n            type = object.type;\n        }\n    } else if (typeof object[Symbol.asyncIterator] === \"function\") {\n        // If keepalive is true, then throw a TypeError.\n        if (keepalive) {\n            throw new TypeError(\"keepalive\");\n        }\n        // If object is disturbed or locked, then throw a TypeError.\n        if (util.isDisturbed(object) || object.locked) {\n            throw new TypeError(\"Response body object should not be disturbed or locked\");\n        }\n        stream = object instanceof ReadableStream ? object : ReadableStreamFrom(object);\n    }\n    // 11. If source is a byte sequence, then set action to a\n    // step that returns source and length to source’s length.\n    if (typeof source === \"string\" || util.isBuffer(source)) {\n        length = Buffer.byteLength(source);\n    }\n    // 12. If action is non-null, then run these steps in in parallel:\n    if (action != null) {\n        // Run action.\n        let iterator;\n        stream = new ReadableStream({\n            async start () {\n                iterator = action(object)[Symbol.asyncIterator]();\n            },\n            async pull (controller) {\n                const { value, done } = await iterator.next();\n                if (done) {\n                    // When running action is done, close stream.\n                    queueMicrotask(()=>{\n                        controller.close();\n                    });\n                } else {\n                    // Whenever one or more bytes are available and stream is not errored,\n                    // enqueue a Uint8Array wrapping an ArrayBuffer containing the available\n                    // bytes into stream.\n                    if (!isErrored(stream)) {\n                        controller.enqueue(new Uint8Array(value));\n                    }\n                }\n                return controller.desiredSize > 0;\n            },\n            async cancel (reason) {\n                await iterator.return();\n            },\n            type: undefined\n        });\n    }\n    // 13. Let body be a body whose stream is stream, source is source,\n    // and length is length.\n    const body = {\n        stream,\n        source,\n        length\n    };\n    // 14. Return (body, type).\n    return [\n        body,\n        type\n    ];\n}\n// https://fetch.spec.whatwg.org/#bodyinit-safely-extract\nfunction safelyExtractBody(object, keepalive = false) {\n    if (!ReadableStream) {\n        // istanbul ignore next\n        ReadableStream = (__webpack_require__(/*! stream/web */ \"stream/web\").ReadableStream);\n    }\n    // To safely extract a body and a `Content-Type` value from\n    // a byte sequence or BodyInit object object, run these steps:\n    // 1. If object is a ReadableStream object, then:\n    if (object instanceof ReadableStream) {\n        // Assert: object is neither disturbed nor locked.\n        // istanbul ignore next\n        assert(!util.isDisturbed(object), \"The body has already been consumed.\");\n        // istanbul ignore next\n        assert(!object.locked, \"The stream is locked.\");\n    }\n    // 2. Return the results of extracting object.\n    return extractBody(object, keepalive);\n}\nfunction cloneBody(body) {\n    // To clone a body body, run these steps:\n    // https://fetch.spec.whatwg.org/#concept-body-clone\n    // 1. Let « out1, out2 » be the result of teeing body’s stream.\n    const [out1, out2] = body.stream.tee();\n    const out2Clone = structuredClone(out2, {\n        transfer: [\n            out2\n        ]\n    });\n    // This, for whatever reasons, unrefs out2Clone which allows\n    // the process to exit by itself.\n    const [, finalClone] = out2Clone.tee();\n    // 2. Set body’s stream to out1.\n    body.stream = out1;\n    // 3. Return a body whose stream is out2 and other members are copied from body.\n    return {\n        stream: finalClone,\n        length: body.length,\n        source: body.source\n    };\n}\nasync function* consumeBody(body) {\n    if (body) {\n        if (isUint8Array(body)) {\n            yield body;\n        } else {\n            const stream = body.stream;\n            if (util.isDisturbed(stream)) {\n                throw new TypeError(\"The body has already been consumed.\");\n            }\n            if (stream.locked) {\n                throw new TypeError(\"The stream is locked.\");\n            }\n            // Compat.\n            stream[kBodyUsed] = true;\n            yield* stream;\n        }\n    }\n}\nfunction throwIfAborted(state) {\n    if (state.aborted) {\n        throw new DOMException(\"The operation was aborted.\", \"AbortError\");\n    }\n}\nfunction bodyMixinMethods(instance) {\n    const methods = {\n        blob () {\n            // The blob() method steps are to return the result of\n            // running consume body with this and the following step\n            // given a byte sequence bytes: return a Blob whose\n            // contents are bytes and whose type attribute is this’s\n            // MIME type.\n            return specConsumeBody(this, (bytes)=>{\n                let mimeType = bodyMimeType(this);\n                if (mimeType === \"failure\") {\n                    mimeType = \"\";\n                } else if (mimeType) {\n                    mimeType = serializeAMimeType(mimeType);\n                }\n                // Return a Blob whose contents are bytes and type attribute\n                // is mimeType.\n                return new Blob([\n                    bytes\n                ], {\n                    type: mimeType\n                });\n            }, instance);\n        },\n        arrayBuffer () {\n            // The arrayBuffer() method steps are to return the result\n            // of running consume body with this and the following step\n            // given a byte sequence bytes: return a new ArrayBuffer\n            // whose contents are bytes.\n            return specConsumeBody(this, (bytes)=>{\n                return new Uint8Array(bytes).buffer;\n            }, instance);\n        },\n        text () {\n            // The text() method steps are to return the result of running\n            // consume body with this and UTF-8 decode.\n            return specConsumeBody(this, utf8DecodeBytes, instance);\n        },\n        json () {\n            // The json() method steps are to return the result of running\n            // consume body with this and parse JSON from bytes.\n            return specConsumeBody(this, parseJSONFromBytes, instance);\n        },\n        async formData () {\n            webidl.brandCheck(this, instance);\n            throwIfAborted(this[kState]);\n            const contentType = this.headers.get(\"Content-Type\");\n            // If mimeType’s essence is \"multipart/form-data\", then:\n            if (/multipart\\/form-data/.test(contentType)) {\n                const headers = {};\n                for (const [key, value] of this.headers)headers[key.toLowerCase()] = value;\n                const responseFormData = new FormData();\n                let busboy;\n                try {\n                    busboy = new Busboy({\n                        headers,\n                        preservePath: true\n                    });\n                } catch (err) {\n                    throw new DOMException(`${err}`, \"AbortError\");\n                }\n                busboy.on(\"field\", (name, value)=>{\n                    responseFormData.append(name, value);\n                });\n                busboy.on(\"file\", (name, value, filename, encoding, mimeType)=>{\n                    const chunks = [];\n                    if (encoding === \"base64\" || encoding.toLowerCase() === \"base64\") {\n                        let base64chunk = \"\";\n                        value.on(\"data\", (chunk)=>{\n                            base64chunk += chunk.toString().replace(/[\\r\\n]/gm, \"\");\n                            const end = base64chunk.length - base64chunk.length % 4;\n                            chunks.push(Buffer.from(base64chunk.slice(0, end), \"base64\"));\n                            base64chunk = base64chunk.slice(end);\n                        });\n                        value.on(\"end\", ()=>{\n                            chunks.push(Buffer.from(base64chunk, \"base64\"));\n                            responseFormData.append(name, new File(chunks, filename, {\n                                type: mimeType\n                            }));\n                        });\n                    } else {\n                        value.on(\"data\", (chunk)=>{\n                            chunks.push(chunk);\n                        });\n                        value.on(\"end\", ()=>{\n                            responseFormData.append(name, new File(chunks, filename, {\n                                type: mimeType\n                            }));\n                        });\n                    }\n                });\n                const busboyResolve = new Promise((resolve, reject)=>{\n                    busboy.on(\"finish\", resolve);\n                    busboy.on(\"error\", (err)=>reject(new TypeError(err)));\n                });\n                if (this.body !== null) for await (const chunk of consumeBody(this[kState].body))busboy.write(chunk);\n                busboy.end();\n                await busboyResolve;\n                return responseFormData;\n            } else if (/application\\/x-www-form-urlencoded/.test(contentType)) {\n                // Otherwise, if mimeType’s essence is \"application/x-www-form-urlencoded\", then:\n                // 1. Let entries be the result of parsing bytes.\n                let entries;\n                try {\n                    let text = \"\";\n                    // application/x-www-form-urlencoded parser will keep the BOM.\n                    // https://url.spec.whatwg.org/#concept-urlencoded-parser\n                    const textDecoder = new TextDecoder(\"utf-8\", {\n                        ignoreBOM: true\n                    });\n                    for await (const chunk of consumeBody(this[kState].body)){\n                        if (!isUint8Array(chunk)) {\n                            throw new TypeError(\"Expected Uint8Array chunk\");\n                        }\n                        text += textDecoder.decode(chunk, {\n                            stream: true\n                        });\n                    }\n                    text += textDecoder.decode();\n                    entries = new URLSearchParams(text);\n                } catch (err) {\n                    // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.\n                    // 2. If entries is failure, then throw a TypeError.\n                    throw Object.assign(new TypeError(), {\n                        cause: err\n                    });\n                }\n                // 3. Return a new FormData object whose entries are entries.\n                const formData = new FormData();\n                for (const [name, value] of entries){\n                    formData.append(name, value);\n                }\n                return formData;\n            } else {\n                // Wait a tick before checking if the request has been aborted.\n                // Otherwise, a TypeError can be thrown when an AbortError should.\n                await Promise.resolve();\n                throwIfAborted(this[kState]);\n                // Otherwise, throw a TypeError.\n                throw webidl.errors.exception({\n                    header: `${instance.name}.formData`,\n                    message: \"Could not parse content as FormData.\"\n                });\n            }\n        }\n    };\n    return methods;\n}\nfunction mixinBody(prototype) {\n    Object.assign(prototype.prototype, bodyMixinMethods(prototype));\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-consume-body\n * @param {Response|Request} object\n * @param {(value: unknown) => unknown} convertBytesToJSValue\n * @param {Response|Request} instance\n */ async function specConsumeBody(object, convertBytesToJSValue, instance) {\n    webidl.brandCheck(object, instance);\n    throwIfAborted(object[kState]);\n    // 1. If object is unusable, then return a promise rejected\n    //    with a TypeError.\n    if (bodyUnusable(object[kState].body)) {\n        throw new TypeError(\"Body is unusable\");\n    }\n    // 2. Let promise be a new promise.\n    const promise = createDeferredPromise();\n    // 3. Let errorSteps given error be to reject promise with error.\n    const errorSteps = (error)=>promise.reject(error);\n    // 4. Let successSteps given a byte sequence data be to resolve\n    //    promise with the result of running convertBytesToJSValue\n    //    with data. If that threw an exception, then run errorSteps\n    //    with that exception.\n    const successSteps = (data)=>{\n        try {\n            promise.resolve(convertBytesToJSValue(data));\n        } catch (e) {\n            errorSteps(e);\n        }\n    };\n    // 5. If object’s body is null, then run successSteps with an\n    //    empty byte sequence.\n    if (object[kState].body == null) {\n        successSteps(new Uint8Array());\n        return promise.promise;\n    }\n    // 6. Otherwise, fully read object’s body given successSteps,\n    //    errorSteps, and object’s relevant global object.\n    await fullyReadBody(object[kState].body, successSteps, errorSteps);\n    // 7. Return promise.\n    return promise.promise;\n}\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction bodyUnusable(body) {\n    // An object including the Body interface mixin is\n    // said to be unusable if its body is non-null and\n    // its body’s stream is disturbed or locked.\n    return body != null && (body.stream.locked || util.isDisturbed(body.stream));\n}\n/**\n * @see https://encoding.spec.whatwg.org/#utf-8-decode\n * @param {Buffer} buffer\n */ function utf8DecodeBytes(buffer) {\n    if (buffer.length === 0) {\n        return \"\";\n    }\n    // 1. Let buffer be the result of peeking three bytes from\n    //    ioQueue, converted to a byte sequence.\n    // 2. If buffer is 0xEF 0xBB 0xBF, then read three\n    //    bytes from ioQueue. (Do nothing with those bytes.)\n    if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n        buffer = buffer.subarray(3);\n    }\n    // 3. Process a queue with an instance of UTF-8’s\n    //    decoder, ioQueue, output, and \"replacement\".\n    const output = new TextDecoder().decode(buffer);\n    // 4. Return output.\n    return output;\n}\n/**\n * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value\n * @param {Uint8Array} bytes\n */ function parseJSONFromBytes(bytes) {\n    return JSON.parse(utf8DecodeBytes(bytes));\n}\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-mime-type\n * @param {import('./response').Response|import('./request').Request} object\n */ function bodyMimeType(object) {\n    const { headersList } = object[kState];\n    const contentType = headersList.get(\"content-type\");\n    if (contentType === null) {\n        return \"failure\";\n    }\n    return parseMIMEType(contentType);\n}\nmodule.exports = {\n    extractBody,\n    safelyExtractBody,\n    cloneBody,\n    mixinBody\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/body.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/fetch/constants.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { MessageChannel, receiveMessageOnPort } = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst corsSafeListedMethods = [\n    \"GET\",\n    \"HEAD\",\n    \"POST\"\n];\nconst nullBodyStatus = [\n    101,\n    204,\n    205,\n    304\n];\nconst redirectStatus = [\n    301,\n    302,\n    303,\n    307,\n    308\n];\n// https://fetch.spec.whatwg.org/#block-bad-port\nconst badPorts = [\n    \"1\",\n    \"7\",\n    \"9\",\n    \"11\",\n    \"13\",\n    \"15\",\n    \"17\",\n    \"19\",\n    \"20\",\n    \"21\",\n    \"22\",\n    \"23\",\n    \"25\",\n    \"37\",\n    \"42\",\n    \"43\",\n    \"53\",\n    \"69\",\n    \"77\",\n    \"79\",\n    \"87\",\n    \"95\",\n    \"101\",\n    \"102\",\n    \"103\",\n    \"104\",\n    \"109\",\n    \"110\",\n    \"111\",\n    \"113\",\n    \"115\",\n    \"117\",\n    \"119\",\n    \"123\",\n    \"135\",\n    \"137\",\n    \"139\",\n    \"143\",\n    \"161\",\n    \"179\",\n    \"389\",\n    \"427\",\n    \"465\",\n    \"512\",\n    \"513\",\n    \"514\",\n    \"515\",\n    \"526\",\n    \"530\",\n    \"531\",\n    \"532\",\n    \"540\",\n    \"548\",\n    \"554\",\n    \"556\",\n    \"563\",\n    \"587\",\n    \"601\",\n    \"636\",\n    \"989\",\n    \"990\",\n    \"993\",\n    \"995\",\n    \"1719\",\n    \"1720\",\n    \"1723\",\n    \"2049\",\n    \"3659\",\n    \"4045\",\n    \"5060\",\n    \"5061\",\n    \"6000\",\n    \"6566\",\n    \"6665\",\n    \"6666\",\n    \"6667\",\n    \"6668\",\n    \"6669\",\n    \"6697\",\n    \"10080\"\n];\n// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\nconst referrerPolicy = [\n    \"\",\n    \"no-referrer\",\n    \"no-referrer-when-downgrade\",\n    \"same-origin\",\n    \"origin\",\n    \"strict-origin\",\n    \"origin-when-cross-origin\",\n    \"strict-origin-when-cross-origin\",\n    \"unsafe-url\"\n];\nconst requestRedirect = [\n    \"follow\",\n    \"manual\",\n    \"error\"\n];\nconst safeMethods = [\n    \"GET\",\n    \"HEAD\",\n    \"OPTIONS\",\n    \"TRACE\"\n];\nconst requestMode = [\n    \"navigate\",\n    \"same-origin\",\n    \"no-cors\",\n    \"cors\"\n];\nconst requestCredentials = [\n    \"omit\",\n    \"same-origin\",\n    \"include\"\n];\nconst requestCache = [\n    \"default\",\n    \"no-store\",\n    \"reload\",\n    \"no-cache\",\n    \"force-cache\",\n    \"only-if-cached\"\n];\n// https://fetch.spec.whatwg.org/#request-body-header-name\nconst requestBodyHeader = [\n    \"content-encoding\",\n    \"content-language\",\n    \"content-location\",\n    \"content-type\",\n    // See https://github.com/nodejs/undici/issues/2021\n    // 'Content-Length' is a forbidden header name, which is typically\n    // removed in the Headers implementation. However, undici doesn't\n    // filter out headers, so we add it here.\n    \"content-length\"\n];\n// https://fetch.spec.whatwg.org/#enumdef-requestduplex\nconst requestDuplex = [\n    \"half\"\n];\n// http://fetch.spec.whatwg.org/#forbidden-method\nconst forbiddenMethods = [\n    \"CONNECT\",\n    \"TRACE\",\n    \"TRACK\"\n];\nconst subresource = [\n    \"audio\",\n    \"audioworklet\",\n    \"font\",\n    \"image\",\n    \"manifest\",\n    \"paintworklet\",\n    \"script\",\n    \"style\",\n    \"track\",\n    \"video\",\n    \"xslt\",\n    \"\"\n];\n/** @type {globalThis['DOMException']} */ const DOMException = globalThis.DOMException ?? (()=>{\n    // DOMException was only made a global in Node v17.0.0,\n    // but fetch supports >= v16.8.\n    try {\n        atob(\"~\");\n    } catch (err) {\n        return Object.getPrototypeOf(err).constructor;\n    }\n})();\nlet channel;\n/** @type {globalThis['structuredClone']} */ const structuredClone = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js\n// structuredClone was added in v17.0.0, but fetch supports v16.8\nfunction structuredClone(value, options = undefined) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"missing argument\");\n    }\n    if (!channel) {\n        channel = new MessageChannel();\n    }\n    channel.port1.unref();\n    channel.port2.unref();\n    channel.port1.postMessage(value, options?.transfer);\n    return receiveMessageOnPort(channel.port2).message;\n};\nmodule.exports = {\n    DOMException,\n    structuredClone,\n    subresource,\n    forbiddenMethods,\n    requestBodyHeader,\n    referrerPolicy,\n    requestRedirect,\n    requestMode,\n    requestCredentials,\n    requestCache,\n    redirectStatus,\n    corsSafeListedMethods,\n    nullBodyStatus,\n    safeMethods,\n    badPorts,\n    requestDuplex\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/dataURL.js":
/*!**************************************************!*\
  !*** ./node_modules/undici/lib/fetch/dataURL.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const assert = __webpack_require__(/*! assert */ \"assert\");\nconst { atob } = __webpack_require__(/*! buffer */ \"buffer\");\nconst { isomorphicDecode } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst encoder = new TextEncoder();\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-token-code-point\n */ const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;\nconst HTTP_WHITESPACE_REGEX = /(\\u000A|\\u000D|\\u0009|\\u0020)/ // eslint-disable-line\n;\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point\n */ const HTTP_QUOTED_STRING_TOKENS = /[\\u0009|\\u0020-\\u007E|\\u0080-\\u00FF]/ // eslint-disable-line\n;\n// https://fetch.spec.whatwg.org/#data-url-processor\n/** @param {URL} dataURL */ function dataURLProcessor(dataURL) {\n    // 1. Assert: dataURL’s scheme is \"data\".\n    assert(dataURL.protocol === \"data:\");\n    // 2. Let input be the result of running the URL\n    // serializer on dataURL with exclude fragment\n    // set to true.\n    let input = URLSerializer(dataURL, true);\n    // 3. Remove the leading \"data:\" string from input.\n    input = input.slice(5);\n    // 4. Let position point at the start of input.\n    const position = {\n        position: 0\n    };\n    // 5. Let mimeType be the result of collecting a\n    // sequence of code points that are not equal\n    // to U+002C (,), given position.\n    let mimeType = collectASequenceOfCodePointsFast(\",\", input, position);\n    // 6. Strip leading and trailing ASCII whitespace\n    // from mimeType.\n    // Undici implementation note: we need to store the\n    // length because if the mimetype has spaces removed,\n    // the wrong amount will be sliced from the input in\n    // step #9\n    const mimeTypeLength = mimeType.length;\n    mimeType = removeASCIIWhitespace(mimeType, true, true);\n    // 7. If position is past the end of input, then\n    // return failure\n    if (position.position >= input.length) {\n        return \"failure\";\n    }\n    // 8. Advance position by 1.\n    position.position++;\n    // 9. Let encodedBody be the remainder of input.\n    const encodedBody = input.slice(mimeTypeLength + 1);\n    // 10. Let body be the percent-decoding of encodedBody.\n    let body = stringPercentDecode(encodedBody);\n    // 11. If mimeType ends with U+003B (;), followed by\n    // zero or more U+0020 SPACE, followed by an ASCII\n    // case-insensitive match for \"base64\", then:\n    if (/;(\\u0020){0,}base64$/i.test(mimeType)) {\n        // 1. Let stringBody be the isomorphic decode of body.\n        const stringBody = isomorphicDecode(body);\n        // 2. Set body to the forgiving-base64 decode of\n        // stringBody.\n        body = forgivingBase64(stringBody);\n        // 3. If body is failure, then return failure.\n        if (body === \"failure\") {\n            return \"failure\";\n        }\n        // 4. Remove the last 6 code points from mimeType.\n        mimeType = mimeType.slice(0, -6);\n        // 5. Remove trailing U+0020 SPACE code points from mimeType,\n        // if any.\n        mimeType = mimeType.replace(/(\\u0020)+$/, \"\");\n        // 6. Remove the last U+003B (;) code point from mimeType.\n        mimeType = mimeType.slice(0, -1);\n    }\n    // 12. If mimeType starts with U+003B (;), then prepend\n    // \"text/plain\" to mimeType.\n    if (mimeType.startsWith(\";\")) {\n        mimeType = \"text/plain\" + mimeType;\n    }\n    // 13. Let mimeTypeRecord be the result of parsing\n    // mimeType.\n    let mimeTypeRecord = parseMIMEType(mimeType);\n    // 14. If mimeTypeRecord is failure, then set\n    // mimeTypeRecord to text/plain;charset=US-ASCII.\n    if (mimeTypeRecord === \"failure\") {\n        mimeTypeRecord = parseMIMEType(\"text/plain;charset=US-ASCII\");\n    }\n    // 15. Return a new data: URL struct whose MIME\n    // type is mimeTypeRecord and body is body.\n    // https://fetch.spec.whatwg.org/#data-url-struct\n    return {\n        mimeType: mimeTypeRecord,\n        body\n    };\n}\n// https://url.spec.whatwg.org/#concept-url-serializer\n/**\n * @param {URL} url\n * @param {boolean} excludeFragment\n */ function URLSerializer(url, excludeFragment = false) {\n    const href = url.href;\n    if (!excludeFragment) {\n        return href;\n    }\n    const hash = href.lastIndexOf(\"#\");\n    if (hash === -1) {\n        return href;\n    }\n    return href.slice(0, hash);\n}\n// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points\n/**\n * @param {(char: string) => boolean} condition\n * @param {string} input\n * @param {{ position: number }} position\n */ function collectASequenceOfCodePoints(condition, input, position) {\n    // 1. Let result be the empty string.\n    let result = \"\";\n    // 2. While position doesn’t point past the end of input and the\n    // code point at position within input meets the condition condition:\n    while(position.position < input.length && condition(input[position.position])){\n        // 1. Append that code point to the end of result.\n        result += input[position.position];\n        // 2. Advance position by 1.\n        position.position++;\n    }\n    // 3. Return result.\n    return result;\n}\n/**\n * A faster collectASequenceOfCodePoints that only works when comparing a single character.\n * @param {string} char\n * @param {string} input\n * @param {{ position: number }} position\n */ function collectASequenceOfCodePointsFast(char, input, position) {\n    const idx = input.indexOf(char, position.position);\n    const start = position.position;\n    if (idx === -1) {\n        position.position = input.length;\n        return input.slice(start);\n    }\n    position.position = idx;\n    return input.slice(start, position.position);\n}\n// https://url.spec.whatwg.org/#string-percent-decode\n/** @param {string} input */ function stringPercentDecode(input) {\n    // 1. Let bytes be the UTF-8 encoding of input.\n    const bytes = encoder.encode(input);\n    // 2. Return the percent-decoding of bytes.\n    return percentDecode(bytes);\n}\n// https://url.spec.whatwg.org/#percent-decode\n/** @param {Uint8Array} input */ function percentDecode(input) {\n    // 1. Let output be an empty byte sequence.\n    /** @type {number[]} */ const output = [];\n    // 2. For each byte byte in input:\n    for(let i = 0; i < input.length; i++){\n        const byte = input[i];\n        // 1. If byte is not 0x25 (%), then append byte to output.\n        if (byte !== 0x25) {\n            output.push(byte);\n        // 2. Otherwise, if byte is 0x25 (%) and the next two bytes\n        // after byte in input are not in the ranges\n        // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),\n        // and 0x61 (a) to 0x66 (f), all inclusive, append byte\n        // to output.\n        } else if (byte === 0x25 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {\n            output.push(0x25);\n        // 3. Otherwise:\n        } else {\n            // 1. Let bytePoint be the two bytes after byte in input,\n            // decoded, and then interpreted as hexadecimal number.\n            const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);\n            const bytePoint = Number.parseInt(nextTwoBytes, 16);\n            // 2. Append a byte whose value is bytePoint to output.\n            output.push(bytePoint);\n            // 3. Skip the next two bytes in input.\n            i += 2;\n        }\n    }\n    // 3. Return output.\n    return Uint8Array.from(output);\n}\n// https://mimesniff.spec.whatwg.org/#parse-a-mime-type\n/** @param {string} input */ function parseMIMEType(input) {\n    // 1. Remove any leading and trailing HTTP whitespace\n    // from input.\n    input = removeHTTPWhitespace(input, true, true);\n    // 2. Let position be a position variable for input,\n    // initially pointing at the start of input.\n    const position = {\n        position: 0\n    };\n    // 3. Let type be the result of collecting a sequence\n    // of code points that are not U+002F (/) from\n    // input, given position.\n    const type = collectASequenceOfCodePointsFast(\"/\", input, position);\n    // 4. If type is the empty string or does not solely\n    // contain HTTP token code points, then return failure.\n    // https://mimesniff.spec.whatwg.org/#http-token-code-point\n    if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {\n        return \"failure\";\n    }\n    // 5. If position is past the end of input, then return\n    // failure\n    if (position.position > input.length) {\n        return \"failure\";\n    }\n    // 6. Advance position by 1. (This skips past U+002F (/).)\n    position.position++;\n    // 7. Let subtype be the result of collecting a sequence of\n    // code points that are not U+003B (;) from input, given\n    // position.\n    let subtype = collectASequenceOfCodePointsFast(\";\", input, position);\n    // 8. Remove any trailing HTTP whitespace from subtype.\n    subtype = removeHTTPWhitespace(subtype, false, true);\n    // 9. If subtype is the empty string or does not solely\n    // contain HTTP token code points, then return failure.\n    if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {\n        return \"failure\";\n    }\n    const typeLowercase = type.toLowerCase();\n    const subtypeLowercase = subtype.toLowerCase();\n    // 10. Let mimeType be a new MIME type record whose type\n    // is type, in ASCII lowercase, and subtype is subtype,\n    // in ASCII lowercase.\n    // https://mimesniff.spec.whatwg.org/#mime-type\n    const mimeType = {\n        type: typeLowercase,\n        subtype: subtypeLowercase,\n        /** @type {Map<string, string>} */ parameters: new Map(),\n        // https://mimesniff.spec.whatwg.org/#mime-type-essence\n        essence: `${typeLowercase}/${subtypeLowercase}`\n    };\n    // 11. While position is not past the end of input:\n    while(position.position < input.length){\n        // 1. Advance position by 1. (This skips past U+003B (;).)\n        position.position++;\n        // 2. Collect a sequence of code points that are HTTP\n        // whitespace from input given position.\n        collectASequenceOfCodePoints(// https://fetch.spec.whatwg.org/#http-whitespace\n        (char)=>HTTP_WHITESPACE_REGEX.test(char), input, position);\n        // 3. Let parameterName be the result of collecting a\n        // sequence of code points that are not U+003B (;)\n        // or U+003D (=) from input, given position.\n        let parameterName = collectASequenceOfCodePoints((char)=>char !== \";\" && char !== \"=\", input, position);\n        // 4. Set parameterName to parameterName, in ASCII\n        // lowercase.\n        parameterName = parameterName.toLowerCase();\n        // 5. If position is not past the end of input, then:\n        if (position.position < input.length) {\n            // 1. If the code point at position within input is\n            // U+003B (;), then continue.\n            if (input[position.position] === \";\") {\n                continue;\n            }\n            // 2. Advance position by 1. (This skips past U+003D (=).)\n            position.position++;\n        }\n        // 6. If position is past the end of input, then break.\n        if (position.position > input.length) {\n            break;\n        }\n        // 7. Let parameterValue be null.\n        let parameterValue = null;\n        // 8. If the code point at position within input is\n        // U+0022 (\"), then:\n        if (input[position.position] === '\"') {\n            // 1. Set parameterValue to the result of collecting\n            // an HTTP quoted string from input, given position\n            // and the extract-value flag.\n            parameterValue = collectAnHTTPQuotedString(input, position, true);\n            // 2. Collect a sequence of code points that are not\n            // U+003B (;) from input, given position.\n            collectASequenceOfCodePointsFast(\";\", input, position);\n        // 9. Otherwise:\n        } else {\n            // 1. Set parameterValue to the result of collecting\n            // a sequence of code points that are not U+003B (;)\n            // from input, given position.\n            parameterValue = collectASequenceOfCodePointsFast(\";\", input, position);\n            // 2. Remove any trailing HTTP whitespace from parameterValue.\n            parameterValue = removeHTTPWhitespace(parameterValue, false, true);\n            // 3. If parameterValue is the empty string, then continue.\n            if (parameterValue.length === 0) {\n                continue;\n            }\n        }\n        // 10. If all of the following are true\n        // - parameterName is not the empty string\n        // - parameterName solely contains HTTP token code points\n        // - parameterValue solely contains HTTP quoted-string token code points\n        // - mimeType’s parameters[parameterName] does not exist\n        // then set mimeType’s parameters[parameterName] to parameterValue.\n        if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {\n            mimeType.parameters.set(parameterName, parameterValue);\n        }\n    }\n    // 12. Return mimeType.\n    return mimeType;\n}\n// https://infra.spec.whatwg.org/#forgiving-base64-decode\n/** @param {string} data */ function forgivingBase64(data) {\n    // 1. Remove all ASCII whitespace from data.\n    data = data.replace(/[\\u0009\\u000A\\u000C\\u000D\\u0020]/g, \"\") // eslint-disable-line\n    ;\n    // 2. If data’s code point length divides by 4 leaving\n    // no remainder, then:\n    if (data.length % 4 === 0) {\n        // 1. If data ends with one or two U+003D (=) code points,\n        // then remove them from data.\n        data = data.replace(/=?=$/, \"\");\n    }\n    // 3. If data’s code point length divides by 4 leaving\n    // a remainder of 1, then return failure.\n    if (data.length % 4 === 1) {\n        return \"failure\";\n    }\n    // 4. If data contains a code point that is not one of\n    //  U+002B (+)\n    //  U+002F (/)\n    //  ASCII alphanumeric\n    // then return failure.\n    if (/[^+/0-9A-Za-z]/.test(data)) {\n        return \"failure\";\n    }\n    const binary = atob(data);\n    const bytes = new Uint8Array(binary.length);\n    for(let byte = 0; byte < binary.length; byte++){\n        bytes[byte] = binary.charCodeAt(byte);\n    }\n    return bytes;\n}\n// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string\n// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string\n/**\n * @param {string} input\n * @param {{ position: number }} position\n * @param {boolean?} extractValue\n */ function collectAnHTTPQuotedString(input, position, extractValue) {\n    // 1. Let positionStart be position.\n    const positionStart = position.position;\n    // 2. Let value be the empty string.\n    let value = \"\";\n    // 3. Assert: the code point at position within input\n    // is U+0022 (\").\n    assert(input[position.position] === '\"');\n    // 4. Advance position by 1.\n    position.position++;\n    // 5. While true:\n    while(true){\n        // 1. Append the result of collecting a sequence of code points\n        // that are not U+0022 (\") or U+005C (\\) from input, given\n        // position, to value.\n        value += collectASequenceOfCodePoints((char)=>char !== '\"' && char !== \"\\\\\", input, position);\n        // 2. If position is past the end of input, then break.\n        if (position.position >= input.length) {\n            break;\n        }\n        // 3. Let quoteOrBackslash be the code point at position within\n        // input.\n        const quoteOrBackslash = input[position.position];\n        // 4. Advance position by 1.\n        position.position++;\n        // 5. If quoteOrBackslash is U+005C (\\), then:\n        if (quoteOrBackslash === \"\\\\\") {\n            // 1. If position is past the end of input, then append\n            // U+005C (\\) to value and break.\n            if (position.position >= input.length) {\n                value += \"\\\\\";\n                break;\n            }\n            // 2. Append the code point at position within input to value.\n            value += input[position.position];\n            // 3. Advance position by 1.\n            position.position++;\n        // 6. Otherwise:\n        } else {\n            // 1. Assert: quoteOrBackslash is U+0022 (\").\n            assert(quoteOrBackslash === '\"');\n            break;\n        }\n    }\n    // 6. If the extract-value flag is set, then return value.\n    if (extractValue) {\n        return value;\n    }\n    // 7. Return the code points from positionStart to position,\n    // inclusive, within input.\n    return input.slice(positionStart, position.position);\n}\n/**\n * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type\n */ function serializeAMimeType(mimeType) {\n    assert(mimeType !== \"failure\");\n    const { parameters, essence } = mimeType;\n    // 1. Let serialization be the concatenation of mimeType’s\n    //    type, U+002F (/), and mimeType’s subtype.\n    let serialization = essence;\n    // 2. For each name → value of mimeType’s parameters:\n    for (let [name, value] of parameters.entries()){\n        // 1. Append U+003B (;) to serialization.\n        serialization += \";\";\n        // 2. Append name to serialization.\n        serialization += name;\n        // 3. Append U+003D (=) to serialization.\n        serialization += \"=\";\n        // 4. If value does not solely contain HTTP token code\n        //    points or value is the empty string, then:\n        if (!HTTP_TOKEN_CODEPOINTS.test(value)) {\n            // 1. Precede each occurence of U+0022 (\") or\n            //    U+005C (\\) in value with U+005C (\\).\n            value = value.replace(/(\\\\|\")/g, \"\\\\$1\");\n            // 2. Prepend U+0022 (\") to value.\n            value = '\"' + value;\n            // 3. Append U+0022 (\") to value.\n            value += '\"';\n        }\n        // 5. Append value to serialization.\n        serialization += value;\n    }\n    // 3. Return serialization.\n    return serialization;\n}\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} char\n */ function isHTTPWhiteSpace(char) {\n    return char === \"\\r\" || char === \"\\n\" || char === \"\t\" || char === \" \";\n}\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} str\n */ function removeHTTPWhitespace(str, leading = true, trailing = true) {\n    let lead = 0;\n    let trail = str.length - 1;\n    if (leading) {\n        for(; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);\n    }\n    if (trailing) {\n        for(; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);\n    }\n    return str.slice(lead, trail + 1);\n}\n/**\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n * @param {string} char\n */ function isASCIIWhitespace(char) {\n    return char === \"\\r\" || char === \"\\n\" || char === \"\t\" || char === \"\\f\" || char === \" \";\n}\n/**\n * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n */ function removeASCIIWhitespace(str, leading = true, trailing = true) {\n    let lead = 0;\n    let trail = str.length - 1;\n    if (leading) {\n        for(; lead < str.length && isASCIIWhitespace(str[lead]); lead++);\n    }\n    if (trailing) {\n        for(; trail > 0 && isASCIIWhitespace(str[trail]); trail--);\n    }\n    return str.slice(lead, trail + 1);\n}\nmodule.exports = {\n    dataURLProcessor,\n    URLSerializer,\n    collectASequenceOfCodePoints,\n    collectASequenceOfCodePointsFast,\n    stringPercentDecode,\n    parseMIMEType,\n    collectAnHTTPQuotedString,\n    serializeAMimeType\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/dataURL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/file.js":
/*!***********************************************!*\
  !*** ./node_modules/undici/lib/fetch/file.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Blob, File: NativeFile } = __webpack_require__(/*! buffer */ \"buffer\");\nconst { types } = __webpack_require__(/*! util */ \"util\");\nconst { kState } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fetch/symbols.js\");\nconst { isBlobLike } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { parseMIMEType, serializeAMimeType } = __webpack_require__(/*! ./dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nclass File extends Blob {\n    constructor(fileBits, fileName, options = {}){\n        // The File constructor is invoked with two or three parameters, depending\n        // on whether the optional dictionary parameter is used. When the File()\n        // constructor is invoked, user agents must run the following steps:\n        webidl.argumentLengthCheck(arguments, 2, {\n            header: \"File constructor\"\n        });\n        fileBits = webidl.converters[\"sequence<BlobPart>\"](fileBits);\n        fileName = webidl.converters.USVString(fileName);\n        options = webidl.converters.FilePropertyBag(options);\n        // 1. Let bytes be the result of processing blob parts given fileBits and\n        // options.\n        // Note: Blob handles this for us\n        // 2. Let n be the fileName argument to the constructor.\n        const n = fileName;\n        // 3. Process FilePropertyBag dictionary argument by running the following\n        // substeps:\n        //    1. If the type member is provided and is not the empty string, let t\n        //    be set to the type dictionary member. If t contains any characters\n        //    outside the range U+0020 to U+007E, then set t to the empty string\n        //    and return from these substeps.\n        //    2. Convert every character in t to ASCII lowercase.\n        let t = options.type;\n        let d;\n        // eslint-disable-next-line no-labels\n        substep: {\n            if (t) {\n                t = parseMIMEType(t);\n                if (t === \"failure\") {\n                    t = \"\";\n                    break substep;\n                }\n                t = serializeAMimeType(t).toLowerCase();\n            }\n            //    3. If the lastModified member is provided, let d be set to the\n            //    lastModified dictionary member. If it is not provided, set d to the\n            //    current date and time represented as the number of milliseconds since\n            //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n            d = options.lastModified;\n        }\n        // 4. Return a new File object F such that:\n        // F refers to the bytes byte sequence.\n        // F.size is set to the number of total bytes in bytes.\n        // F.name is set to n.\n        // F.type is set to t.\n        // F.lastModified is set to d.\n        super(processBlobParts(fileBits, options), {\n            type: t\n        });\n        this[kState] = {\n            name: n,\n            lastModified: d,\n            type: t\n        };\n    }\n    get name() {\n        webidl.brandCheck(this, File);\n        return this[kState].name;\n    }\n    get lastModified() {\n        webidl.brandCheck(this, File);\n        return this[kState].lastModified;\n    }\n    get type() {\n        webidl.brandCheck(this, File);\n        return this[kState].type;\n    }\n}\nclass FileLike {\n    constructor(blobLike, fileName, options = {}){\n        // TODO: argument idl type check\n        // The File constructor is invoked with two or three parameters, depending\n        // on whether the optional dictionary parameter is used. When the File()\n        // constructor is invoked, user agents must run the following steps:\n        // 1. Let bytes be the result of processing blob parts given fileBits and\n        // options.\n        // 2. Let n be the fileName argument to the constructor.\n        const n = fileName;\n        // 3. Process FilePropertyBag dictionary argument by running the following\n        // substeps:\n        //    1. If the type member is provided and is not the empty string, let t\n        //    be set to the type dictionary member. If t contains any characters\n        //    outside the range U+0020 to U+007E, then set t to the empty string\n        //    and return from these substeps.\n        //    TODO\n        const t = options.type;\n        //    2. Convert every character in t to ASCII lowercase.\n        //    TODO\n        //    3. If the lastModified member is provided, let d be set to the\n        //    lastModified dictionary member. If it is not provided, set d to the\n        //    current date and time represented as the number of milliseconds since\n        //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n        const d = options.lastModified ?? Date.now();\n        // 4. Return a new File object F such that:\n        // F refers to the bytes byte sequence.\n        // F.size is set to the number of total bytes in bytes.\n        // F.name is set to n.\n        // F.type is set to t.\n        // F.lastModified is set to d.\n        this[kState] = {\n            blobLike,\n            name: n,\n            type: t,\n            lastModified: d\n        };\n    }\n    stream(...args) {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.stream(...args);\n    }\n    arrayBuffer(...args) {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.arrayBuffer(...args);\n    }\n    slice(...args) {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.slice(...args);\n    }\n    text(...args) {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.text(...args);\n    }\n    get size() {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.size;\n    }\n    get type() {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].blobLike.type;\n    }\n    get name() {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].name;\n    }\n    get lastModified() {\n        webidl.brandCheck(this, FileLike);\n        return this[kState].lastModified;\n    }\n    get [Symbol.toStringTag]() {\n        return \"File\";\n    }\n}\nObject.defineProperties(File.prototype, {\n    [Symbol.toStringTag]: {\n        value: \"File\",\n        configurable: true\n    },\n    name: kEnumerableProperty,\n    lastModified: kEnumerableProperty\n});\nwebidl.converters.Blob = webidl.interfaceConverter(Blob);\nwebidl.converters.BlobPart = function(V, opts) {\n    if (webidl.util.Type(V) === \"Object\") {\n        if (isBlobLike(V)) {\n            return webidl.converters.Blob(V, {\n                strict: false\n            });\n        }\n        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {\n            return webidl.converters.BufferSource(V, opts);\n        }\n    }\n    return webidl.converters.USVString(V, opts);\n};\nwebidl.converters[\"sequence<BlobPart>\"] = webidl.sequenceConverter(webidl.converters.BlobPart);\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([\n    {\n        key: \"lastModified\",\n        converter: webidl.converters[\"long long\"],\n        get defaultValue () {\n            return Date.now();\n        }\n    },\n    {\n        key: \"type\",\n        converter: webidl.converters.DOMString,\n        defaultValue: \"\"\n    },\n    {\n        key: \"endings\",\n        converter: (value)=>{\n            value = webidl.converters.DOMString(value);\n            value = value.toLowerCase();\n            if (value !== \"native\") {\n                value = \"transparent\";\n            }\n            return value;\n        },\n        defaultValue: \"transparent\"\n    }\n]);\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */ function processBlobParts(parts, options) {\n    // 1. Let bytes be an empty sequence of bytes.\n    /** @type {NodeJS.TypedArray[]} */ const bytes = [];\n    // 2. For each element in parts:\n    for (const element of parts){\n        // 1. If element is a USVString, run the following substeps:\n        if (typeof element === \"string\") {\n            // 1. Let s be element.\n            let s = element;\n            // 2. If the endings member of options is \"native\", set s\n            //    to the result of converting line endings to native\n            //    of element.\n            if (options.endings === \"native\") {\n                s = convertLineEndingsNative(s);\n            }\n            // 3. Append the result of UTF-8 encoding s to bytes.\n            bytes.push(new TextEncoder().encode(s));\n        } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {\n            // 2. If element is a BufferSource, get a copy of the\n            //    bytes held by the buffer source, and append those\n            //    bytes to bytes.\n            if (!element.buffer) {\n                bytes.push(new Uint8Array(element));\n            } else {\n                bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));\n            }\n        } else if (isBlobLike(element)) {\n            // 3. If element is a Blob, append the bytes it represents\n            //    to bytes.\n            bytes.push(element);\n        }\n    }\n    // 3. Return bytes.\n    return bytes;\n}\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */ function convertLineEndingsNative(s) {\n    // 1. Let native line ending be be the code point U+000A LF.\n    let nativeLineEnding = \"\\n\";\n    // 2. If the underlying platform’s conventions are to\n    //    represent newlines as a carriage return and line feed\n    //    sequence, set native line ending to the code point\n    //    U+000D CR followed by the code point U+000A LF.\n    if (process.platform === \"win32\") {\n        nativeLineEnding = \"\\r\\n\";\n    }\n    return s.replace(/\\r?\\n/g, nativeLineEnding);\n}\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike(object) {\n    return NativeFile && object instanceof NativeFile || object instanceof File || object && (typeof object.stream === \"function\" || typeof object.arrayBuffer === \"function\") && object[Symbol.toStringTag] === \"File\";\n}\nmodule.exports = {\n    File,\n    FileLike,\n    isFileLike\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/formdata.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/fetch/formdata.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { isBlobLike, toUSVString, makeIterator } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst { kState } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fetch/symbols.js\");\nconst { File: UndiciFile, FileLike, isFileLike } = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/undici/lib/fetch/file.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { Blob, File: NativeFile } = __webpack_require__(/*! buffer */ \"buffer\");\n/** @type {globalThis['File']} */ const File = NativeFile ?? UndiciFile;\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n    constructor(form){\n        if (form !== undefined) {\n            throw webidl.errors.conversionFailed({\n                prefix: \"FormData constructor\",\n                argument: \"Argument 1\",\n                types: [\n                    \"undefined\"\n                ]\n            });\n        }\n        this[kState] = [];\n    }\n    append(name, value, filename = undefined) {\n        webidl.brandCheck(this, FormData);\n        webidl.argumentLengthCheck(arguments, 2, {\n            header: \"FormData.append\"\n        });\n        if (arguments.length === 3 && !isBlobLike(value)) {\n            throw new TypeError(\"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\");\n        }\n        // 1. Let value be value if given; otherwise blobValue.\n        name = webidl.converters.USVString(name);\n        value = isBlobLike(value) ? webidl.converters.Blob(value, {\n            strict: false\n        }) : webidl.converters.USVString(value);\n        filename = arguments.length === 3 ? webidl.converters.USVString(filename) : undefined;\n        // 2. Let entry be the result of creating an entry with\n        // name, value, and filename if given.\n        const entry = makeEntry(name, value, filename);\n        // 3. Append entry to this’s entry list.\n        this[kState].push(entry);\n    }\n    delete(name) {\n        webidl.brandCheck(this, FormData);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FormData.delete\"\n        });\n        name = webidl.converters.USVString(name);\n        // The delete(name) method steps are to remove all entries whose name\n        // is name from this’s entry list.\n        this[kState] = this[kState].filter((entry)=>entry.name !== name);\n    }\n    get(name) {\n        webidl.brandCheck(this, FormData);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FormData.get\"\n        });\n        name = webidl.converters.USVString(name);\n        // 1. If there is no entry whose name is name in this’s entry list,\n        // then return null.\n        const idx = this[kState].findIndex((entry)=>entry.name === name);\n        if (idx === -1) {\n            return null;\n        }\n        // 2. Return the value of the first entry whose name is name from\n        // this’s entry list.\n        return this[kState][idx].value;\n    }\n    getAll(name) {\n        webidl.brandCheck(this, FormData);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FormData.getAll\"\n        });\n        name = webidl.converters.USVString(name);\n        // 1. If there is no entry whose name is name in this’s entry list,\n        // then return the empty list.\n        // 2. Return the values of all entries whose name is name, in order,\n        // from this’s entry list.\n        return this[kState].filter((entry)=>entry.name === name).map((entry)=>entry.value);\n    }\n    has(name) {\n        webidl.brandCheck(this, FormData);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FormData.has\"\n        });\n        name = webidl.converters.USVString(name);\n        // The has(name) method steps are to return true if there is an entry\n        // whose name is name in this’s entry list; otherwise false.\n        return this[kState].findIndex((entry)=>entry.name === name) !== -1;\n    }\n    set(name, value, filename = undefined) {\n        webidl.brandCheck(this, FormData);\n        webidl.argumentLengthCheck(arguments, 2, {\n            header: \"FormData.set\"\n        });\n        if (arguments.length === 3 && !isBlobLike(value)) {\n            throw new TypeError(\"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\");\n        }\n        // The set(name, value) and set(name, blobValue, filename) method steps\n        // are:\n        // 1. Let value be value if given; otherwise blobValue.\n        name = webidl.converters.USVString(name);\n        value = isBlobLike(value) ? webidl.converters.Blob(value, {\n            strict: false\n        }) : webidl.converters.USVString(value);\n        filename = arguments.length === 3 ? toUSVString(filename) : undefined;\n        // 2. Let entry be the result of creating an entry with name, value, and\n        // filename if given.\n        const entry = makeEntry(name, value, filename);\n        // 3. If there are entries in this’s entry list whose name is name, then\n        // replace the first such entry with entry and remove the others.\n        const idx = this[kState].findIndex((entry)=>entry.name === name);\n        if (idx !== -1) {\n            this[kState] = [\n                ...this[kState].slice(0, idx),\n                entry,\n                ...this[kState].slice(idx + 1).filter((entry)=>entry.name !== name)\n            ];\n        } else {\n            // 4. Otherwise, append entry to this’s entry list.\n            this[kState].push(entry);\n        }\n    }\n    entries() {\n        webidl.brandCheck(this, FormData);\n        return makeIterator(()=>this[kState].map((pair)=>[\n                    pair.name,\n                    pair.value\n                ]), \"FormData\", \"key+value\");\n    }\n    keys() {\n        webidl.brandCheck(this, FormData);\n        return makeIterator(()=>this[kState].map((pair)=>[\n                    pair.name,\n                    pair.value\n                ]), \"FormData\", \"key\");\n    }\n    values() {\n        webidl.brandCheck(this, FormData);\n        return makeIterator(()=>this[kState].map((pair)=>[\n                    pair.name,\n                    pair.value\n                ]), \"FormData\", \"value\");\n    }\n    /**\n   * @param {(value: string, key: string, self: FormData) => void} callbackFn\n   * @param {unknown} thisArg\n   */ forEach(callbackFn, thisArg = globalThis) {\n        webidl.brandCheck(this, FormData);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FormData.forEach\"\n        });\n        if (typeof callbackFn !== \"function\") {\n            throw new TypeError(\"Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.\");\n        }\n        for (const [key, value] of this){\n            callbackFn.apply(thisArg, [\n                value,\n                key,\n                this\n            ]);\n        }\n    }\n}\nFormData.prototype[Symbol.iterator] = FormData.prototype.entries;\nObject.defineProperties(FormData.prototype, {\n    [Symbol.toStringTag]: {\n        value: \"FormData\",\n        configurable: true\n    }\n});\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */ function makeEntry(name, value, filename) {\n    // 1. Set name to the result of converting name into a scalar value string.\n    // \"To convert a string into a scalar value string, replace any surrogates\n    //  with U+FFFD.\"\n    // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end\n    name = Buffer.from(name).toString(\"utf8\");\n    // 2. If value is a string, then set value to the result of converting\n    //    value into a scalar value string.\n    if (typeof value === \"string\") {\n        value = Buffer.from(value).toString(\"utf8\");\n    } else {\n        // 3. Otherwise:\n        // 1. If value is not a File object, then set value to a new File object,\n        //    representing the same bytes, whose name attribute value is \"blob\"\n        if (!isFileLike(value)) {\n            value = value instanceof Blob ? new File([\n                value\n            ], \"blob\", {\n                type: value.type\n            }) : new FileLike(value, \"blob\", {\n                type: value.type\n            });\n        }\n        // 2. If filename is given, then set value to a new File object,\n        //    representing the same bytes, whose name attribute is filename.\n        if (filename !== undefined) {\n            /** @type {FilePropertyBag} */ const options = {\n                type: value.type,\n                lastModified: value.lastModified\n            };\n            value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile ? new File([\n                value\n            ], filename, options) : new FileLike(value, filename, options);\n        }\n    }\n    // 4. Return an entry whose name is name and whose value is value.\n    return {\n        name,\n        value\n    };\n}\nmodule.exports = {\n    FormData\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/formdata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/global.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/fetch/global.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n// In case of breaking changes, increase the version\n// number to avoid conflicts.\nconst globalOrigin = Symbol.for(\"undici.globalOrigin.1\");\nfunction getGlobalOrigin() {\n    return globalThis[globalOrigin];\n}\nfunction setGlobalOrigin(newOrigin) {\n    if (newOrigin === undefined) {\n        Object.defineProperty(globalThis, globalOrigin, {\n            value: undefined,\n            writable: true,\n            enumerable: false,\n            configurable: false\n        });\n        return;\n    }\n    const parsedURL = new URL(newOrigin);\n    if (parsedURL.protocol !== \"http:\" && parsedURL.protocol !== \"https:\") {\n        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);\n    }\n    Object.defineProperty(globalThis, globalOrigin, {\n        value: parsedURL,\n        writable: true,\n        enumerable: false,\n        configurable: false\n    });\n}\nmodule.exports = {\n    getGlobalOrigin,\n    setGlobalOrigin\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9mZXRjaC9nbG9iYWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxvREFBb0Q7QUFDcEQsNkJBQTZCO0FBQzdCLE1BQU1BLGVBQWVDLE9BQU9DLEdBQUcsQ0FBQztBQUVoQyxTQUFTQztJQUNQLE9BQU9DLFVBQVUsQ0FBQ0osYUFBYTtBQUNqQztBQUVBLFNBQVNLLGdCQUFpQkMsU0FBUztJQUNqQyxJQUFJQSxjQUFjQyxXQUFXO1FBQzNCQyxPQUFPQyxjQUFjLENBQUNMLFlBQVlKLGNBQWM7WUFDOUNVLE9BQU9IO1lBQ1BJLFVBQVU7WUFDVkMsWUFBWTtZQUNaQyxjQUFjO1FBQ2hCO1FBRUE7SUFDRjtJQUVBLE1BQU1DLFlBQVksSUFBSUMsSUFBSVQ7SUFFMUIsSUFBSVEsVUFBVUUsUUFBUSxLQUFLLFdBQVdGLFVBQVVFLFFBQVEsS0FBSyxVQUFVO1FBQ3JFLE1BQU0sSUFBSUMsVUFBVSxDQUFDLDZDQUE2QyxFQUFFSCxVQUFVRSxRQUFRLENBQUMsQ0FBQztJQUMxRjtJQUVBUixPQUFPQyxjQUFjLENBQUNMLFlBQVlKLGNBQWM7UUFDOUNVLE9BQU9JO1FBQ1BILFVBQVU7UUFDVkMsWUFBWTtRQUNaQyxjQUFjO0lBQ2hCO0FBQ0Y7QUFFQUssT0FBT0MsT0FBTyxHQUFHO0lBQ2ZoQjtJQUNBRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvZmV0Y2gvZ2xvYmFsLmpzPzU4YTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8vIEluIGNhc2Ugb2YgYnJlYWtpbmcgY2hhbmdlcywgaW5jcmVhc2UgdGhlIHZlcnNpb25cbi8vIG51bWJlciB0byBhdm9pZCBjb25mbGljdHMuXG5jb25zdCBnbG9iYWxPcmlnaW4gPSBTeW1ib2wuZm9yKCd1bmRpY2kuZ2xvYmFsT3JpZ2luLjEnKVxuXG5mdW5jdGlvbiBnZXRHbG9iYWxPcmlnaW4gKCkge1xuICByZXR1cm4gZ2xvYmFsVGhpc1tnbG9iYWxPcmlnaW5dXG59XG5cbmZ1bmN0aW9uIHNldEdsb2JhbE9yaWdpbiAobmV3T3JpZ2luKSB7XG4gIGlmIChuZXdPcmlnaW4gPT09IHVuZGVmaW5lZCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxUaGlzLCBnbG9iYWxPcmlnaW4sIHtcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgIH0pXG5cbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHBhcnNlZFVSTCA9IG5ldyBVUkwobmV3T3JpZ2luKVxuXG4gIGlmIChwYXJzZWRVUkwucHJvdG9jb2wgIT09ICdodHRwOicgJiYgcGFyc2VkVVJMLnByb3RvY29sICE9PSAnaHR0cHM6Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE9ubHkgaHR0cCAmIGh0dHBzIHVybHMgYXJlIGFsbG93ZWQsIHJlY2VpdmVkICR7cGFyc2VkVVJMLnByb3RvY29sfWApXG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywgZ2xvYmFsT3JpZ2luLCB7XG4gICAgdmFsdWU6IHBhcnNlZFVSTCxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRHbG9iYWxPcmlnaW4sXG4gIHNldEdsb2JhbE9yaWdpblxufVxuIl0sIm5hbWVzIjpbImdsb2JhbE9yaWdpbiIsIlN5bWJvbCIsImZvciIsImdldEdsb2JhbE9yaWdpbiIsImdsb2JhbFRoaXMiLCJzZXRHbG9iYWxPcmlnaW4iLCJuZXdPcmlnaW4iLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwicGFyc2VkVVJMIiwiVVJMIiwicHJvdG9jb2wiLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/headers.js":
/*!**************************************************!*\
  !*** ./node_modules/undici/lib/fetch/headers.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// https://github.com/Ethan-Arrowood/undici-fetch\n\nconst { kHeadersList } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { kGuard } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fetch/symbols.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { makeIterator, isValidHeaderName, isValidHeaderValue } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst kHeadersMap = Symbol(\"headers map\");\nconst kHeadersSortedMap = Symbol(\"headers map sorted\");\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */ function headerValueNormalize(potentialValue) {\n    //  To normalize a byte sequence potentialValue, remove\n    //  any leading and trailing HTTP whitespace bytes from\n    //  potentialValue.\n    // Trimming the end with `.replace()` and a RegExp is typically subject to\n    // ReDoS. This is safer and faster.\n    let i = potentialValue.length;\n    while(/[\\r\\n\\t ]/.test(potentialValue.charAt(--i)));\n    return potentialValue.slice(0, i + 1).replace(/^[\\r\\n\\t ]+/, \"\");\n}\nfunction fill(headers, object) {\n    // To fill a Headers object headers with a given object object, run these steps:\n    // 1. If object is a sequence, then for each header in object:\n    // Note: webidl conversion to array has already been done.\n    if (Array.isArray(object)) {\n        for (const header of object){\n            // 1. If header does not contain exactly two items, then throw a TypeError.\n            if (header.length !== 2) {\n                throw webidl.errors.exception({\n                    header: \"Headers constructor\",\n                    message: `expected name/value pair to be length 2, found ${header.length}.`\n                });\n            }\n            // 2. Append (header’s first item, header’s second item) to headers.\n            headers.append(header[0], header[1]);\n        }\n    } else if (typeof object === \"object\" && object !== null) {\n        // Note: null should throw\n        // 2. Otherwise, object is a record, then for each key → value in object,\n        //    append (key, value) to headers\n        for (const [key, value] of Object.entries(object)){\n            headers.append(key, value);\n        }\n    } else {\n        throw webidl.errors.conversionFailed({\n            prefix: \"Headers constructor\",\n            argument: \"Argument 1\",\n            types: [\n                \"sequence<sequence<ByteString>>\",\n                \"record<ByteString, ByteString>\"\n            ]\n        });\n    }\n}\nclass HeadersList {\n    constructor(init){\n        /** @type {[string, string][]|null} */ this.cookies = null;\n        if (init instanceof HeadersList) {\n            this[kHeadersMap] = new Map(init[kHeadersMap]);\n            this[kHeadersSortedMap] = init[kHeadersSortedMap];\n            this.cookies = init.cookies;\n        } else {\n            this[kHeadersMap] = new Map(init);\n            this[kHeadersSortedMap] = null;\n        }\n    }\n    // https://fetch.spec.whatwg.org/#header-list-contains\n    contains(name) {\n        // A header list list contains a header name name if list\n        // contains a header whose name is a byte-case-insensitive\n        // match for name.\n        name = name.toLowerCase();\n        return this[kHeadersMap].has(name);\n    }\n    clear() {\n        this[kHeadersMap].clear();\n        this[kHeadersSortedMap] = null;\n        this.cookies = null;\n    }\n    // https://fetch.spec.whatwg.org/#concept-header-list-append\n    append(name, value) {\n        this[kHeadersSortedMap] = null;\n        // 1. If list contains name, then set name to the first such\n        //    header’s name.\n        const lowercaseName = name.toLowerCase();\n        const exists = this[kHeadersMap].get(lowercaseName);\n        // 2. Append (name, value) to list.\n        if (exists) {\n            const delimiter = lowercaseName === \"cookie\" ? \"; \" : \", \";\n            this[kHeadersMap].set(lowercaseName, {\n                name: exists.name,\n                value: `${exists.value}${delimiter}${value}`\n            });\n        } else {\n            this[kHeadersMap].set(lowercaseName, {\n                name,\n                value\n            });\n        }\n        if (lowercaseName === \"set-cookie\") {\n            this.cookies ??= [];\n            this.cookies.push(value);\n        }\n    }\n    // https://fetch.spec.whatwg.org/#concept-header-list-set\n    set(name, value) {\n        this[kHeadersSortedMap] = null;\n        const lowercaseName = name.toLowerCase();\n        if (lowercaseName === \"set-cookie\") {\n            this.cookies = [\n                value\n            ];\n        }\n        // 1. If list contains name, then set the value of\n        //    the first such header to value and remove the\n        //    others.\n        // 2. Otherwise, append header (name, value) to list.\n        return this[kHeadersMap].set(lowercaseName, {\n            name,\n            value\n        });\n    }\n    // https://fetch.spec.whatwg.org/#concept-header-list-delete\n    delete(name) {\n        this[kHeadersSortedMap] = null;\n        name = name.toLowerCase();\n        if (name === \"set-cookie\") {\n            this.cookies = null;\n        }\n        return this[kHeadersMap].delete(name);\n    }\n    // https://fetch.spec.whatwg.org/#concept-header-list-get\n    get(name) {\n        // 1. If list does not contain name, then return null.\n        if (!this.contains(name)) {\n            return null;\n        }\n        // 2. Return the values of all headers in list whose name\n        //    is a byte-case-insensitive match for name,\n        //    separated from each other by 0x2C 0x20, in order.\n        return this[kHeadersMap].get(name.toLowerCase())?.value ?? null;\n    }\n    *[Symbol.iterator]() {\n        // use the lowercased name\n        for (const [name, { value }] of this[kHeadersMap]){\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n    get entries() {\n        const headers = {};\n        if (this[kHeadersMap].size) {\n            for (const { name, value } of this[kHeadersMap].values()){\n                headers[name] = value;\n            }\n        }\n        return headers;\n    }\n}\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n    constructor(init = undefined){\n        this[kHeadersList] = new HeadersList();\n        // The new Headers(init) constructor steps are:\n        // 1. Set this’s guard to \"none\".\n        this[kGuard] = \"none\";\n        // 2. If init is given, then fill this with init.\n        if (init !== undefined) {\n            init = webidl.converters.HeadersInit(init);\n            fill(this, init);\n        }\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-append\n    append(name, value) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 2, {\n            header: \"Headers.append\"\n        });\n        name = webidl.converters.ByteString(name);\n        value = webidl.converters.ByteString(value);\n        // 1. Normalize value.\n        value = headerValueNormalize(value);\n        // 2. If name is not a header name or value is not a\n        //    header value, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix: \"Headers.append\",\n                value: name,\n                type: \"header name\"\n            });\n        } else if (!isValidHeaderValue(value)) {\n            throw webidl.errors.invalidArgument({\n                prefix: \"Headers.append\",\n                value,\n                type: \"header value\"\n            });\n        }\n        // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n        // 4. Otherwise, if headers’s guard is \"request\" and name is a\n        //    forbidden header name, return.\n        // Note: undici does not implement forbidden header names\n        if (this[kGuard] === \"immutable\") {\n            throw new TypeError(\"immutable\");\n        } else if (this[kGuard] === \"request-no-cors\") {\n        // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n        // TODO\n        }\n        // 6. Otherwise, if headers’s guard is \"response\" and name is a\n        //    forbidden response-header name, return.\n        // 7. Append (name, value) to headers’s header list.\n        // 8. If headers’s guard is \"request-no-cors\", then remove\n        //    privileged no-CORS request headers from headers\n        return this[kHeadersList].append(name, value);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-delete\n    delete(name) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Headers.delete\"\n        });\n        name = webidl.converters.ByteString(name);\n        // 1. If name is not a header name, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix: \"Headers.delete\",\n                value: name,\n                type: \"header name\"\n            });\n        }\n        // 2. If this’s guard is \"immutable\", then throw a TypeError.\n        // 3. Otherwise, if this’s guard is \"request\" and name is a\n        //    forbidden header name, return.\n        // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n        //    is not a no-CORS-safelisted request-header name, and\n        //    name is not a privileged no-CORS request-header name,\n        //    return.\n        // 5. Otherwise, if this’s guard is \"response\" and name is\n        //    a forbidden response-header name, return.\n        // Note: undici does not implement forbidden header names\n        if (this[kGuard] === \"immutable\") {\n            throw new TypeError(\"immutable\");\n        } else if (this[kGuard] === \"request-no-cors\") {\n        // TODO\n        }\n        // 6. If this’s header list does not contain name, then\n        //    return.\n        if (!this[kHeadersList].contains(name)) {\n            return;\n        }\n        // 7. Delete name from this’s header list.\n        // 8. If this’s guard is \"request-no-cors\", then remove\n        //    privileged no-CORS request headers from this.\n        return this[kHeadersList].delete(name);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-get\n    get(name) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Headers.get\"\n        });\n        name = webidl.converters.ByteString(name);\n        // 1. If name is not a header name, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix: \"Headers.get\",\n                value: name,\n                type: \"header name\"\n            });\n        }\n        // 2. Return the result of getting name from this’s header\n        //    list.\n        return this[kHeadersList].get(name);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-has\n    has(name) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Headers.has\"\n        });\n        name = webidl.converters.ByteString(name);\n        // 1. If name is not a header name, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix: \"Headers.has\",\n                value: name,\n                type: \"header name\"\n            });\n        }\n        // 2. Return true if this’s header list contains name;\n        //    otherwise false.\n        return this[kHeadersList].contains(name);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-set\n    set(name, value) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 2, {\n            header: \"Headers.set\"\n        });\n        name = webidl.converters.ByteString(name);\n        value = webidl.converters.ByteString(value);\n        // 1. Normalize value.\n        value = headerValueNormalize(value);\n        // 2. If name is not a header name or value is not a\n        //    header value, then throw a TypeError.\n        if (!isValidHeaderName(name)) {\n            throw webidl.errors.invalidArgument({\n                prefix: \"Headers.set\",\n                value: name,\n                type: \"header name\"\n            });\n        } else if (!isValidHeaderValue(value)) {\n            throw webidl.errors.invalidArgument({\n                prefix: \"Headers.set\",\n                value,\n                type: \"header value\"\n            });\n        }\n        // 3. If this’s guard is \"immutable\", then throw a TypeError.\n        // 4. Otherwise, if this’s guard is \"request\" and name is a\n        //    forbidden header name, return.\n        // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n        //    name/value is not a no-CORS-safelisted request-header,\n        //    return.\n        // 6. Otherwise, if this’s guard is \"response\" and name is a\n        //    forbidden response-header name, return.\n        // Note: undici does not implement forbidden header names\n        if (this[kGuard] === \"immutable\") {\n            throw new TypeError(\"immutable\");\n        } else if (this[kGuard] === \"request-no-cors\") {\n        // TODO\n        }\n        // 7. Set (name, value) in this’s header list.\n        // 8. If this’s guard is \"request-no-cors\", then remove\n        //    privileged no-CORS request headers from this\n        return this[kHeadersList].set(name, value);\n    }\n    // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n    getSetCookie() {\n        webidl.brandCheck(this, Headers);\n        // 1. If this’s header list does not contain `Set-Cookie`, then return « ».\n        // 2. Return the values of all headers in this’s header list whose name is\n        //    a byte-case-insensitive match for `Set-Cookie`, in order.\n        const list = this[kHeadersList].cookies;\n        if (list) {\n            return [\n                ...list\n            ];\n        }\n        return [];\n    }\n    // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n    get [kHeadersSortedMap]() {\n        if (this[kHeadersList][kHeadersSortedMap]) {\n            return this[kHeadersList][kHeadersSortedMap];\n        }\n        // 1. Let headers be an empty list of headers with the key being the name\n        //    and value the value.\n        const headers = [];\n        // 2. Let names be the result of convert header names to a sorted-lowercase\n        //    set with all the names of the headers in list.\n        const names = [\n            ...this[kHeadersList]\n        ].sort((a, b)=>a[0] < b[0] ? -1 : 1);\n        const cookies = this[kHeadersList].cookies;\n        // 3. For each name of names:\n        for (const [name, value] of names){\n            // 1. If name is `set-cookie`, then:\n            if (name === \"set-cookie\") {\n                // 1. Let values be a list of all values of headers in list whose name\n                //    is a byte-case-insensitive match for name, in order.\n                // 2. For each value of values:\n                // 1. Append (name, value) to headers.\n                for (const value of cookies){\n                    headers.push([\n                        name,\n                        value\n                    ]);\n                }\n            } else {\n                // 2. Otherwise:\n                // 1. Let value be the result of getting name from list.\n                // 2. Assert: value is non-null.\n                assert(value !== null);\n                // 3. Append (name, value) to headers.\n                headers.push([\n                    name,\n                    value\n                ]);\n            }\n        }\n        this[kHeadersList][kHeadersSortedMap] = headers;\n        // 4. Return headers.\n        return headers;\n    }\n    keys() {\n        webidl.brandCheck(this, Headers);\n        return makeIterator(()=>[\n                ...this[kHeadersSortedMap].values()\n            ], \"Headers\", \"key\");\n    }\n    values() {\n        webidl.brandCheck(this, Headers);\n        return makeIterator(()=>[\n                ...this[kHeadersSortedMap].values()\n            ], \"Headers\", \"value\");\n    }\n    entries() {\n        webidl.brandCheck(this, Headers);\n        return makeIterator(()=>[\n                ...this[kHeadersSortedMap].values()\n            ], \"Headers\", \"key+value\");\n    }\n    /**\n   * @param {(value: string, key: string, self: Headers) => void} callbackFn\n   * @param {unknown} thisArg\n   */ forEach(callbackFn, thisArg = globalThis) {\n        webidl.brandCheck(this, Headers);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Headers.forEach\"\n        });\n        if (typeof callbackFn !== \"function\") {\n            throw new TypeError(\"Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.\");\n        }\n        for (const [key, value] of this){\n            callbackFn.apply(thisArg, [\n                value,\n                key,\n                this\n            ]);\n        }\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        webidl.brandCheck(this, Headers);\n        return this[kHeadersList];\n    }\n}\nHeaders.prototype[Symbol.iterator] = Headers.prototype.entries;\nObject.defineProperties(Headers.prototype, {\n    append: kEnumerableProperty,\n    delete: kEnumerableProperty,\n    get: kEnumerableProperty,\n    has: kEnumerableProperty,\n    set: kEnumerableProperty,\n    getSetCookie: kEnumerableProperty,\n    keys: kEnumerableProperty,\n    values: kEnumerableProperty,\n    entries: kEnumerableProperty,\n    forEach: kEnumerableProperty,\n    [Symbol.iterator]: {\n        enumerable: false\n    },\n    [Symbol.toStringTag]: {\n        value: \"Headers\",\n        configurable: true\n    }\n});\nwebidl.converters.HeadersInit = function(V) {\n    if (webidl.util.Type(V) === \"Object\") {\n        if (V[Symbol.iterator]) {\n            return webidl.converters[\"sequence<sequence<ByteString>>\"](V);\n        }\n        return webidl.converters[\"record<ByteString, ByteString>\"](V);\n    }\n    throw webidl.errors.conversionFailed({\n        prefix: \"Headers constructor\",\n        argument: \"Argument 1\",\n        types: [\n            \"sequence<sequence<ByteString>>\",\n            \"record<ByteString, ByteString>\"\n        ]\n    });\n};\nmodule.exports = {\n    fill,\n    Headers,\n    HeadersList\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/headers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/index.js":
/*!************************************************!*\
  !*** ./node_modules/undici/lib/fetch/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// https://github.com/Ethan-Arrowood/undici-fetch\n\nconst { Response, makeNetworkError, makeAppropriateNetworkError, filterResponse, makeResponse } = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/undici/lib/fetch/response.js\");\nconst { Headers } = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/fetch/headers.js\");\nconst { Request, makeRequest } = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/undici/lib/fetch/request.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst { bytesMatch, makePolicyContainer, clonePolicyContainer, requestBadPort, TAOCheck, appendRequestOriginHeader, responseLocationURL, requestCurrentURL, setRequestReferrerPolicyOnRedirect, tryUpgradeRequestToAPotentiallyTrustworthyURL, createOpaqueTimingInfo, appendFetchMetadata, corsCheck, crossOriginResourcePolicyCheck, determineRequestsReferrer, coarsenedSharedCurrentTime, createDeferredPromise, isBlobLike, sameOrigin, isCancelled, isAborted, isErrorLike, fullyReadBody, readableStreamClose, isomorphicEncode, urlIsLocal, urlIsHttpHttpsScheme, urlHasHttpsScheme } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst { kState, kHeaders, kGuard, kRealm } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fetch/symbols.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { safelyExtractBody } = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/fetch/body.js\");\nconst { redirectStatus, nullBodyStatus, safeMethods, requestBodyHeader, subresource, DOMException } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/fetch/constants.js\");\nconst { kHeadersList } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst EE = __webpack_require__(/*! events */ \"events\");\nconst { Readable, pipeline } = __webpack_require__(/*! stream */ \"stream\");\nconst { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { dataURLProcessor, serializeAMimeType } = __webpack_require__(/*! ./dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nconst { TransformStream } = __webpack_require__(/*! stream/web */ \"stream/web\");\nconst { getGlobalDispatcher } = __webpack_require__(/*! ../global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { STATUS_CODES } = __webpack_require__(/*! http */ \"http\");\n/** @type {import('buffer').resolveObjectURL} */ let resolveObjectURL;\nlet ReadableStream = globalThis.ReadableStream;\nclass Fetch extends EE {\n    constructor(dispatcher){\n        super();\n        this.dispatcher = dispatcher;\n        this.connection = null;\n        this.dump = false;\n        this.state = \"ongoing\";\n        // 2 terminated listeners get added per request,\n        // but only 1 gets removed. If there are 20 redirects,\n        // 21 listeners will be added.\n        // See https://github.com/nodejs/undici/issues/1711\n        // TODO (fix): Find and fix root cause for leaked listener.\n        this.setMaxListeners(21);\n    }\n    terminate(reason) {\n        if (this.state !== \"ongoing\") {\n            return;\n        }\n        this.state = \"terminated\";\n        this.connection?.destroy(reason);\n        this.emit(\"terminated\", reason);\n    }\n    // https://fetch.spec.whatwg.org/#fetch-controller-abort\n    abort(error) {\n        if (this.state !== \"ongoing\") {\n            return;\n        }\n        // 1. Set controller’s state to \"aborted\".\n        this.state = \"aborted\";\n        // 2. Let fallbackError be an \"AbortError\" DOMException.\n        // 3. Set error to fallbackError if it is not given.\n        if (!error) {\n            error = new DOMException(\"The operation was aborted.\", \"AbortError\");\n        }\n        // 4. Let serializedError be StructuredSerialize(error).\n        //    If that threw an exception, catch it, and let\n        //    serializedError be StructuredSerialize(fallbackError).\n        // 5. Set controller’s serialized abort reason to serializedError.\n        this.serializedAbortReason = error;\n        this.connection?.destroy(error);\n        this.emit(\"terminated\", error);\n    }\n}\n// https://fetch.spec.whatwg.org/#fetch-method\nfunction fetch(input, init = {}) {\n    webidl.argumentLengthCheck(arguments, 1, {\n        header: \"globalThis.fetch\"\n    });\n    // 1. Let p be a new promise.\n    const p = createDeferredPromise();\n    // 2. Let requestObject be the result of invoking the initial value of\n    // Request as constructor with input and init as arguments. If this throws\n    // an exception, reject p with it and return p.\n    let requestObject;\n    try {\n        requestObject = new Request(input, init);\n    } catch (e) {\n        p.reject(e);\n        return p.promise;\n    }\n    // 3. Let request be requestObject’s request.\n    const request = requestObject[kState];\n    // 4. If requestObject’s signal’s aborted flag is set, then:\n    if (requestObject.signal.aborted) {\n        // 1. Abort the fetch() call with p, request, null, and\n        //    requestObject’s signal’s abort reason.\n        abortFetch(p, request, null, requestObject.signal.reason);\n        // 2. Return p.\n        return p.promise;\n    }\n    // 5. Let globalObject be request’s client’s global object.\n    const globalObject = request.client.globalObject;\n    // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n    // request’s service-workers mode to \"none\".\n    if (globalObject?.constructor?.name === \"ServiceWorkerGlobalScope\") {\n        request.serviceWorkers = \"none\";\n    }\n    // 7. Let responseObject be null.\n    let responseObject = null;\n    // 8. Let relevantRealm be this’s relevant Realm.\n    const relevantRealm = null;\n    // 9. Let locallyAborted be false.\n    let locallyAborted = false;\n    // 10. Let controller be null.\n    let controller = null;\n    // 11. Add the following abort steps to requestObject’s signal:\n    addAbortListener(requestObject.signal, ()=>{\n        // 1. Set locallyAborted to true.\n        locallyAborted = true;\n        // 2. Assert: controller is non-null.\n        assert(controller != null);\n        // 3. Abort controller with requestObject’s signal’s abort reason.\n        controller.abort(requestObject.signal.reason);\n        // 4. Abort the fetch() call with p, request, responseObject,\n        //    and requestObject’s signal’s abort reason.\n        abortFetch(p, request, responseObject, requestObject.signal.reason);\n    });\n    // 12. Let handleFetchDone given response response be to finalize and\n    // report timing with response, globalObject, and \"fetch\".\n    const handleFetchDone = (response)=>finalizeAndReportTiming(response, \"fetch\");\n    // 13. Set controller to the result of calling fetch given request,\n    // with processResponseEndOfBody set to handleFetchDone, and processResponse\n    // given response being these substeps:\n    const processResponse = (response)=>{\n        // 1. If locallyAborted is true, terminate these substeps.\n        if (locallyAborted) {\n            return Promise.resolve();\n        }\n        // 2. If response’s aborted flag is set, then:\n        if (response.aborted) {\n            // 1. Let deserializedError be the result of deserialize a serialized\n            //    abort reason given controller’s serialized abort reason and\n            //    relevantRealm.\n            // 2. Abort the fetch() call with p, request, responseObject, and\n            //    deserializedError.\n            abortFetch(p, request, responseObject, controller.serializedAbortReason);\n            return Promise.resolve();\n        }\n        // 3. If response is a network error, then reject p with a TypeError\n        // and terminate these substeps.\n        if (response.type === \"error\") {\n            p.reject(Object.assign(new TypeError(\"fetch failed\"), {\n                cause: response.error\n            }));\n            return Promise.resolve();\n        }\n        // 4. Set responseObject to the result of creating a Response object,\n        // given response, \"immutable\", and relevantRealm.\n        responseObject = new Response();\n        responseObject[kState] = response;\n        responseObject[kRealm] = relevantRealm;\n        responseObject[kHeaders][kHeadersList] = response.headersList;\n        responseObject[kHeaders][kGuard] = \"immutable\";\n        responseObject[kHeaders][kRealm] = relevantRealm;\n        // 5. Resolve p with responseObject.\n        p.resolve(responseObject);\n    };\n    controller = fetching({\n        request,\n        processResponseEndOfBody: handleFetchDone,\n        processResponse,\n        dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici\n    });\n    // 14. Return p.\n    return p.promise;\n}\n// https://fetch.spec.whatwg.org/#finalize-and-report-timing\nfunction finalizeAndReportTiming(response, initiatorType = \"other\") {\n    // 1. If response is an aborted network error, then return.\n    if (response.type === \"error\" && response.aborted) {\n        return;\n    }\n    // 2. If response’s URL list is null or empty, then return.\n    if (!response.urlList?.length) {\n        return;\n    }\n    // 3. Let originalURL be response’s URL list[0].\n    const originalURL = response.urlList[0];\n    // 4. Let timingInfo be response’s timing info.\n    let timingInfo = response.timingInfo;\n    // 5. Let cacheState be response’s cache state.\n    let cacheState = response.cacheState;\n    // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.\n    if (!urlIsHttpHttpsScheme(originalURL)) {\n        return;\n    }\n    // 7. If timingInfo is null, then return.\n    if (timingInfo === null) {\n        return;\n    }\n    // 8. If response’s timing allow passed flag is not set, then:\n    if (!timingInfo.timingAllowPassed) {\n        //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.\n        timingInfo = createOpaqueTimingInfo({\n            startTime: timingInfo.startTime\n        });\n        //  2. Set cacheState to the empty string.\n        cacheState = \"\";\n    }\n    // 9. Set timingInfo’s end time to the coarsened shared current time\n    // given global’s relevant settings object’s cross-origin isolated\n    // capability.\n    // TODO: given global’s relevant settings object’s cross-origin isolated\n    // capability?\n    timingInfo.endTime = coarsenedSharedCurrentTime();\n    // 10. Set response’s timing info to timingInfo.\n    response.timingInfo = timingInfo;\n    // 11. Mark resource timing for timingInfo, originalURL, initiatorType,\n    // global, and cacheState.\n    markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);\n}\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nfunction markResourceTiming(timingInfo, originalURL, initiatorType, globalThis1, cacheState) {\n    if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {\n        performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis1, cacheState);\n    }\n}\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch(p, request, responseObject, error) {\n    // Note: AbortSignal.reason was added in node v17.2.0\n    // which would give us an undefined error to reject with.\n    // Remove this once node v16 is no longer supported.\n    if (!error) {\n        error = new DOMException(\"The operation was aborted.\", \"AbortError\");\n    }\n    // 1. Reject promise with error.\n    p.reject(error);\n    // 2. If request’s body is not null and is readable, then cancel request’s\n    // body with error.\n    if (request.body != null && isReadable(request.body?.stream)) {\n        request.body.stream.cancel(error).catch((err)=>{\n            if (err.code === \"ERR_INVALID_STATE\") {\n                // Node bug?\n                return;\n            }\n            throw err;\n        });\n    }\n    // 3. If responseObject is null, then return.\n    if (responseObject == null) {\n        return;\n    }\n    // 4. Let response be responseObject’s response.\n    const response = responseObject[kState];\n    // 5. If response’s body is not null and is readable, then error response’s\n    // body with error.\n    if (response.body != null && isReadable(response.body?.stream)) {\n        response.body.stream.cancel(error).catch((err)=>{\n            if (err.code === \"ERR_INVALID_STATE\") {\n                // Node bug?\n                return;\n            }\n            throw err;\n        });\n    }\n}\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching({ request, processRequestBodyChunkLength, processRequestEndOfBody, processResponse, processResponseEndOfBody, processResponseConsumeBody, useParallelQueue = false, dispatcher// undici\n }) {\n    // 1. Let taskDestination be null.\n    let taskDestination = null;\n    // 2. Let crossOriginIsolatedCapability be false.\n    let crossOriginIsolatedCapability = false;\n    // 3. If request’s client is non-null, then:\n    if (request.client != null) {\n        // 1. Set taskDestination to request’s client’s global object.\n        taskDestination = request.client.globalObject;\n        // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin\n        // isolated capability.\n        crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;\n    }\n    // 4. If useParallelQueue is true, then set taskDestination to the result of\n    // starting a new parallel queue.\n    // TODO\n    // 5. Let timingInfo be a new fetch timing info whose start time and\n    // post-redirect start time are the coarsened shared current time given\n    // crossOriginIsolatedCapability.\n    const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);\n    const timingInfo = createOpaqueTimingInfo({\n        startTime: currenTime\n    });\n    // 6. Let fetchParams be a new fetch params whose\n    // request is request,\n    // timing info is timingInfo,\n    // process request body chunk length is processRequestBodyChunkLength,\n    // process request end-of-body is processRequestEndOfBody,\n    // process response is processResponse,\n    // process response consume body is processResponseConsumeBody,\n    // process response end-of-body is processResponseEndOfBody,\n    // task destination is taskDestination,\n    // and cross-origin isolated capability is crossOriginIsolatedCapability.\n    const fetchParams = {\n        controller: new Fetch(dispatcher),\n        request,\n        timingInfo,\n        processRequestBodyChunkLength,\n        processRequestEndOfBody,\n        processResponse,\n        processResponseConsumeBody,\n        processResponseEndOfBody,\n        taskDestination,\n        crossOriginIsolatedCapability\n    };\n    // 7. If request’s body is a byte sequence, then set request’s body to\n    //    request’s body as a body.\n    // NOTE: Since fetching is only called from fetch, body should already be\n    // extracted.\n    assert(!request.body || request.body.stream);\n    // 8. If request’s window is \"client\", then set request’s window to request’s\n    // client, if request’s client’s global object is a Window object; otherwise\n    // \"no-window\".\n    if (request.window === \"client\") {\n        // TODO: What if request.client is null?\n        request.window = request.client?.globalObject?.constructor?.name === \"Window\" ? request.client : \"no-window\";\n    }\n    // 9. If request’s origin is \"client\", then set request’s origin to request’s\n    // client’s origin.\n    if (request.origin === \"client\") {\n        // TODO: What if request.client is null?\n        request.origin = request.client?.origin;\n    }\n    // 10. If all of the following conditions are true:\n    // TODO\n    // 11. If request’s policy container is \"client\", then:\n    if (request.policyContainer === \"client\") {\n        // 1. If request’s client is non-null, then set request’s policy\n        // container to a clone of request’s client’s policy container. [HTML]\n        if (request.client != null) {\n            request.policyContainer = clonePolicyContainer(request.client.policyContainer);\n        } else {\n            // 2. Otherwise, set request’s policy container to a new policy\n            // container.\n            request.policyContainer = makePolicyContainer();\n        }\n    }\n    // 12. If request’s header list does not contain `Accept`, then:\n    if (!request.headersList.contains(\"accept\")) {\n        // 1. Let value be `*/*`.\n        const value = \"*/*\";\n        // 2. A user agent should set value to the first matching statement, if\n        // any, switching on request’s destination:\n        // \"document\"\n        // \"frame\"\n        // \"iframe\"\n        // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n        // \"image\"\n        // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n        // \"style\"\n        // `text/css,*/*;q=0.1`\n        // TODO\n        // 3. Append `Accept`/value to request’s header list.\n        request.headersList.append(\"accept\", value);\n    }\n    // 13. If request’s header list does not contain `Accept-Language`, then\n    // user agents should append `Accept-Language`/an appropriate value to\n    // request’s header list.\n    if (!request.headersList.contains(\"accept-language\")) {\n        request.headersList.append(\"accept-language\", \"*\");\n    }\n    // 14. If request’s priority is null, then use request’s initiator and\n    // destination appropriately in setting request’s priority to a\n    // user-agent-defined object.\n    if (request.priority === null) {\n    // TODO\n    }\n    // 15. If request is a subresource request, then:\n    if (subresource.includes(request.destination)) {\n    // TODO\n    }\n    // 16. Run main fetch given fetchParams.\n    mainFetch(fetchParams).catch((err)=>{\n        fetchParams.controller.terminate(err);\n    });\n    // 17. Return fetchParam's controller\n    return fetchParams.controller;\n}\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch(fetchParams, recursive = false) {\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let response be null.\n    let response = null;\n    // 3. If request’s local-URLs-only flag is set and request’s current URL is\n    // not local, then set response to a network error.\n    if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n        response = makeNetworkError(\"local URLs only\");\n    }\n    // 4. Run report Content Security Policy violations for request.\n    // TODO\n    // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n    tryUpgradeRequestToAPotentiallyTrustworthyURL(request);\n    // 6. If should request be blocked due to a bad port, should fetching request\n    // be blocked as mixed content, or should request be blocked by Content\n    // Security Policy returns blocked, then set response to a network error.\n    if (requestBadPort(request) === \"blocked\") {\n        response = makeNetworkError(\"bad port\");\n    }\n    // TODO: should fetching request be blocked as mixed content?\n    // TODO: should request be blocked by Content Security Policy?\n    // 7. If request’s referrer policy is the empty string, then set request’s\n    // referrer policy to request’s policy container’s referrer policy.\n    if (request.referrerPolicy === \"\") {\n        request.referrerPolicy = request.policyContainer.referrerPolicy;\n    }\n    // 8. If request’s referrer is not \"no-referrer\", then set request’s\n    // referrer to the result of invoking determine request’s referrer.\n    if (request.referrer !== \"no-referrer\") {\n        request.referrer = determineRequestsReferrer(request);\n    }\n    // 9. Set request’s current URL’s scheme to \"https\" if all of the following\n    // conditions are true:\n    // - request’s current URL’s scheme is \"http\"\n    // - request’s current URL’s host is a domain\n    // - Matching request’s current URL’s host per Known HSTS Host Domain Name\n    //   Matching results in either a superdomain match with an asserted\n    //   includeSubDomains directive or a congruent match (with or without an\n    //   asserted includeSubDomains directive). [HSTS]\n    // TODO\n    // 10. If recursive is false, then run the remaining steps in parallel.\n    // TODO\n    // 11. If response is null, then set response to the result of running\n    // the steps corresponding to the first matching statement:\n    if (response === null) {\n        response = await (async ()=>{\n            const currentURL = requestCurrentURL(request);\n            if (// - request’s current URL’s origin is same origin with request’s origin,\n            //   and request’s response tainting is \"basic\"\n            sameOrigin(currentURL, request.url) && request.responseTainting === \"basic\" || // request’s current URL’s scheme is \"data\"\n            currentURL.protocol === \"data:\" || // - request’s mode is \"navigate\" or \"websocket\"\n            request.mode === \"navigate\" || request.mode === \"websocket\") {\n                // 1. Set request’s response tainting to \"basic\".\n                request.responseTainting = \"basic\";\n                // 2. Return the result of running scheme fetch given fetchParams.\n                return await schemeFetch(fetchParams);\n            }\n            // request’s mode is \"same-origin\"\n            if (request.mode === \"same-origin\") {\n                // 1. Return a network error.\n                return makeNetworkError('request mode cannot be \"same-origin\"');\n            }\n            // request’s mode is \"no-cors\"\n            if (request.mode === \"no-cors\") {\n                // 1. If request’s redirect mode is not \"follow\", then return a network\n                // error.\n                if (request.redirect !== \"follow\") {\n                    return makeNetworkError('redirect mode cannot be \"follow\" for \"no-cors\" request');\n                }\n                // 2. Set request’s response tainting to \"opaque\".\n                request.responseTainting = \"opaque\";\n                // 3. Return the result of running scheme fetch given fetchParams.\n                return await schemeFetch(fetchParams);\n            }\n            // request’s current URL’s scheme is not an HTTP(S) scheme\n            if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n                // Return a network error.\n                return makeNetworkError(\"URL scheme must be a HTTP(S) scheme\");\n            }\n            // - request’s use-CORS-preflight flag is set\n            // - request’s unsafe-request flag is set and either request’s method is\n            //   not a CORS-safelisted method or CORS-unsafe request-header names with\n            //   request’s header list is not empty\n            //    1. Set request’s response tainting to \"cors\".\n            //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n            //    given fetchParams and true.\n            //    3. If corsWithPreflightResponse is a network error, then clear cache\n            //    entries using request.\n            //    4. Return corsWithPreflightResponse.\n            // TODO\n            // Otherwise\n            //    1. Set request’s response tainting to \"cors\".\n            request.responseTainting = \"cors\";\n            //    2. Return the result of running HTTP fetch given fetchParams.\n            return await httpFetch(fetchParams);\n        })();\n    }\n    // 12. If recursive is true, then return response.\n    if (recursive) {\n        return response;\n    }\n    // 13. If response is not a network error and response is not a filtered\n    // response, then:\n    if (response.status !== 0 && !response.internalResponse) {\n        // If request’s response tainting is \"cors\", then:\n        if (request.responseTainting === \"cors\") {\n        // 1. Let headerNames be the result of extracting header list values\n        // given `Access-Control-Expose-Headers` and response’s header list.\n        // TODO\n        // 2. If request’s credentials mode is not \"include\" and headerNames\n        // contains `*`, then set response’s CORS-exposed header-name list to\n        // all unique header names in response’s header list.\n        // TODO\n        // 3. Otherwise, if headerNames is not null or failure, then set\n        // response’s CORS-exposed header-name list to headerNames.\n        // TODO\n        }\n        // Set response to the following filtered response with response as its\n        // internal response, depending on request’s response tainting:\n        if (request.responseTainting === \"basic\") {\n            response = filterResponse(response, \"basic\");\n        } else if (request.responseTainting === \"cors\") {\n            response = filterResponse(response, \"cors\");\n        } else if (request.responseTainting === \"opaque\") {\n            response = filterResponse(response, \"opaque\");\n        } else {\n            assert(false);\n        }\n    }\n    // 14. Let internalResponse be response, if response is a network error,\n    // and response’s internal response otherwise.\n    let internalResponse = response.status === 0 ? response : response.internalResponse;\n    // 15. If internalResponse’s URL list is empty, then set it to a clone of\n    // request’s URL list.\n    if (internalResponse.urlList.length === 0) {\n        internalResponse.urlList.push(...request.urlList);\n    }\n    // 16. If request’s timing allow failed flag is unset, then set\n    // internalResponse’s timing allow passed flag.\n    if (!request.timingAllowFailed) {\n        response.timingAllowPassed = true;\n    }\n    // 17. If response is not a network error and any of the following returns\n    // blocked\n    // - should internalResponse to request be blocked as mixed content\n    // - should internalResponse to request be blocked by Content Security Policy\n    // - should internalResponse to request be blocked due to its MIME type\n    // - should internalResponse to request be blocked due to nosniff\n    // TODO\n    // 18. If response’s type is \"opaque\", internalResponse’s status is 206,\n    // internalResponse’s range-requested flag is set, and request’s header\n    // list does not contain `Range`, then set response and internalResponse\n    // to a network error.\n    if (response.type === \"opaque\" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains(\"range\")) {\n        response = internalResponse = makeNetworkError();\n    }\n    // 19. If response is not a network error and either request’s method is\n    // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,\n    // set internalResponse’s body to null and disregard any enqueuing toward\n    // it (if any).\n    if (response.status !== 0 && (request.method === \"HEAD\" || request.method === \"CONNECT\" || nullBodyStatus.includes(internalResponse.status))) {\n        internalResponse.body = null;\n        fetchParams.controller.dump = true;\n    }\n    // 20. If request’s integrity metadata is not the empty string, then:\n    if (request.integrity) {\n        // 1. Let processBodyError be this step: run fetch finale given fetchParams\n        // and a network error.\n        const processBodyError = (reason)=>fetchFinale(fetchParams, makeNetworkError(reason));\n        // 2. If request’s response tainting is \"opaque\", or response’s body is null,\n        // then run processBodyError and abort these steps.\n        if (request.responseTainting === \"opaque\" || response.body == null) {\n            processBodyError(response.error);\n            return;\n        }\n        // 3. Let processBody given bytes be these steps:\n        const processBody = (bytes)=>{\n            // 1. If bytes do not match request’s integrity metadata,\n            // then run processBodyError and abort these steps. [SRI]\n            if (!bytesMatch(bytes, request.integrity)) {\n                processBodyError(\"integrity mismatch\");\n                return;\n            }\n            // 2. Set response’s body to bytes as a body.\n            response.body = safelyExtractBody(bytes)[0];\n            // 3. Run fetch finale given fetchParams and response.\n            fetchFinale(fetchParams, response);\n        };\n        // 4. Fully read response’s body given processBody and processBodyError.\n        await fullyReadBody(response.body, processBody, processBodyError);\n    } else {\n        // 21. Otherwise, run fetch finale given fetchParams and response.\n        fetchFinale(fetchParams, response);\n    }\n}\n// https://fetch.spec.whatwg.org/#concept-scheme-fetch\n// given a fetch params fetchParams\nfunction schemeFetch(fetchParams) {\n    // Note: since the connection is destroyed on redirect, which sets fetchParams to a\n    // cancelled state, we do not want this condition to trigger *unless* there have been\n    // no redirects. See https://github.com/nodejs/undici/issues/1776\n    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n        return Promise.resolve(makeAppropriateNetworkError(fetchParams));\n    }\n    // 2. Let request be fetchParams’s request.\n    const { request } = fetchParams;\n    const { protocol: scheme } = requestCurrentURL(request);\n    // 3. Switch on request’s current URL’s scheme and run the associated steps:\n    switch(scheme){\n        case \"about:\":\n            {\n                // If request’s current URL’s path is the string \"blank\", then return a new response\n                // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,\n                // and body is the empty byte sequence as a body.\n                // Otherwise, return a network error.\n                return Promise.resolve(makeNetworkError(\"about scheme is not supported\"));\n            }\n        case \"blob:\":\n            {\n                if (!resolveObjectURL) {\n                    resolveObjectURL = (__webpack_require__(/*! buffer */ \"buffer\").resolveObjectURL);\n                }\n                // 1. Let blobURLEntry be request’s current URL’s blob URL entry.\n                const blobURLEntry = requestCurrentURL(request);\n                // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56\n                // Buffer.resolveObjectURL does not ignore URL queries.\n                if (blobURLEntry.search.length !== 0) {\n                    return Promise.resolve(makeNetworkError(\"NetworkError when attempting to fetch resource.\"));\n                }\n                const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());\n                // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s\n                //    object is not a Blob object, then return a network error.\n                if (request.method !== \"GET\" || !isBlobLike(blobURLEntryObject)) {\n                    return Promise.resolve(makeNetworkError(\"invalid method\"));\n                }\n                // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.\n                const bodyWithType = safelyExtractBody(blobURLEntryObject);\n                // 4. Let body be bodyWithType’s body.\n                const body = bodyWithType[0];\n                // 5. Let length be body’s length, serialized and isomorphic encoded.\n                const length = isomorphicEncode(`${body.length}`);\n                // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.\n                const type = bodyWithType[1] ?? \"\";\n                // 7. Return a new response whose status message is `OK`, header list is\n                //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.\n                const response = makeResponse({\n                    statusText: \"OK\",\n                    headersList: [\n                        [\n                            \"content-length\",\n                            {\n                                name: \"Content-Length\",\n                                value: length\n                            }\n                        ],\n                        [\n                            \"content-type\",\n                            {\n                                name: \"Content-Type\",\n                                value: type\n                            }\n                        ]\n                    ]\n                });\n                response.body = body;\n                return Promise.resolve(response);\n            }\n        case \"data:\":\n            {\n                // 1. Let dataURLStruct be the result of running the\n                //    data: URL processor on request’s current URL.\n                const currentURL = requestCurrentURL(request);\n                const dataURLStruct = dataURLProcessor(currentURL);\n                // 2. If dataURLStruct is failure, then return a\n                //    network error.\n                if (dataURLStruct === \"failure\") {\n                    return Promise.resolve(makeNetworkError(\"failed to fetch the data URL\"));\n                }\n                // 3. Let mimeType be dataURLStruct’s MIME type, serialized.\n                const mimeType = serializeAMimeType(dataURLStruct.mimeType);\n                // 4. Return a response whose status message is `OK`,\n                //    header list is « (`Content-Type`, mimeType) »,\n                //    and body is dataURLStruct’s body as a body.\n                return Promise.resolve(makeResponse({\n                    statusText: \"OK\",\n                    headersList: [\n                        [\n                            \"content-type\",\n                            {\n                                name: \"Content-Type\",\n                                value: mimeType\n                            }\n                        ]\n                    ],\n                    body: safelyExtractBody(dataURLStruct.body)[0]\n                }));\n            }\n        case \"file:\":\n            {\n                // For now, unfortunate as it is, file URLs are left as an exercise for the reader.\n                // When in doubt, return a network error.\n                return Promise.resolve(makeNetworkError(\"not implemented... yet...\"));\n            }\n        case \"http:\":\n        case \"https:\":\n            {\n                // Return the result of running HTTP fetch given fetchParams.\n                return httpFetch(fetchParams).catch((err)=>makeNetworkError(err));\n            }\n        default:\n            {\n                return Promise.resolve(makeNetworkError(\"unknown scheme\"));\n            }\n    }\n}\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse(fetchParams, response) {\n    // 1. Set fetchParams’s request’s done flag.\n    fetchParams.request.done = true;\n    // 2, If fetchParams’s process response done is not null, then queue a fetch\n    // task to run fetchParams’s process response done given response, with\n    // fetchParams’s task destination.\n    if (fetchParams.processResponseDone != null) {\n        queueMicrotask(()=>fetchParams.processResponseDone(response));\n    }\n}\n// https://fetch.spec.whatwg.org/#fetch-finale\nfunction fetchFinale(fetchParams, response) {\n    // 1. If response is a network error, then:\n    if (response.type === \"error\") {\n        // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».\n        response.urlList = [\n            fetchParams.request.urlList[0]\n        ];\n        // 2. Set response’s timing info to the result of creating an opaque timing\n        // info for fetchParams’s timing info.\n        response.timingInfo = createOpaqueTimingInfo({\n            startTime: fetchParams.timingInfo.startTime\n        });\n    }\n    // 2. Let processResponseEndOfBody be the following steps:\n    const processResponseEndOfBody = ()=>{\n        // 1. Set fetchParams’s request’s done flag.\n        fetchParams.request.done = true;\n        // If fetchParams’s process response end-of-body is not null,\n        // then queue a fetch task to run fetchParams’s process response\n        // end-of-body given response with fetchParams’s task destination.\n        if (fetchParams.processResponseEndOfBody != null) {\n            queueMicrotask(()=>fetchParams.processResponseEndOfBody(response));\n        }\n    };\n    // 3. If fetchParams’s process response is non-null, then queue a fetch task\n    // to run fetchParams’s process response given response, with fetchParams’s\n    // task destination.\n    if (fetchParams.processResponse != null) {\n        queueMicrotask(()=>fetchParams.processResponse(response));\n    }\n    // 4. If response’s body is null, then run processResponseEndOfBody.\n    if (response.body == null) {\n        processResponseEndOfBody();\n    } else {\n        // 5. Otherwise:\n        // 1. Let transformStream be a new a TransformStream.\n        // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,\n        // enqueues chunk in transformStream.\n        const identityTransformAlgorithm = (chunk, controller)=>{\n            controller.enqueue(chunk);\n        };\n        // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm\n        // and flushAlgorithm set to processResponseEndOfBody.\n        const transformStream = new TransformStream({\n            start () {},\n            transform: identityTransformAlgorithm,\n            flush: processResponseEndOfBody\n        }, {\n            size () {\n                return 1;\n            }\n        }, {\n            size () {\n                return 1;\n            }\n        });\n        // 4. Set response’s body to the result of piping response’s body through transformStream.\n        response.body = {\n            stream: response.body.stream.pipeThrough(transformStream)\n        };\n    }\n    // 6. If fetchParams’s process response consume body is non-null, then:\n    if (fetchParams.processResponseConsumeBody != null) {\n        // 1. Let processBody given nullOrBytes be this step: run fetchParams’s\n        // process response consume body given response and nullOrBytes.\n        const processBody = (nullOrBytes)=>fetchParams.processResponseConsumeBody(response, nullOrBytes);\n        // 2. Let processBodyError be this step: run fetchParams’s process\n        // response consume body given response and failure.\n        const processBodyError = (failure)=>fetchParams.processResponseConsumeBody(response, failure);\n        // 3. If response’s body is null, then queue a fetch task to run processBody\n        // given null, with fetchParams’s task destination.\n        if (response.body == null) {\n            queueMicrotask(()=>processBody(null));\n        } else {\n            // 4. Otherwise, fully read response’s body given processBody, processBodyError,\n            // and fetchParams’s task destination.\n            return fullyReadBody(response.body, processBody, processBodyError);\n        }\n        return Promise.resolve();\n    }\n}\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch(fetchParams) {\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let response be null.\n    let response = null;\n    // 3. Let actualResponse be null.\n    let actualResponse = null;\n    // 4. Let timingInfo be fetchParams’s timing info.\n    const timingInfo = fetchParams.timingInfo;\n    // 5. If request’s service-workers mode is \"all\", then:\n    if (request.serviceWorkers === \"all\") {\n    // TODO\n    }\n    // 6. If response is null, then:\n    if (response === null) {\n        // 1. If makeCORSPreflight is true and one of these conditions is true:\n        // TODO\n        // 2. If request’s redirect mode is \"follow\", then set request’s\n        // service-workers mode to \"none\".\n        if (request.redirect === \"follow\") {\n            request.serviceWorkers = \"none\";\n        }\n        // 3. Set response and actualResponse to the result of running\n        // HTTP-network-or-cache fetch given fetchParams.\n        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);\n        // 4. If request’s response tainting is \"cors\" and a CORS check\n        // for request and response returns failure, then return a network error.\n        if (request.responseTainting === \"cors\" && corsCheck(request, response) === \"failure\") {\n            return makeNetworkError(\"cors failure\");\n        }\n        // 5. If the TAO check for request and response returns failure, then set\n        // request’s timing allow failed flag.\n        if (TAOCheck(request, response) === \"failure\") {\n            request.timingAllowFailed = true;\n        }\n    }\n    // 7. If either request’s response tainting or response’s type\n    // is \"opaque\", and the cross-origin resource policy check with\n    // request’s origin, request’s client, request’s destination,\n    // and actualResponse returns blocked, then return a network error.\n    if ((request.responseTainting === \"opaque\" || response.type === \"opaque\") && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === \"blocked\") {\n        return makeNetworkError(\"blocked\");\n    }\n    // 8. If actualResponse’s status is a redirect status, then:\n    if (redirectStatus.includes(actualResponse.status)) {\n        // 1. If actualResponse’s status is not 303, request’s body is not null,\n        // and the connection uses HTTP/2, then user agents may, and are even\n        // encouraged to, transmit an RST_STREAM frame.\n        // See, https://github.com/whatwg/fetch/issues/1288\n        if (request.redirect !== \"manual\") {\n            fetchParams.controller.connection.destroy();\n        }\n        // 2. Switch on request’s redirect mode:\n        if (request.redirect === \"error\") {\n            // Set response to a network error.\n            response = makeNetworkError(\"unexpected redirect\");\n        } else if (request.redirect === \"manual\") {\n            // Set response to an opaque-redirect filtered response whose internal\n            // response is actualResponse.\n            // NOTE(spec): On the web this would return an `opaqueredirect` response,\n            // but that doesn't make sense server side.\n            // See https://github.com/nodejs/undici/issues/1193.\n            response = actualResponse;\n        } else if (request.redirect === \"follow\") {\n            // Set response to the result of running HTTP-redirect fetch given\n            // fetchParams and response.\n            response = await httpRedirectFetch(fetchParams, response);\n        } else {\n            assert(false);\n        }\n    }\n    // 9. Set response’s timing info to timingInfo.\n    response.timingInfo = timingInfo;\n    // 10. Return response.\n    return response;\n}\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nfunction httpRedirectFetch(fetchParams, response) {\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let actualResponse be response, if response is not a filtered response,\n    // and response’s internal response otherwise.\n    const actualResponse = response.internalResponse ? response.internalResponse : response;\n    // 3. Let locationURL be actualResponse’s location URL given request’s current\n    // URL’s fragment.\n    let locationURL;\n    try {\n        locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash);\n        // 4. If locationURL is null, then return response.\n        if (locationURL == null) {\n            return response;\n        }\n    } catch (err) {\n        // 5. If locationURL is failure, then return a network error.\n        return Promise.resolve(makeNetworkError(err));\n    }\n    // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network\n    // error.\n    if (!urlIsHttpHttpsScheme(locationURL)) {\n        return Promise.resolve(makeNetworkError(\"URL scheme must be a HTTP(S) scheme\"));\n    }\n    // 7. If request’s redirect count is 20, then return a network error.\n    if (request.redirectCount === 20) {\n        return Promise.resolve(makeNetworkError(\"redirect count exceeded\"));\n    }\n    // 8. Increase request’s redirect count by 1.\n    request.redirectCount += 1;\n    // 9. If request’s mode is \"cors\", locationURL includes credentials, and\n    // request’s origin is not same origin with locationURL’s origin, then return\n    //  a network error.\n    if (request.mode === \"cors\" && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {\n        return Promise.resolve(makeNetworkError('cross origin not allowed for request mode \"cors\"'));\n    }\n    // 10. If request’s response tainting is \"cors\" and locationURL includes\n    // credentials, then return a network error.\n    if (request.responseTainting === \"cors\" && (locationURL.username || locationURL.password)) {\n        return Promise.resolve(makeNetworkError('URL cannot contain credentials for request mode \"cors\"'));\n    }\n    // 11. If actualResponse’s status is not 303, request’s body is non-null,\n    // and request’s body’s source is null, then return a network error.\n    if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {\n        return Promise.resolve(makeNetworkError());\n    }\n    // 12. If one of the following is true\n    // - actualResponse’s status is 301 or 302 and request’s method is `POST`\n    // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`\n    if ([\n        301,\n        302\n    ].includes(actualResponse.status) && request.method === \"POST\" || actualResponse.status === 303 && ![\n        \"GET\",\n        \"HEAD\"\n    ].includes(request.method)) {\n        // then:\n        // 1. Set request’s method to `GET` and request’s body to null.\n        request.method = \"GET\";\n        request.body = null;\n        // 2. For each headerName of request-body-header name, delete headerName from\n        // request’s header list.\n        for (const headerName of requestBodyHeader){\n            request.headersList.delete(headerName);\n        }\n    }\n    // 13. If request’s current URL’s origin is not same origin with locationURL’s\n    //     origin, then for each headerName of CORS non-wildcard request-header name,\n    //     delete headerName from request’s header list.\n    if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n        // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name\n        request.headersList.delete(\"authorization\");\n        // \"Cookie\" and \"Host\" are forbidden request-headers, which undici doesn't implement.\n        request.headersList.delete(\"cookie\");\n        request.headersList.delete(\"host\");\n    }\n    // 14. If request’s body is non-null, then set request’s body to the first return\n    // value of safely extracting request’s body’s source.\n    if (request.body != null) {\n        assert(request.body.source != null);\n        request.body = safelyExtractBody(request.body.source)[0];\n    }\n    // 15. Let timingInfo be fetchParams’s timing info.\n    const timingInfo = fetchParams.timingInfo;\n    // 16. Set timingInfo’s redirect end time and post-redirect start time to the\n    // coarsened shared current time given fetchParams’s cross-origin isolated\n    // capability.\n    timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n    // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s\n    //  redirect start time to timingInfo’s start time.\n    if (timingInfo.redirectStartTime === 0) {\n        timingInfo.redirectStartTime = timingInfo.startTime;\n    }\n    // 18. Append locationURL to request’s URL list.\n    request.urlList.push(locationURL);\n    // 19. Invoke set request’s referrer policy on redirect on request and\n    // actualResponse.\n    setRequestReferrerPolicyOnRedirect(request, actualResponse);\n    // 20. Return the result of running main fetch given fetchParams and true.\n    return mainFetch(fetchParams, true);\n}\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let httpFetchParams be null.\n    let httpFetchParams = null;\n    // 3. Let httpRequest be null.\n    let httpRequest = null;\n    // 4. Let response be null.\n    let response = null;\n    // 5. Let storedResponse be null.\n    // TODO: cache\n    // 6. Let httpCache be null.\n    const httpCache = null;\n    // 7. Let the revalidatingFlag be unset.\n    const revalidatingFlag = false;\n    // 8. Run these steps, but abort when the ongoing fetch is terminated:\n    //    1. If request’s window is \"no-window\" and request’s redirect mode is\n    //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n    //    request.\n    if (request.window === \"no-window\" && request.redirect === \"error\") {\n        httpFetchParams = fetchParams;\n        httpRequest = request;\n    } else {\n        // Otherwise:\n        // 1. Set httpRequest to a clone of request.\n        httpRequest = makeRequest(request);\n        // 2. Set httpFetchParams to a copy of fetchParams.\n        httpFetchParams = {\n            ...fetchParams\n        };\n        // 3. Set httpFetchParams’s request to httpRequest.\n        httpFetchParams.request = httpRequest;\n    }\n    //    3. Let includeCredentials be true if one of\n    const includeCredentials = request.credentials === \"include\" || request.credentials === \"same-origin\" && request.responseTainting === \"basic\";\n    //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s\n    //    body is non-null; otherwise null.\n    const contentLength = httpRequest.body ? httpRequest.body.length : null;\n    //    5. Let contentLengthHeaderValue be null.\n    let contentLengthHeaderValue = null;\n    //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or\n    //    `PUT`, then set contentLengthHeaderValue to `0`.\n    if (httpRequest.body == null && [\n        \"POST\",\n        \"PUT\"\n    ].includes(httpRequest.method)) {\n        contentLengthHeaderValue = \"0\";\n    }\n    //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n    //    contentLength, serialized and isomorphic encoded.\n    if (contentLength != null) {\n        contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);\n    }\n    //    8. If contentLengthHeaderValue is non-null, then append\n    //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header\n    //    list.\n    if (contentLengthHeaderValue != null) {\n        httpRequest.headersList.append(\"content-length\", contentLengthHeaderValue);\n    }\n    //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,\n    //    contentLengthHeaderValue) to httpRequest’s header list.\n    //    10. If contentLength is non-null and httpRequest’s keepalive is true,\n    //    then:\n    if (contentLength != null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n    }\n    //    11. If httpRequest’s referrer is a URL, then append\n    //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,\n    //     to httpRequest’s header list.\n    if (httpRequest.referrer instanceof URL) {\n        httpRequest.headersList.append(\"referer\", isomorphicEncode(httpRequest.referrer.href));\n    }\n    //    12. Append a request `Origin` header for httpRequest.\n    appendRequestOriginHeader(httpRequest);\n    //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n    appendFetchMetadata(httpRequest);\n    //    14. If httpRequest’s header list does not contain `User-Agent`, then\n    //    user agents should append `User-Agent`/default `User-Agent` value to\n    //    httpRequest’s header list.\n    if (!httpRequest.headersList.contains(\"user-agent\")) {\n        httpRequest.headersList.append(\"user-agent\", typeof esbuildDetection === \"undefined\" ? \"undici\" : \"node\");\n    }\n    //    15. If httpRequest’s cache mode is \"default\" and httpRequest’s header\n    //    list contains `If-Modified-Since`, `If-None-Match`,\n    //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n    //    httpRequest’s cache mode to \"no-store\".\n    if (httpRequest.cache === \"default\" && (httpRequest.headersList.contains(\"if-modified-since\") || httpRequest.headersList.contains(\"if-none-match\") || httpRequest.headersList.contains(\"if-unmodified-since\") || httpRequest.headersList.contains(\"if-match\") || httpRequest.headersList.contains(\"if-range\"))) {\n        httpRequest.cache = \"no-store\";\n    }\n    //    16. If httpRequest’s cache mode is \"no-cache\", httpRequest’s prevent\n    //    no-cache cache-control header modification flag is unset, and\n    //    httpRequest’s header list does not contain `Cache-Control`, then append\n    //    `Cache-Control`/`max-age=0` to httpRequest’s header list.\n    if (httpRequest.cache === \"no-cache\" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains(\"cache-control\")) {\n        httpRequest.headersList.append(\"cache-control\", \"max-age=0\");\n    }\n    //    17. If httpRequest’s cache mode is \"no-store\" or \"reload\", then:\n    if (httpRequest.cache === \"no-store\" || httpRequest.cache === \"reload\") {\n        // 1. If httpRequest’s header list does not contain `Pragma`, then append\n        // `Pragma`/`no-cache` to httpRequest’s header list.\n        if (!httpRequest.headersList.contains(\"pragma\")) {\n            httpRequest.headersList.append(\"pragma\", \"no-cache\");\n        }\n        // 2. If httpRequest’s header list does not contain `Cache-Control`,\n        // then append `Cache-Control`/`no-cache` to httpRequest’s header list.\n        if (!httpRequest.headersList.contains(\"cache-control\")) {\n            httpRequest.headersList.append(\"cache-control\", \"no-cache\");\n        }\n    }\n    //    18. If httpRequest’s header list contains `Range`, then append\n    //    `Accept-Encoding`/`identity` to httpRequest’s header list.\n    if (httpRequest.headersList.contains(\"range\")) {\n        httpRequest.headersList.append(\"accept-encoding\", \"identity\");\n    }\n    //    19. Modify httpRequest’s header list per HTTP. Do not append a given\n    //    header if httpRequest’s header list contains that header’s name.\n    //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n    if (!httpRequest.headersList.contains(\"accept-encoding\")) {\n        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n            httpRequest.headersList.append(\"accept-encoding\", \"br, gzip, deflate\");\n        } else {\n            httpRequest.headersList.append(\"accept-encoding\", \"gzip, deflate\");\n        }\n    }\n    httpRequest.headersList.delete(\"host\");\n    //    20. If includeCredentials is true, then:\n    if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest’s header list does not contain `Authorization`, then:\n    // TODO: credentials\n    }\n    //    21. If there’s a proxy-authentication entry, use it as appropriate.\n    //    TODO: proxy-authentication\n    //    22. Set httpCache to the result of determining the HTTP cache\n    //    partition, given httpRequest.\n    //    TODO: cache\n    //    23. If httpCache is null, then set httpRequest’s cache mode to\n    //    \"no-store\".\n    if (httpCache == null) {\n        httpRequest.cache = \"no-store\";\n    }\n    //    24. If httpRequest’s cache mode is neither \"no-store\" nor \"reload\",\n    //    then:\n    if (httpRequest.mode !== \"no-store\" && httpRequest.mode !== \"reload\") {\n    // TODO: cache\n    }\n    // 9. If aborted, then return the appropriate network error for fetchParams.\n    // TODO\n    // 10. If response is null, then:\n    if (response == null) {\n        // 1. If httpRequest’s cache mode is \"only-if-cached\", then return a\n        // network error.\n        if (httpRequest.mode === \"only-if-cached\") {\n            return makeNetworkError(\"only if cached\");\n        }\n        // 2. Let forwardResponse be the result of running HTTP-network fetch\n        // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n        const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);\n        // 3. If httpRequest’s method is unsafe and forwardResponse’s status is\n        // in the range 200 to 399, inclusive, invalidate appropriate stored\n        // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n        // Caching, and set storedResponse to null. [HTTP-CACHING]\n        if (!safeMethods.includes(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {\n        // TODO: cache\n        }\n        // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,\n        // then:\n        if (revalidatingFlag && forwardResponse.status === 304) {\n        // TODO: cache\n        }\n        // 5. If response is null, then:\n        if (response == null) {\n            // 1. Set response to forwardResponse.\n            response = forwardResponse;\n        // 2. Store httpRequest and forwardResponse in httpCache, as per the\n        // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n        // TODO: cache\n        }\n    }\n    // 11. Set response’s URL list to a clone of httpRequest’s URL list.\n    response.urlList = [\n        ...httpRequest.urlList\n    ];\n    // 12. If httpRequest’s header list contains `Range`, then set response’s\n    // range-requested flag.\n    if (httpRequest.headersList.contains(\"range\")) {\n        response.rangeRequested = true;\n    }\n    // 13. Set response’s request-includes-credentials to includeCredentials.\n    response.requestIncludesCredentials = includeCredentials;\n    // 14. If response’s status is 401, httpRequest’s response tainting is not\n    // \"cors\", includeCredentials is true, and request’s window is an environment\n    // settings object, then:\n    // TODO\n    // 15. If response’s status is 407, then:\n    if (response.status === 407) {\n        // 1. If request’s window is \"no-window\", then return a network error.\n        if (request.window === \"no-window\") {\n            return makeNetworkError();\n        }\n        // 2. ???\n        // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n        if (isCancelled(fetchParams)) {\n            return makeAppropriateNetworkError(fetchParams);\n        }\n        // 4. Prompt the end user as appropriate in request’s window and store\n        // the result as a proxy-authentication entry. [HTTP-AUTH]\n        // TODO: Invoke some kind of callback?\n        // 5. Set response to the result of running HTTP-network-or-cache fetch given\n        // fetchParams.\n        // TODO\n        return makeNetworkError(\"proxy authentication required\");\n    }\n    // 16. If all of the following are true\n    if (// response’s status is 421\n    response.status === 421 && // isNewConnectionFetch is false\n    !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n    (request.body == null || request.body.source != null)) {\n        // then:\n        // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n        if (isCancelled(fetchParams)) {\n            return makeAppropriateNetworkError(fetchParams);\n        }\n        // 2. Set response to the result of running HTTP-network-or-cache\n        // fetch given fetchParams, isAuthenticationFetch, and true.\n        // TODO (spec): The spec doesn't specify this but we need to cancel\n        // the active response before we can start a new one.\n        // https://github.com/whatwg/fetch/issues/1293\n        fetchParams.controller.connection.destroy();\n        response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);\n    }\n    // 17. If isAuthenticationFetch is true, then create an authentication entry\n    if (isAuthenticationFetch) {\n    // TODO\n    }\n    // 18. Return response.\n    return response;\n}\n// https://fetch.spec.whatwg.org/#http-network-fetch\nasync function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {\n    assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);\n    fetchParams.controller.connection = {\n        abort: null,\n        destroyed: false,\n        destroy (err) {\n            if (!this.destroyed) {\n                this.destroyed = true;\n                this.abort?.(err ?? new DOMException(\"The operation was aborted.\", \"AbortError\"));\n            }\n        }\n    };\n    // 1. Let request be fetchParams’s request.\n    const request = fetchParams.request;\n    // 2. Let response be null.\n    let response = null;\n    // 3. Let timingInfo be fetchParams’s timing info.\n    const timingInfo = fetchParams.timingInfo;\n    // 4. Let httpCache be the result of determining the HTTP cache partition,\n    // given request.\n    // TODO: cache\n    const httpCache = null;\n    // 5. If httpCache is null, then set request’s cache mode to \"no-store\".\n    if (httpCache == null) {\n        request.cache = \"no-store\";\n    }\n    // 6. Let networkPartitionKey be the result of determining the network\n    // partition key given request.\n    // TODO\n    // 7. Let newConnection be \"yes\" if forceNewConnection is true; otherwise\n    // \"no\".\n    const newConnection = forceNewConnection ? \"yes\" : \"no\" // eslint-disable-line no-unused-vars\n    ;\n    // 8. Switch on request’s mode:\n    if (request.mode === \"websocket\") {\n    // Let connection be the result of obtaining a WebSocket connection,\n    // given request’s current URL.\n    // TODO\n    } else {\n    // Let connection be the result of obtaining a connection, given\n    // networkPartitionKey, request’s current URL’s origin,\n    // includeCredentials, and forceNewConnection.\n    // TODO\n    }\n    // 9. Run these steps, but abort when the ongoing fetch is terminated:\n    //    1. If connection is failure, then return a network error.\n    //    2. Set timingInfo’s final connection timing info to the result of\n    //    calling clamp and coarsen connection timing info with connection’s\n    //    timing info, timingInfo’s post-redirect start time, and fetchParams’s\n    //    cross-origin isolated capability.\n    //    3. If connection is not an HTTP/2 connection, request’s body is non-null,\n    //    and request’s body’s source is null, then append (`Transfer-Encoding`,\n    //    `chunked`) to request’s header list.\n    //    4. Set timingInfo’s final network-request start time to the coarsened\n    //    shared current time given fetchParams’s cross-origin isolated\n    //    capability.\n    //    5. Set response to the result of making an HTTP request over connection\n    //    using request with the following caveats:\n    //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n    //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n    //        - If request’s body is non-null, and request’s body’s source is null,\n    //        then the user agent may have a buffer of up to 64 kibibytes and store\n    //        a part of request’s body in that buffer. If the user agent reads from\n    //        request’s body beyond that buffer’s size and the user agent needs to\n    //        resend request, then instead return a network error.\n    //        - Set timingInfo’s final network-response start time to the coarsened\n    //        shared current time given fetchParams’s cross-origin isolated capability,\n    //        immediately after the user agent’s HTTP parser receives the first byte\n    //        of the response (e.g., frame header bytes for HTTP/2 or response status\n    //        line for HTTP/1.x).\n    //        - Wait until all the headers are transmitted.\n    //        - Any responses whose status is in the range 100 to 199, inclusive,\n    //        and is not 101, are to be ignored, except for the purposes of setting\n    //        timingInfo’s final network-response start time above.\n    //    - If request’s header list contains `Transfer-Encoding`/`chunked` and\n    //    response is transferred via HTTP/1.0 or older, then return a network\n    //    error.\n    //    - If the HTTP request results in a TLS client certificate dialog, then:\n    //        1. If request’s window is an environment settings object, make the\n    //        dialog available in request’s window.\n    //        2. Otherwise, return a network error.\n    // To transmit request’s body body, run these steps:\n    let requestBody = null;\n    // 1. If body is null and fetchParams’s process request end-of-body is\n    // non-null, then queue a fetch task given fetchParams’s process request\n    // end-of-body and fetchParams’s task destination.\n    if (request.body == null && fetchParams.processRequestEndOfBody) {\n        queueMicrotask(()=>fetchParams.processRequestEndOfBody());\n    } else if (request.body != null) {\n        // 2. Otherwise, if body is non-null:\n        //    1. Let processBodyChunk given bytes be these steps:\n        const processBodyChunk = async function*(bytes) {\n            // 1. If the ongoing fetch is terminated, then abort these steps.\n            if (isCancelled(fetchParams)) {\n                return;\n            }\n            // 2. Run this step in parallel: transmit bytes.\n            yield bytes;\n            // 3. If fetchParams’s process request body is non-null, then run\n            // fetchParams’s process request body given bytes’s length.\n            fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);\n        };\n        // 2. Let processEndOfBody be these steps:\n        const processEndOfBody = ()=>{\n            // 1. If fetchParams is canceled, then abort these steps.\n            if (isCancelled(fetchParams)) {\n                return;\n            }\n            // 2. If fetchParams’s process request end-of-body is non-null,\n            // then run fetchParams’s process request end-of-body.\n            if (fetchParams.processRequestEndOfBody) {\n                fetchParams.processRequestEndOfBody();\n            }\n        };\n        // 3. Let processBodyError given e be these steps:\n        const processBodyError = (e)=>{\n            // 1. If fetchParams is canceled, then abort these steps.\n            if (isCancelled(fetchParams)) {\n                return;\n            }\n            // 2. If e is an \"AbortError\" DOMException, then abort fetchParams’s controller.\n            if (e.name === \"AbortError\") {\n                fetchParams.controller.abort();\n            } else {\n                fetchParams.controller.terminate(e);\n            }\n        };\n        // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,\n        // processBodyError, and fetchParams’s task destination.\n        requestBody = async function*() {\n            try {\n                for await (const bytes of request.body.stream){\n                    yield* processBodyChunk(bytes);\n                }\n                processEndOfBody();\n            } catch (err) {\n                processBodyError(err);\n            }\n        }();\n    }\n    try {\n        // socket is only provided for websockets\n        const { body, status, statusText, headersList, socket } = await dispatch({\n            body: requestBody\n        });\n        if (socket) {\n            response = makeResponse({\n                status,\n                statusText,\n                headersList,\n                socket\n            });\n        } else {\n            const iterator = body[Symbol.asyncIterator]();\n            fetchParams.controller.next = ()=>iterator.next();\n            response = makeResponse({\n                status,\n                statusText,\n                headersList\n            });\n        }\n    } catch (err) {\n        // 10. If aborted, then:\n        if (err.name === \"AbortError\") {\n            // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n            fetchParams.controller.connection.destroy();\n            // 2. Return the appropriate network error for fetchParams.\n            return makeAppropriateNetworkError(fetchParams, err);\n        }\n        return makeNetworkError(err);\n    }\n    // 11. Let pullAlgorithm be an action that resumes the ongoing fetch\n    // if it is suspended.\n    const pullAlgorithm = ()=>{\n        fetchParams.controller.resume();\n    };\n    // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s\n    // controller with reason, given reason.\n    const cancelAlgorithm = (reason)=>{\n        fetchParams.controller.abort(reason);\n    };\n    // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by\n    // the user agent.\n    // TODO\n    // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object\n    // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n    // TODO\n    // 15. Let stream be a new ReadableStream.\n    // 16. Set up stream with pullAlgorithm set to pullAlgorithm,\n    // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to\n    // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.\n    if (!ReadableStream) {\n        ReadableStream = (__webpack_require__(/*! stream/web */ \"stream/web\").ReadableStream);\n    }\n    const stream = new ReadableStream({\n        async start (controller) {\n            fetchParams.controller.controller = controller;\n        },\n        async pull (controller) {\n            await pullAlgorithm(controller);\n        },\n        async cancel (reason) {\n            await cancelAlgorithm(reason);\n        }\n    }, {\n        highWaterMark: 0,\n        size () {\n            return 1;\n        }\n    });\n    // 17. Run these steps, but abort when the ongoing fetch is terminated:\n    //    1. Set response’s body to a new body whose stream is stream.\n    response.body = {\n        stream\n    };\n    //    2. If response is not a network error and request’s cache mode is\n    //    not \"no-store\", then update response in httpCache for request.\n    //    TODO\n    //    3. If includeCredentials is true and the user agent is not configured\n    //    to block cookies for request (see section 7 of [COOKIES]), then run the\n    //    \"set-cookie-string\" parsing algorithm (see section 5.2 of [COOKIES]) on\n    //    the value of each header whose name is a byte-case-insensitive match for\n    //    `Set-Cookie` in response’s header list, if any, and request’s current URL.\n    //    TODO\n    // 18. If aborted, then:\n    // TODO\n    // 19. Run these steps in parallel:\n    //    1. Run these steps, but abort when fetchParams is canceled:\n    fetchParams.controller.on(\"terminated\", onAborted);\n    fetchParams.controller.resume = async ()=>{\n        // 1. While true\n        while(true){\n            // 1-3. See onData...\n            // 4. Set bytes to the result of handling content codings given\n            // codings and bytes.\n            let bytes;\n            let isFailure;\n            try {\n                const { done, value } = await fetchParams.controller.next();\n                if (isAborted(fetchParams)) {\n                    break;\n                }\n                bytes = done ? undefined : value;\n            } catch (err) {\n                if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n                    // zlib doesn't like empty streams.\n                    bytes = undefined;\n                } else {\n                    bytes = err;\n                    // err may be propagated from the result of calling readablestream.cancel,\n                    // which might not be an error. https://github.com/nodejs/undici/issues/2009\n                    isFailure = true;\n                }\n            }\n            if (bytes === undefined) {\n                // 2. Otherwise, if the bytes transmission for response’s message\n                // body is done normally and stream is readable, then close\n                // stream, finalize response for fetchParams and response, and\n                // abort these in-parallel steps.\n                readableStreamClose(fetchParams.controller.controller);\n                finalizeResponse(fetchParams, response);\n                return;\n            }\n            // 5. Increase timingInfo’s decoded body size by bytes’s length.\n            timingInfo.decodedBodySize += bytes?.byteLength ?? 0;\n            // 6. If bytes is failure, then terminate fetchParams’s controller.\n            if (isFailure) {\n                fetchParams.controller.terminate(bytes);\n                return;\n            }\n            // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n            // into stream.\n            fetchParams.controller.controller.enqueue(new Uint8Array(bytes));\n            // 8. If stream is errored, then terminate the ongoing fetch.\n            if (isErrored(stream)) {\n                fetchParams.controller.terminate();\n                return;\n            }\n            // 9. If stream doesn’t need more data ask the user agent to suspend\n            // the ongoing fetch.\n            if (!fetchParams.controller.controller.desiredSize) {\n                return;\n            }\n        }\n    };\n    //    2. If aborted, then:\n    function onAborted(reason) {\n        // 2. If fetchParams is aborted, then:\n        if (isAborted(fetchParams)) {\n            // 1. Set response’s aborted flag.\n            response.aborted = true;\n            // 2. If stream is readable, then error stream with the result of\n            //    deserialize a serialized abort reason given fetchParams’s\n            //    controller’s serialized abort reason and an\n            //    implementation-defined realm.\n            if (isReadable(stream)) {\n                fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);\n            }\n        } else {\n            // 3. Otherwise, if stream is readable, error stream with a TypeError.\n            if (isReadable(stream)) {\n                fetchParams.controller.controller.error(new TypeError(\"terminated\", {\n                    cause: isErrorLike(reason) ? reason : undefined\n                }));\n            }\n        }\n        // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n        // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n        fetchParams.controller.connection.destroy();\n    }\n    // 20. Return response.\n    return response;\n    async function dispatch({ body }) {\n        const url = requestCurrentURL(request);\n        /** @type {import('../..').Agent} */ const agent = fetchParams.controller.dispatcher;\n        return new Promise((resolve, reject)=>agent.dispatch({\n                path: url.pathname + url.search,\n                origin: url.origin,\n                method: request.method,\n                body: fetchParams.controller.dispatcher.isMockActive ? request.body && request.body.source : body,\n                headers: request.headersList.entries,\n                maxRedirections: 0,\n                upgrade: request.mode === \"websocket\" ? \"websocket\" : undefined\n            }, {\n                body: null,\n                abort: null,\n                onConnect (abort) {\n                    // TODO (fix): Do we need connection here?\n                    const { connection } = fetchParams.controller;\n                    if (connection.destroyed) {\n                        abort(new DOMException(\"The operation was aborted.\", \"AbortError\"));\n                    } else {\n                        fetchParams.controller.on(\"terminated\", abort);\n                        this.abort = connection.abort = abort;\n                    }\n                },\n                onHeaders (status, headersList, resume, statusText) {\n                    if (status < 200) {\n                        return;\n                    }\n                    let codings = [];\n                    let location = \"\";\n                    const headers = new Headers();\n                    // For H2, the headers are a plain JS object\n                    // We distinguish between them and iterate accordingly\n                    if (Array.isArray(headersList)) {\n                        for(let n = 0; n < headersList.length; n += 2){\n                            const key = headersList[n + 0].toString(\"latin1\");\n                            const val = headersList[n + 1].toString(\"latin1\");\n                            if (key.toLowerCase() === \"content-encoding\") {\n                                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                                // \"All content-coding values are case-insensitive...\"\n                                codings = val.toLowerCase().split(\",\").map((x)=>x.trim());\n                            } else if (key.toLowerCase() === \"location\") {\n                                location = val;\n                            }\n                            headers.append(key, val);\n                        }\n                    } else {\n                        const keys = Object.keys(headersList);\n                        for (const key of keys){\n                            const val = headersList[key];\n                            if (key.toLowerCase() === \"content-encoding\") {\n                                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                                // \"All content-coding values are case-insensitive...\"\n                                codings = val.toLowerCase().split(\",\").map((x)=>x.trim()).reverse();\n                            } else if (key.toLowerCase() === \"location\") {\n                                location = val;\n                            }\n                            headers.append(key, val);\n                        }\n                    }\n                    this.body = new Readable({\n                        read: resume\n                    });\n                    const decoders = [];\n                    const willFollow = request.redirect === \"follow\" && location && redirectStatus.includes(status);\n                    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n                    if (request.method !== \"HEAD\" && request.method !== \"CONNECT\" && !nullBodyStatus.includes(status) && !willFollow) {\n                        for (const coding of codings){\n                            // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2\n                            if (coding === \"x-gzip\" || coding === \"gzip\") {\n                                decoders.push(zlib.createGunzip({\n                                    // Be less strict when decoding compressed responses, since sometimes\n                                    // servers send slightly invalid responses that are still accepted\n                                    // by common browsers.\n                                    // Always using Z_SYNC_FLUSH is what cURL does.\n                                    flush: zlib.constants.Z_SYNC_FLUSH,\n                                    finishFlush: zlib.constants.Z_SYNC_FLUSH\n                                }));\n                            } else if (coding === \"deflate\") {\n                                decoders.push(zlib.createInflate());\n                            } else if (coding === \"br\") {\n                                decoders.push(zlib.createBrotliDecompress());\n                            } else {\n                                decoders.length = 0;\n                                break;\n                            }\n                        }\n                    }\n                    resolve({\n                        status,\n                        statusText,\n                        headersList: headers[kHeadersList],\n                        body: decoders.length ? pipeline(this.body, ...decoders, ()=>{}) : this.body.on(\"error\", ()=>{})\n                    });\n                    return true;\n                },\n                onData (chunk) {\n                    if (fetchParams.controller.dump) {\n                        return;\n                    }\n                    // 1. If one or more bytes have been transmitted from response’s\n                    // message body, then:\n                    //  1. Let bytes be the transmitted bytes.\n                    const bytes = chunk;\n                    //  2. Let codings be the result of extracting header list values\n                    //  given `Content-Encoding` and response’s header list.\n                    //  See pullAlgorithm.\n                    //  3. Increase timingInfo’s encoded body size by bytes’s length.\n                    timingInfo.encodedBodySize += bytes.byteLength;\n                    //  4. See pullAlgorithm...\n                    return this.body.push(bytes);\n                },\n                onComplete () {\n                    if (this.abort) {\n                        fetchParams.controller.off(\"terminated\", this.abort);\n                    }\n                    fetchParams.controller.ended = true;\n                    this.body.push(null);\n                },\n                onError (error) {\n                    if (this.abort) {\n                        fetchParams.controller.off(\"terminated\", this.abort);\n                    }\n                    this.body?.destroy(error);\n                    fetchParams.controller.terminate(error);\n                    reject(error);\n                },\n                onUpgrade (status, headersList, socket) {\n                    if (status !== 101) {\n                        return;\n                    }\n                    const headers = new Headers();\n                    for(let n = 0; n < headersList.length; n += 2){\n                        const key = headersList[n + 0].toString(\"latin1\");\n                        const val = headersList[n + 1].toString(\"latin1\");\n                        headers.append(key, val);\n                    }\n                    resolve({\n                        status,\n                        statusText: STATUS_CODES[status],\n                        headersList: headers[kHeadersList],\n                        socket\n                    });\n                    return true;\n                }\n            }));\n    }\n}\nmodule.exports = {\n    fetch,\n    Fetch,\n    fetching,\n    finalizeAndReportTiming\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/request.js":
/*!**************************************************!*\
  !*** ./node_modules/undici/lib/fetch/request.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* globals AbortController */ \nconst { extractBody, mixinBody, cloneBody } = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/fetch/body.js\");\nconst { Headers, fill: fillHeaders, HeadersList } = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/fetch/headers.js\");\nconst { FinalizationRegistry } = __webpack_require__(/*! ../compat/dispatcher-weakref */ \"(ssr)/./node_modules/undici/lib/compat/dispatcher-weakref.js\")();\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { isValidHTTPToken, sameOrigin, normalizeMethod, makePolicyContainer } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst { forbiddenMethods, corsSafeListedMethods, referrerPolicy, requestRedirect, requestMode, requestCredentials, requestCache, requestDuplex } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/fetch/constants.js\");\nconst { kEnumerableProperty } = util;\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fetch/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { getGlobalOrigin } = __webpack_require__(/*! ./global */ \"(ssr)/./node_modules/undici/lib/fetch/global.js\");\nconst { URLSerializer } = __webpack_require__(/*! ./dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nconst { kHeadersList } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __webpack_require__(/*! events */ \"events\");\nlet TransformStream = globalThis.TransformStream;\nconst kInit = Symbol(\"init\");\nconst kAbortController = Symbol(\"abortController\");\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort })=>{\n    signal.removeEventListener(\"abort\", abort);\n});\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n    // https://fetch.spec.whatwg.org/#dom-request\n    constructor(input, init = {}){\n        if (input === kInit) {\n            return;\n        }\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Request constructor\"\n        });\n        input = webidl.converters.RequestInfo(input);\n        init = webidl.converters.RequestInit(init);\n        // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n        this[kRealm] = {\n            settingsObject: {\n                baseUrl: getGlobalOrigin(),\n                get origin () {\n                    return this.baseUrl?.origin;\n                },\n                policyContainer: makePolicyContainer()\n            }\n        };\n        // 1. Let request be null.\n        let request = null;\n        // 2. Let fallbackMode be null.\n        let fallbackMode = null;\n        // 3. Let baseURL be this’s relevant settings object’s API base URL.\n        const baseUrl = this[kRealm].settingsObject.baseUrl;\n        // 4. Let signal be null.\n        let signal = null;\n        // 5. If input is a string, then:\n        if (typeof input === \"string\") {\n            // 1. Let parsedURL be the result of parsing input with baseURL.\n            // 2. If parsedURL is failure, then throw a TypeError.\n            let parsedURL;\n            try {\n                parsedURL = new URL(input, baseUrl);\n            } catch (err) {\n                throw new TypeError(\"Failed to parse URL from \" + input, {\n                    cause: err\n                });\n            }\n            // 3. If parsedURL includes credentials, then throw a TypeError.\n            if (parsedURL.username || parsedURL.password) {\n                throw new TypeError(\"Request cannot be constructed from a URL that includes credentials: \" + input);\n            }\n            // 4. Set request to a new request whose URL is parsedURL.\n            request = makeRequest({\n                urlList: [\n                    parsedURL\n                ]\n            });\n            // 5. Set fallbackMode to \"cors\".\n            fallbackMode = \"cors\";\n        } else {\n            // 6. Otherwise:\n            // 7. Assert: input is a Request object.\n            assert(input instanceof Request);\n            // 8. Set request to input’s request.\n            request = input[kState];\n            // 9. Set signal to input’s signal.\n            signal = input[kSignal];\n        }\n        // 7. Let origin be this’s relevant settings object’s origin.\n        const origin = this[kRealm].settingsObject.origin;\n        // 8. Let window be \"client\".\n        let window = \"client\";\n        // 9. If request’s window is an environment settings object and its origin\n        // is same origin with origin, then set window to request’s window.\n        if (request.window?.constructor?.name === \"EnvironmentSettingsObject\" && sameOrigin(request.window, origin)) {\n            window = request.window;\n        }\n        // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n        if (init.window != null) {\n            throw new TypeError(`'window' option '${window}' must be null`);\n        }\n        // 11. If init[\"window\"] exists, then set window to \"no-window\".\n        if (\"window\" in init) {\n            window = \"no-window\";\n        }\n        // 12. Set request to a new request with the following properties:\n        request = makeRequest({\n            // URL request’s URL.\n            // undici implementation note: this is set as the first item in request's urlList in makeRequest\n            // method request’s method.\n            method: request.method,\n            // header list A copy of request’s header list.\n            // undici implementation note: headersList is cloned in makeRequest\n            headersList: request.headersList,\n            // unsafe-request flag Set.\n            unsafeRequest: request.unsafeRequest,\n            // client This’s relevant settings object.\n            client: this[kRealm].settingsObject,\n            // window window.\n            window,\n            // priority request’s priority.\n            priority: request.priority,\n            // origin request’s origin. The propagation of the origin is only significant for navigation requests\n            // being handled by a service worker. In this scenario a request can have an origin that is different\n            // from the current client.\n            origin: request.origin,\n            // referrer request’s referrer.\n            referrer: request.referrer,\n            // referrer policy request’s referrer policy.\n            referrerPolicy: request.referrerPolicy,\n            // mode request’s mode.\n            mode: request.mode,\n            // credentials mode request’s credentials mode.\n            credentials: request.credentials,\n            // cache mode request’s cache mode.\n            cache: request.cache,\n            // redirect mode request’s redirect mode.\n            redirect: request.redirect,\n            // integrity metadata request’s integrity metadata.\n            integrity: request.integrity,\n            // keepalive request’s keepalive.\n            keepalive: request.keepalive,\n            // reload-navigation flag request’s reload-navigation flag.\n            reloadNavigation: request.reloadNavigation,\n            // history-navigation flag request’s history-navigation flag.\n            historyNavigation: request.historyNavigation,\n            // URL list A clone of request’s URL list.\n            urlList: [\n                ...request.urlList\n            ]\n        });\n        // 13. If init is not empty, then:\n        if (Object.keys(init).length > 0) {\n            // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n            if (request.mode === \"navigate\") {\n                request.mode = \"same-origin\";\n            }\n            // 2. Unset request’s reload-navigation flag.\n            request.reloadNavigation = false;\n            // 3. Unset request’s history-navigation flag.\n            request.historyNavigation = false;\n            // 4. Set request’s origin to \"client\".\n            request.origin = \"client\";\n            // 5. Set request’s referrer to \"client\"\n            request.referrer = \"client\";\n            // 6. Set request’s referrer policy to the empty string.\n            request.referrerPolicy = \"\";\n            // 7. Set request’s URL to request’s current URL.\n            request.url = request.urlList[request.urlList.length - 1];\n            // 8. Set request’s URL list to « request’s URL ».\n            request.urlList = [\n                request.url\n            ];\n        }\n        // 14. If init[\"referrer\"] exists, then:\n        if (init.referrer !== undefined) {\n            // 1. Let referrer be init[\"referrer\"].\n            const referrer = init.referrer;\n            // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n            if (referrer === \"\") {\n                request.referrer = \"no-referrer\";\n            } else {\n                // 1. Let parsedReferrer be the result of parsing referrer with\n                // baseURL.\n                // 2. If parsedReferrer is failure, then throw a TypeError.\n                let parsedReferrer;\n                try {\n                    parsedReferrer = new URL(referrer, baseUrl);\n                } catch (err) {\n                    throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n                        cause: err\n                    });\n                }\n                // 3. If one of the following is true\n                // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n                // - parsedReferrer’s origin is not same origin with origin\n                // then set request’s referrer to \"client\".\n                if (parsedReferrer.protocol === \"about:\" && parsedReferrer.hostname === \"client\" || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {\n                    request.referrer = \"client\";\n                } else {\n                    // 4. Otherwise, set request’s referrer to parsedReferrer.\n                    request.referrer = parsedReferrer;\n                }\n            }\n        }\n        // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n        // to it.\n        if (init.referrerPolicy !== undefined) {\n            request.referrerPolicy = init.referrerPolicy;\n        }\n        // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n        let mode;\n        if (init.mode !== undefined) {\n            mode = init.mode;\n        } else {\n            mode = fallbackMode;\n        }\n        // 17. If mode is \"navigate\", then throw a TypeError.\n        if (mode === \"navigate\") {\n            throw webidl.errors.exception({\n                header: \"Request constructor\",\n                message: \"invalid request mode navigate.\"\n            });\n        }\n        // 18. If mode is non-null, set request’s mode to mode.\n        if (mode != null) {\n            request.mode = mode;\n        }\n        // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n        // to it.\n        if (init.credentials !== undefined) {\n            request.credentials = init.credentials;\n        }\n        // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n        if (init.cache !== undefined) {\n            request.cache = init.cache;\n        }\n        // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n        // not \"same-origin\", then throw a TypeError.\n        if (request.cache === \"only-if-cached\" && request.mode !== \"same-origin\") {\n            throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n        }\n        // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n        if (init.redirect !== undefined) {\n            request.redirect = init.redirect;\n        }\n        // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n        if (init.integrity !== undefined && init.integrity != null) {\n            request.integrity = String(init.integrity);\n        }\n        // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n        if (init.keepalive !== undefined) {\n            request.keepalive = Boolean(init.keepalive);\n        }\n        // 25. If init[\"method\"] exists, then:\n        if (init.method !== undefined) {\n            // 1. Let method be init[\"method\"].\n            let method = init.method;\n            // 2. If method is not a method or method is a forbidden method, then\n            // throw a TypeError.\n            if (!isValidHTTPToken(init.method)) {\n                throw TypeError(`'${init.method}' is not a valid HTTP method.`);\n            }\n            if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {\n                throw TypeError(`'${init.method}' HTTP method is unsupported.`);\n            }\n            // 3. Normalize method.\n            method = normalizeMethod(init.method);\n            // 4. Set request’s method to method.\n            request.method = method;\n        }\n        // 26. If init[\"signal\"] exists, then set signal to it.\n        if (init.signal !== undefined) {\n            signal = init.signal;\n        }\n        // 27. Set this’s request to request.\n        this[kState] = request;\n        // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n        // Realm.\n        // TODO: could this be simplified with AbortSignal.any\n        // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n        const ac = new AbortController();\n        this[kSignal] = ac.signal;\n        this[kSignal][kRealm] = this[kRealm];\n        // 29. If signal is not null, then make this’s signal follow signal.\n        if (signal != null) {\n            if (!signal || typeof signal.aborted !== \"boolean\" || typeof signal.addEventListener !== \"function\") {\n                throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n            }\n            if (signal.aborted) {\n                ac.abort(signal.reason);\n            } else {\n                // Keep a strong ref to ac while request object\n                // is alive. This is needed to prevent AbortController\n                // from being prematurely garbage collected.\n                // See, https://github.com/nodejs/undici/issues/1926.\n                this[kAbortController] = ac;\n                const acRef = new WeakRef(ac);\n                const abort = function() {\n                    const ac = acRef.deref();\n                    if (ac !== undefined) {\n                        ac.abort(this.reason);\n                    }\n                };\n                // Third-party AbortControllers may not work with these.\n                // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n                try {\n                    // If the max amount of listeners is equal to the default, increase it\n                    // This is only available in node >= v19.9.0\n                    if (typeof getMaxListeners === \"function\" && getMaxListeners(signal) === defaultMaxListeners) {\n                        setMaxListeners(100, signal);\n                    } else if (getEventListeners(signal, \"abort\").length >= defaultMaxListeners) {\n                        setMaxListeners(100, signal);\n                    }\n                } catch  {}\n                util.addAbortListener(signal, abort);\n                requestFinalizer.register(ac, {\n                    signal,\n                    abort\n                });\n            }\n        }\n        // 30. Set this’s headers to a new Headers object with this’s relevant\n        // Realm, whose header list is request’s header list and guard is\n        // \"request\".\n        this[kHeaders] = new Headers();\n        this[kHeaders][kHeadersList] = request.headersList;\n        this[kHeaders][kGuard] = \"request\";\n        this[kHeaders][kRealm] = this[kRealm];\n        // 31. If this’s request’s mode is \"no-cors\", then:\n        if (mode === \"no-cors\") {\n            // 1. If this’s request’s method is not a CORS-safelisted method,\n            // then throw a TypeError.\n            if (!corsSafeListedMethods.includes(request.method)) {\n                throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n            }\n            // 2. Set this’s headers’s guard to \"request-no-cors\".\n            this[kHeaders][kGuard] = \"request-no-cors\";\n        }\n        // 32. If init is not empty, then:\n        if (Object.keys(init).length !== 0) {\n            // 1. Let headers be a copy of this’s headers and its associated header\n            // list.\n            let headers = new Headers(this[kHeaders]);\n            // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n            if (init.headers !== undefined) {\n                headers = init.headers;\n            }\n            // 3. Empty this’s headers’s header list.\n            this[kHeaders][kHeadersList].clear();\n            // 4. If headers is a Headers object, then for each header in its header\n            // list, append header’s name/header’s value to this’s headers.\n            if (headers.constructor.name === \"Headers\") {\n                for (const [key, val] of headers){\n                    this[kHeaders].append(key, val);\n                }\n            } else {\n                // 5. Otherwise, fill this’s headers with headers.\n                fillHeaders(this[kHeaders], headers);\n            }\n        }\n        // 33. Let inputBody be input’s request’s body if input is a Request\n        // object; otherwise null.\n        const inputBody = input instanceof Request ? input[kState].body : null;\n        // 34. If either init[\"body\"] exists and is non-null or inputBody is\n        // non-null, and request’s method is `GET` or `HEAD`, then throw a\n        // TypeError.\n        if ((init.body != null || inputBody != null) && (request.method === \"GET\" || request.method === \"HEAD\")) {\n            throw new TypeError(\"Request with GET/HEAD method cannot have body.\");\n        }\n        // 35. Let initBody be null.\n        let initBody = null;\n        // 36. If init[\"body\"] exists and is non-null, then:\n        if (init.body != null) {\n            // 1. Let Content-Type be null.\n            // 2. Set initBody and Content-Type to the result of extracting\n            // init[\"body\"], with keepalive set to request’s keepalive.\n            const [extractedBody, contentType] = extractBody(init.body, request.keepalive);\n            initBody = extractedBody;\n            // 3, If Content-Type is non-null and this’s headers’s header list does\n            // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n            // this’s headers.\n            if (contentType && !this[kHeaders][kHeadersList].contains(\"content-type\")) {\n                this[kHeaders].append(\"content-type\", contentType);\n            }\n        }\n        // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n        // inputBody.\n        const inputOrInitBody = initBody ?? inputBody;\n        // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n        // null, then:\n        if (inputOrInitBody != null && inputOrInitBody.source == null) {\n            // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n            //    then throw a TypeError.\n            if (initBody != null && init.duplex == null) {\n                throw new TypeError(\"RequestInit: duplex option is required when sending a body.\");\n            }\n            // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n            // then throw a TypeError.\n            if (request.mode !== \"same-origin\" && request.mode !== \"cors\") {\n                throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n            }\n            // 3. Set this’s request’s use-CORS-preflight flag.\n            request.useCORSPreflightFlag = true;\n        }\n        // 39. Let finalBody be inputOrInitBody.\n        let finalBody = inputOrInitBody;\n        // 40. If initBody is null and inputBody is non-null, then:\n        if (initBody == null && inputBody != null) {\n            // 1. If input is unusable, then throw a TypeError.\n            if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n                throw new TypeError(\"Cannot construct a Request with a Request object that has already been used.\");\n            }\n            // 2. Set finalBody to the result of creating a proxy for inputBody.\n            if (!TransformStream) {\n                TransformStream = (__webpack_require__(/*! stream/web */ \"stream/web\").TransformStream);\n            }\n            // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n            const identityTransform = new TransformStream();\n            inputBody.stream.pipeThrough(identityTransform);\n            finalBody = {\n                source: inputBody.source,\n                length: inputBody.length,\n                stream: identityTransform.readable\n            };\n        }\n        // 41. Set this’s request’s body to finalBody.\n        this[kState].body = finalBody;\n    }\n    // Returns request’s HTTP method, which is \"GET\" by default.\n    get method() {\n        webidl.brandCheck(this, Request);\n        // The method getter steps are to return this’s request’s method.\n        return this[kState].method;\n    }\n    // Returns the URL of request as a string.\n    get url() {\n        webidl.brandCheck(this, Request);\n        // The url getter steps are to return this’s request’s URL, serialized.\n        return URLSerializer(this[kState].url);\n    }\n    // Returns a Headers object consisting of the headers associated with request.\n    // Note that headers added in the network layer by the user agent will not\n    // be accounted for in this object, e.g., the \"Host\" header.\n    get headers() {\n        webidl.brandCheck(this, Request);\n        // The headers getter steps are to return this’s headers.\n        return this[kHeaders];\n    }\n    // Returns the kind of resource requested by request, e.g., \"document\"\n    // or \"script\".\n    get destination() {\n        webidl.brandCheck(this, Request);\n        // The destination getter are to return this’s request’s destination.\n        return this[kState].destination;\n    }\n    // Returns the referrer of request. Its value can be a same-origin URL if\n    // explicitly set in init, the empty string to indicate no referrer, and\n    // \"about:client\" when defaulting to the global’s default. This is used\n    // during fetching to determine the value of the `Referer` header of the\n    // request being made.\n    get referrer() {\n        webidl.brandCheck(this, Request);\n        // 1. If this’s request’s referrer is \"no-referrer\", then return the\n        // empty string.\n        if (this[kState].referrer === \"no-referrer\") {\n            return \"\";\n        }\n        // 2. If this’s request’s referrer is \"client\", then return\n        // \"about:client\".\n        if (this[kState].referrer === \"client\") {\n            return \"about:client\";\n        }\n        // Return this’s request’s referrer, serialized.\n        return this[kState].referrer.toString();\n    }\n    // Returns the referrer policy associated with request.\n    // This is used during fetching to compute the value of the request’s\n    // referrer.\n    get referrerPolicy() {\n        webidl.brandCheck(this, Request);\n        // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n        return this[kState].referrerPolicy;\n    }\n    // Returns the mode associated with request, which is a string indicating\n    // whether the request will use CORS, or will be restricted to same-origin\n    // URLs.\n    get mode() {\n        webidl.brandCheck(this, Request);\n        // The mode getter steps are to return this’s request’s mode.\n        return this[kState].mode;\n    }\n    // Returns the credentials mode associated with request,\n    // which is a string indicating whether credentials will be sent with the\n    // request always, never, or only when sent to a same-origin URL.\n    get credentials() {\n        // The credentials getter steps are to return this’s request’s credentials mode.\n        return this[kState].credentials;\n    }\n    // Returns the cache mode associated with request,\n    // which is a string indicating how the request will\n    // interact with the browser’s cache when fetching.\n    get cache() {\n        webidl.brandCheck(this, Request);\n        // The cache getter steps are to return this’s request’s cache mode.\n        return this[kState].cache;\n    }\n    // Returns the redirect mode associated with request,\n    // which is a string indicating how redirects for the\n    // request will be handled during fetching. A request\n    // will follow redirects by default.\n    get redirect() {\n        webidl.brandCheck(this, Request);\n        // The redirect getter steps are to return this’s request’s redirect mode.\n        return this[kState].redirect;\n    }\n    // Returns request’s subresource integrity metadata, which is a\n    // cryptographic hash of the resource being fetched. Its value\n    // consists of multiple hashes separated by whitespace. [SRI]\n    get integrity() {\n        webidl.brandCheck(this, Request);\n        // The integrity getter steps are to return this’s request’s integrity\n        // metadata.\n        return this[kState].integrity;\n    }\n    // Returns a boolean indicating whether or not request can outlive the\n    // global in which it was created.\n    get keepalive() {\n        webidl.brandCheck(this, Request);\n        // The keepalive getter steps are to return this’s request’s keepalive.\n        return this[kState].keepalive;\n    }\n    // Returns a boolean indicating whether or not request is for a reload\n    // navigation.\n    get isReloadNavigation() {\n        webidl.brandCheck(this, Request);\n        // The isReloadNavigation getter steps are to return true if this’s\n        // request’s reload-navigation flag is set; otherwise false.\n        return this[kState].reloadNavigation;\n    }\n    // Returns a boolean indicating whether or not request is for a history\n    // navigation (a.k.a. back-foward navigation).\n    get isHistoryNavigation() {\n        webidl.brandCheck(this, Request);\n        // The isHistoryNavigation getter steps are to return true if this’s request’s\n        // history-navigation flag is set; otherwise false.\n        return this[kState].historyNavigation;\n    }\n    // Returns the signal associated with request, which is an AbortSignal\n    // object indicating whether or not request has been aborted, and its\n    // abort event handler.\n    get signal() {\n        webidl.brandCheck(this, Request);\n        // The signal getter steps are to return this’s signal.\n        return this[kSignal];\n    }\n    get body() {\n        webidl.brandCheck(this, Request);\n        return this[kState].body ? this[kState].body.stream : null;\n    }\n    get bodyUsed() {\n        webidl.brandCheck(this, Request);\n        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n    }\n    get duplex() {\n        webidl.brandCheck(this, Request);\n        return \"half\";\n    }\n    // Returns a clone of request.\n    clone() {\n        webidl.brandCheck(this, Request);\n        // 1. If this is unusable, then throw a TypeError.\n        if (this.bodyUsed || this.body?.locked) {\n            throw new TypeError(\"unusable\");\n        }\n        // 2. Let clonedRequest be the result of cloning this’s request.\n        const clonedRequest = cloneRequest(this[kState]);\n        // 3. Let clonedRequestObject be the result of creating a Request object,\n        // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n        const clonedRequestObject = new Request(kInit);\n        clonedRequestObject[kState] = clonedRequest;\n        clonedRequestObject[kRealm] = this[kRealm];\n        clonedRequestObject[kHeaders] = new Headers();\n        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;\n        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];\n        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];\n        // 4. Make clonedRequestObject’s signal follow this’s signal.\n        const ac = new AbortController();\n        if (this.signal.aborted) {\n            ac.abort(this.signal.reason);\n        } else {\n            util.addAbortListener(this.signal, ()=>{\n                ac.abort(this.signal.reason);\n            });\n        }\n        clonedRequestObject[kSignal] = ac.signal;\n        // 4. Return clonedRequestObject.\n        return clonedRequestObject;\n    }\n}\nmixinBody(Request);\nfunction makeRequest(init) {\n    // https://fetch.spec.whatwg.org/#requests\n    const request = {\n        method: \"GET\",\n        localURLsOnly: false,\n        unsafeRequest: false,\n        body: null,\n        client: null,\n        reservedClient: null,\n        replacesClientId: \"\",\n        window: \"client\",\n        keepalive: false,\n        serviceWorkers: \"all\",\n        initiator: \"\",\n        destination: \"\",\n        priority: null,\n        origin: \"client\",\n        policyContainer: \"client\",\n        referrer: \"client\",\n        referrerPolicy: \"\",\n        mode: \"no-cors\",\n        useCORSPreflightFlag: false,\n        credentials: \"same-origin\",\n        useCredentials: false,\n        cache: \"default\",\n        redirect: \"follow\",\n        integrity: \"\",\n        cryptoGraphicsNonceMetadata: \"\",\n        parserMetadata: \"\",\n        reloadNavigation: false,\n        historyNavigation: false,\n        userActivation: false,\n        taintedOrigin: false,\n        redirectCount: 0,\n        responseTainting: \"basic\",\n        preventNoCacheCacheControlHeaderModification: false,\n        done: false,\n        timingAllowFailed: false,\n        ...init,\n        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n    };\n    request.url = request.urlList[0];\n    return request;\n}\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest(request) {\n    // To clone a request request, run these steps:\n    // 1. Let newRequest be a copy of request, except for its body.\n    const newRequest = makeRequest({\n        ...request,\n        body: null\n    });\n    // 2. If request’s body is non-null, set newRequest’s body to the\n    // result of cloning request’s body.\n    if (request.body != null) {\n        newRequest.body = cloneBody(request.body);\n    }\n    // 3. Return newRequest.\n    return newRequest;\n}\nObject.defineProperties(Request.prototype, {\n    method: kEnumerableProperty,\n    url: kEnumerableProperty,\n    headers: kEnumerableProperty,\n    redirect: kEnumerableProperty,\n    clone: kEnumerableProperty,\n    signal: kEnumerableProperty,\n    duplex: kEnumerableProperty,\n    destination: kEnumerableProperty,\n    body: kEnumerableProperty,\n    bodyUsed: kEnumerableProperty,\n    isHistoryNavigation: kEnumerableProperty,\n    isReloadNavigation: kEnumerableProperty,\n    keepalive: kEnumerableProperty,\n    integrity: kEnumerableProperty,\n    cache: kEnumerableProperty,\n    credentials: kEnumerableProperty,\n    attribute: kEnumerableProperty,\n    referrerPolicy: kEnumerableProperty,\n    referrer: kEnumerableProperty,\n    mode: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: \"Request\",\n        configurable: true\n    }\n});\nwebidl.converters.Request = webidl.interfaceConverter(Request);\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function(V) {\n    if (typeof V === \"string\") {\n        return webidl.converters.USVString(V);\n    }\n    if (V instanceof Request) {\n        return webidl.converters.Request(V);\n    }\n    return webidl.converters.USVString(V);\n};\nwebidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n    {\n        key: \"method\",\n        converter: webidl.converters.ByteString\n    },\n    {\n        key: \"headers\",\n        converter: webidl.converters.HeadersInit\n    },\n    {\n        key: \"body\",\n        converter: webidl.nullableConverter(webidl.converters.BodyInit)\n    },\n    {\n        key: \"referrer\",\n        converter: webidl.converters.USVString\n    },\n    {\n        key: \"referrerPolicy\",\n        converter: webidl.converters.DOMString,\n        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n        allowedValues: referrerPolicy\n    },\n    {\n        key: \"mode\",\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#concept-request-mode\n        allowedValues: requestMode\n    },\n    {\n        key: \"credentials\",\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestcredentials\n        allowedValues: requestCredentials\n    },\n    {\n        key: \"cache\",\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestcache\n        allowedValues: requestCache\n    },\n    {\n        key: \"redirect\",\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestredirect\n        allowedValues: requestRedirect\n    },\n    {\n        key: \"integrity\",\n        converter: webidl.converters.DOMString\n    },\n    {\n        key: \"keepalive\",\n        converter: webidl.converters.boolean\n    },\n    {\n        key: \"signal\",\n        converter: webidl.nullableConverter((signal)=>webidl.converters.AbortSignal(signal, {\n                strict: false\n            }))\n    },\n    {\n        key: \"window\",\n        converter: webidl.converters.any\n    },\n    {\n        key: \"duplex\",\n        converter: webidl.converters.DOMString,\n        allowedValues: requestDuplex\n    }\n]);\nmodule.exports = {\n    Request,\n    makeRequest\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/response.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/fetch/response.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Headers, HeadersList, fill } = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/undici/lib/fetch/headers.js\");\nconst { extractBody, cloneBody, mixinBody } = __webpack_require__(/*! ./body */ \"(ssr)/./node_modules/undici/lib/fetch/body.js\");\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { kEnumerableProperty } = util;\nconst { isValidReasonPhrase, isCancelled, isAborted, isBlobLike, serializeJavascriptValueToJSONString, isErrorLike, isomorphicEncode } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\nconst { redirectStatus, nullBodyStatus, DOMException } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/fetch/constants.js\");\nconst { kState, kHeaders, kGuard, kRealm } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fetch/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ./webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { FormData } = __webpack_require__(/*! ./formdata */ \"(ssr)/./node_modules/undici/lib/fetch/formdata.js\");\nconst { getGlobalOrigin } = __webpack_require__(/*! ./global */ \"(ssr)/./node_modules/undici/lib/fetch/global.js\");\nconst { URLSerializer } = __webpack_require__(/*! ./dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nconst { kHeadersList } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { types } = __webpack_require__(/*! util */ \"util\");\nconst ReadableStream = globalThis.ReadableStream || (__webpack_require__(/*! stream/web */ \"stream/web\").ReadableStream);\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n    // Creates network error Response.\n    static error() {\n        // TODO\n        const relevantRealm = {\n            settingsObject: {}\n        };\n        // The static error() method steps are to return the result of creating a\n        // Response object, given a new network error, \"immutable\", and this’s\n        // relevant Realm.\n        const responseObject = new Response();\n        responseObject[kState] = makeNetworkError();\n        responseObject[kRealm] = relevantRealm;\n        responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;\n        responseObject[kHeaders][kGuard] = \"immutable\";\n        responseObject[kHeaders][kRealm] = relevantRealm;\n        return responseObject;\n    }\n    // https://fetch.spec.whatwg.org/#dom-response-json\n    static json(data, init = {}) {\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Response.json\"\n        });\n        if (init !== null) {\n            init = webidl.converters.ResponseInit(init);\n        }\n        // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n        const bytes = new TextEncoder(\"utf-8\").encode(serializeJavascriptValueToJSONString(data));\n        // 2. Let body be the result of extracting bytes.\n        const body = extractBody(bytes);\n        // 3. Let responseObject be the result of creating a Response object, given a new response,\n        //    \"response\", and this’s relevant Realm.\n        const relevantRealm = {\n            settingsObject: {}\n        };\n        const responseObject = new Response();\n        responseObject[kRealm] = relevantRealm;\n        responseObject[kHeaders][kGuard] = \"response\";\n        responseObject[kHeaders][kRealm] = relevantRealm;\n        // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n        initializeResponse(responseObject, init, {\n            body: body[0],\n            type: \"application/json\"\n        });\n        // 5. Return responseObject.\n        return responseObject;\n    }\n    // Creates a redirect Response that redirects to url with status status.\n    static redirect(url, status = 302) {\n        const relevantRealm = {\n            settingsObject: {}\n        };\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"Response.redirect\"\n        });\n        url = webidl.converters.USVString(url);\n        status = webidl.converters[\"unsigned short\"](status);\n        // 1. Let parsedURL be the result of parsing url with current settings\n        // object’s API base URL.\n        // 2. If parsedURL is failure, then throw a TypeError.\n        // TODO: base-URL?\n        let parsedURL;\n        try {\n            parsedURL = new URL(url, getGlobalOrigin());\n        } catch (err) {\n            throw Object.assign(new TypeError(\"Failed to parse URL from \" + url), {\n                cause: err\n            });\n        }\n        // 3. If status is not a redirect status, then throw a RangeError.\n        if (!redirectStatus.includes(status)) {\n            throw new RangeError(\"Invalid status code \" + status);\n        }\n        // 4. Let responseObject be the result of creating a Response object,\n        // given a new response, \"immutable\", and this’s relevant Realm.\n        const responseObject = new Response();\n        responseObject[kRealm] = relevantRealm;\n        responseObject[kHeaders][kGuard] = \"immutable\";\n        responseObject[kHeaders][kRealm] = relevantRealm;\n        // 5. Set responseObject’s response’s status to status.\n        responseObject[kState].status = status;\n        // 6. Let value be parsedURL, serialized and isomorphic encoded.\n        const value = isomorphicEncode(URLSerializer(parsedURL));\n        // 7. Append `Location`/value to responseObject’s response’s header list.\n        responseObject[kState].headersList.append(\"location\", value);\n        // 8. Return responseObject.\n        return responseObject;\n    }\n    // https://fetch.spec.whatwg.org/#dom-response\n    constructor(body = null, init = {}){\n        if (body !== null) {\n            body = webidl.converters.BodyInit(body);\n        }\n        init = webidl.converters.ResponseInit(init);\n        // TODO\n        this[kRealm] = {\n            settingsObject: {}\n        };\n        // 1. Set this’s response to a new response.\n        this[kState] = makeResponse({});\n        // 2. Set this’s headers to a new Headers object with this’s relevant\n        // Realm, whose header list is this’s response’s header list and guard\n        // is \"response\".\n        this[kHeaders] = new Headers();\n        this[kHeaders][kGuard] = \"response\";\n        this[kHeaders][kHeadersList] = this[kState].headersList;\n        this[kHeaders][kRealm] = this[kRealm];\n        // 3. Let bodyWithType be null.\n        let bodyWithType = null;\n        // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n        if (body != null) {\n            const [extractedBody, type] = extractBody(body);\n            bodyWithType = {\n                body: extractedBody,\n                type\n            };\n        }\n        // 5. Perform initialize a response given this, init, and bodyWithType.\n        initializeResponse(this, init, bodyWithType);\n    }\n    // Returns response’s type, e.g., \"cors\".\n    get type() {\n        webidl.brandCheck(this, Response);\n        // The type getter steps are to return this’s response’s type.\n        return this[kState].type;\n    }\n    // Returns response’s URL, if it has one; otherwise the empty string.\n    get url() {\n        webidl.brandCheck(this, Response);\n        const urlList = this[kState].urlList;\n        // The url getter steps are to return the empty string if this’s\n        // response’s URL is null; otherwise this’s response’s URL,\n        // serialized with exclude fragment set to true.\n        const url = urlList[urlList.length - 1] ?? null;\n        if (url === null) {\n            return \"\";\n        }\n        return URLSerializer(url, true);\n    }\n    // Returns whether response was obtained through a redirect.\n    get redirected() {\n        webidl.brandCheck(this, Response);\n        // The redirected getter steps are to return true if this’s response’s URL\n        // list has more than one item; otherwise false.\n        return this[kState].urlList.length > 1;\n    }\n    // Returns response’s status.\n    get status() {\n        webidl.brandCheck(this, Response);\n        // The status getter steps are to return this’s response’s status.\n        return this[kState].status;\n    }\n    // Returns whether response’s status is an ok status.\n    get ok() {\n        webidl.brandCheck(this, Response);\n        // The ok getter steps are to return true if this’s response’s status is an\n        // ok status; otherwise false.\n        return this[kState].status >= 200 && this[kState].status <= 299;\n    }\n    // Returns response’s status message.\n    get statusText() {\n        webidl.brandCheck(this, Response);\n        // The statusText getter steps are to return this’s response’s status\n        // message.\n        return this[kState].statusText;\n    }\n    // Returns response’s headers as Headers.\n    get headers() {\n        webidl.brandCheck(this, Response);\n        // The headers getter steps are to return this’s headers.\n        return this[kHeaders];\n    }\n    get body() {\n        webidl.brandCheck(this, Response);\n        return this[kState].body ? this[kState].body.stream : null;\n    }\n    get bodyUsed() {\n        webidl.brandCheck(this, Response);\n        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n    }\n    // Returns a clone of response.\n    clone() {\n        webidl.brandCheck(this, Response);\n        // 1. If this is unusable, then throw a TypeError.\n        if (this.bodyUsed || this.body && this.body.locked) {\n            throw webidl.errors.exception({\n                header: \"Response.clone\",\n                message: \"Body has already been consumed.\"\n            });\n        }\n        // 2. Let clonedResponse be the result of cloning this’s response.\n        const clonedResponse = cloneResponse(this[kState]);\n        // 3. Return the result of creating a Response object, given\n        // clonedResponse, this’s headers’s guard, and this’s relevant Realm.\n        const clonedResponseObject = new Response();\n        clonedResponseObject[kState] = clonedResponse;\n        clonedResponseObject[kRealm] = this[kRealm];\n        clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;\n        clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];\n        clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];\n        return clonedResponseObject;\n    }\n}\nmixinBody(Response);\nObject.defineProperties(Response.prototype, {\n    type: kEnumerableProperty,\n    url: kEnumerableProperty,\n    status: kEnumerableProperty,\n    ok: kEnumerableProperty,\n    redirected: kEnumerableProperty,\n    statusText: kEnumerableProperty,\n    headers: kEnumerableProperty,\n    clone: kEnumerableProperty,\n    body: kEnumerableProperty,\n    bodyUsed: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: \"Response\",\n        configurable: true\n    }\n});\nObject.defineProperties(Response, {\n    json: kEnumerableProperty,\n    redirect: kEnumerableProperty,\n    error: kEnumerableProperty\n});\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse(response) {\n    // To clone a response response, run these steps:\n    // 1. If response is a filtered response, then return a new identical\n    // filtered response whose internal response is a clone of response’s\n    // internal response.\n    if (response.internalResponse) {\n        return filterResponse(cloneResponse(response.internalResponse), response.type);\n    }\n    // 2. Let newResponse be a copy of response, except for its body.\n    const newResponse = makeResponse({\n        ...response,\n        body: null\n    });\n    // 3. If response’s body is non-null, then set newResponse’s body to the\n    // result of cloning response’s body.\n    if (response.body != null) {\n        newResponse.body = cloneBody(response.body);\n    }\n    // 4. Return newResponse.\n    return newResponse;\n}\nfunction makeResponse(init) {\n    return {\n        aborted: false,\n        rangeRequested: false,\n        timingAllowPassed: false,\n        requestIncludesCredentials: false,\n        type: \"default\",\n        status: 200,\n        timingInfo: null,\n        cacheState: \"\",\n        statusText: \"\",\n        ...init,\n        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList(),\n        urlList: init.urlList ? [\n            ...init.urlList\n        ] : []\n    };\n}\nfunction makeNetworkError(reason) {\n    const isError = isErrorLike(reason);\n    return makeResponse({\n        type: \"error\",\n        status: 0,\n        error: isError ? reason : new Error(reason ? String(reason) : reason),\n        aborted: reason && reason.name === \"AbortError\"\n    });\n}\nfunction makeFilteredResponse(response, state) {\n    state = {\n        internalResponse: response,\n        ...state\n    };\n    return new Proxy(response, {\n        get (target, p) {\n            return p in state ? state[p] : target[p];\n        },\n        set (target, p, value) {\n            assert(!(p in state));\n            target[p] = value;\n            return true;\n        }\n    });\n}\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse(response, type) {\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n    if (type === \"basic\") {\n        // A basic filtered response is a filtered response whose type is \"basic\"\n        // and header list excludes any headers in internal response’s header list\n        // whose name is a forbidden response-header name.\n        // Note: undici does not implement forbidden response-header names\n        return makeFilteredResponse(response, {\n            type: \"basic\",\n            headersList: response.headersList\n        });\n    } else if (type === \"cors\") {\n        // A CORS filtered response is a filtered response whose type is \"cors\"\n        // and header list excludes any headers in internal response’s header\n        // list whose name is not a CORS-safelisted response-header name, given\n        // internal response’s CORS-exposed header-name list.\n        // Note: undici does not implement CORS-safelisted response-header names\n        return makeFilteredResponse(response, {\n            type: \"cors\",\n            headersList: response.headersList\n        });\n    } else if (type === \"opaque\") {\n        // An opaque filtered response is a filtered response whose type is\n        // \"opaque\", URL list is the empty list, status is 0, status message\n        // is the empty byte sequence, header list is empty, and body is null.\n        return makeFilteredResponse(response, {\n            type: \"opaque\",\n            urlList: Object.freeze([]),\n            status: 0,\n            statusText: \"\",\n            body: null\n        });\n    } else if (type === \"opaqueredirect\") {\n        // An opaque-redirect filtered response is a filtered response whose type\n        // is \"opaqueredirect\", status is 0, status message is the empty byte\n        // sequence, header list is empty, and body is null.\n        return makeFilteredResponse(response, {\n            type: \"opaqueredirect\",\n            status: 0,\n            statusText: \"\",\n            headersList: [],\n            body: null\n        });\n    } else {\n        assert(false);\n    }\n}\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError(fetchParams, err = null) {\n    // 1. Assert: fetchParams is canceled.\n    assert(isCancelled(fetchParams));\n    // 2. Return an aborted network error if fetchParams is aborted;\n    // otherwise return a network error.\n    return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException(\"The operation was aborted.\", \"AbortError\"), {\n        cause: err\n    })) : makeNetworkError(Object.assign(new DOMException(\"Request was cancelled.\"), {\n        cause: err\n    }));\n}\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse(response, init, body) {\n    // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n    //    throw a RangeError.\n    if (init.status !== null && (init.status < 200 || init.status > 599)) {\n        throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.');\n    }\n    // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n    //    then throw a TypeError.\n    if (\"statusText\" in init && init.statusText != null) {\n        // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n        //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n        if (!isValidReasonPhrase(String(init.statusText))) {\n            throw new TypeError(\"Invalid statusText\");\n        }\n    }\n    // 3. Set response’s response’s status to init[\"status\"].\n    if (\"status\" in init && init.status != null) {\n        response[kState].status = init.status;\n    }\n    // 4. Set response’s response’s status message to init[\"statusText\"].\n    if (\"statusText\" in init && init.statusText != null) {\n        response[kState].statusText = init.statusText;\n    }\n    // 5. If init[\"headers\"] exists, then fill response’s headers with init[\"headers\"].\n    if (\"headers\" in init && init.headers != null) {\n        fill(response[kHeaders], init.headers);\n    }\n    // 6. If body was given, then:\n    if (body) {\n        // 1. If response's status is a null body status, then throw a TypeError.\n        if (nullBodyStatus.includes(response.status)) {\n            throw webidl.errors.exception({\n                header: \"Response constructor\",\n                message: \"Invalid response status code \" + response.status\n            });\n        }\n        // 2. Set response's body to body's body.\n        response[kState].body = body.body;\n        // 3. If body's type is non-null and response's header list does not contain\n        //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n        if (body.type != null && !response[kState].headersList.contains(\"Content-Type\")) {\n            response[kState].headersList.append(\"content-type\", body.type);\n        }\n    }\n}\nwebidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream);\nwebidl.converters.FormData = webidl.interfaceConverter(FormData);\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams);\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function(V) {\n    if (typeof V === \"string\") {\n        return webidl.converters.USVString(V);\n    }\n    if (isBlobLike(V)) {\n        return webidl.converters.Blob(V, {\n            strict: false\n        });\n    }\n    if (types.isAnyArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {\n        return webidl.converters.BufferSource(V);\n    }\n    if (util.isFormDataLike(V)) {\n        return webidl.converters.FormData(V, {\n            strict: false\n        });\n    }\n    if (V instanceof URLSearchParams) {\n        return webidl.converters.URLSearchParams(V);\n    }\n    return webidl.converters.DOMString(V);\n};\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function(V) {\n    if (V instanceof ReadableStream) {\n        return webidl.converters.ReadableStream(V);\n    }\n    // Note: the spec doesn't include async iterables,\n    // this is an undici extension.\n    if (V?.[Symbol.asyncIterator]) {\n        return V;\n    }\n    return webidl.converters.XMLHttpRequestBodyInit(V);\n};\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([\n    {\n        key: \"status\",\n        converter: webidl.converters[\"unsigned short\"],\n        defaultValue: 200\n    },\n    {\n        key: \"statusText\",\n        converter: webidl.converters.ByteString,\n        defaultValue: \"\"\n    },\n    {\n        key: \"headers\",\n        converter: webidl.converters.HeadersInit\n    }\n]);\nmodule.exports = {\n    makeNetworkError,\n    makeResponse,\n    makeAppropriateNetworkError,\n    filterResponse,\n    Response,\n    cloneResponse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/symbols.js":
/*!**************************************************!*\
  !*** ./node_modules/undici/lib/fetch/symbols.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    kUrl: Symbol(\"url\"),\n    kHeaders: Symbol(\"headers\"),\n    kSignal: Symbol(\"signal\"),\n    kState: Symbol(\"state\"),\n    kGuard: Symbol(\"guard\"),\n    kRealm: Symbol(\"realm\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9mZXRjaC9zeW1ib2xzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxNQUFNQyxPQUFPO0lBQ2JDLFVBQVVELE9BQU87SUFDakJFLFNBQVNGLE9BQU87SUFDaEJHLFFBQVFILE9BQU87SUFDZkksUUFBUUosT0FBTztJQUNmSyxRQUFRTCxPQUFPO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvZmV0Y2gvc3ltYm9scy5qcz81NDBjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAga1VybDogU3ltYm9sKCd1cmwnKSxcbiAga0hlYWRlcnM6IFN5bWJvbCgnaGVhZGVycycpLFxuICBrU2lnbmFsOiBTeW1ib2woJ3NpZ25hbCcpLFxuICBrU3RhdGU6IFN5bWJvbCgnc3RhdGUnKSxcbiAga0d1YXJkOiBTeW1ib2woJ2d1YXJkJyksXG4gIGtSZWFsbTogU3ltYm9sKCdyZWFsbScpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtVcmwiLCJTeW1ib2wiLCJrSGVhZGVycyIsImtTaWduYWwiLCJrU3RhdGUiLCJrR3VhcmQiLCJrUmVhbG0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/util.js":
/*!***********************************************!*\
  !*** ./node_modules/undici/lib/fetch/util.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { redirectStatus, badPorts, referrerPolicy: referrerPolicyTokens } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/fetch/constants.js\");\nconst { getGlobalOrigin } = __webpack_require__(/*! ./global */ \"(ssr)/./node_modules/undici/lib/fetch/global.js\");\nconst { performance } = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\nconst { isBlobLike, toUSVString, ReadableStreamFrom } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { isUint8Array } = __webpack_require__(/*! util/types */ \"util/types\");\n// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable\n/** @type {import('crypto')|undefined} */ let crypto;\ntry {\n    crypto = __webpack_require__(/*! crypto */ \"crypto\");\n} catch  {}\nfunction responseURL(response) {\n    // https://fetch.spec.whatwg.org/#responses\n    // A response has an associated URL. It is a pointer to the last URL\n    // in response’s URL list and null if response’s URL list is empty.\n    const urlList = response.urlList;\n    const length = urlList.length;\n    return length === 0 ? null : urlList[length - 1].toString();\n}\n// https://fetch.spec.whatwg.org/#concept-response-location-url\nfunction responseLocationURL(response, requestFragment) {\n    // 1. If response’s status is not a redirect status, then return null.\n    if (!redirectStatus.includes(response.status)) {\n        return null;\n    }\n    // 2. Let location be the result of extracting header list values given\n    // `Location` and response’s header list.\n    let location = response.headersList.get(\"location\");\n    // 3. If location is a header value, then set location to the result of\n    //    parsing location with response’s URL.\n    if (location !== null && isValidHeaderValue(location)) {\n        location = new URL(location, responseURL(response));\n    }\n    // 4. If location is a URL whose fragment is null, then set location’s\n    // fragment to requestFragment.\n    if (location && !location.hash) {\n        location.hash = requestFragment;\n    }\n    // 5. Return location.\n    return location;\n}\n/** @returns {URL} */ function requestCurrentURL(request) {\n    return request.urlList[request.urlList.length - 1];\n}\nfunction requestBadPort(request) {\n    // 1. Let url be request’s current URL.\n    const url = requestCurrentURL(request);\n    // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,\n    // then return blocked.\n    if (urlIsHttpHttpsScheme(url) && badPorts.includes(url.port)) {\n        return \"blocked\";\n    }\n    // 3. Return allowed.\n    return \"allowed\";\n}\nfunction isErrorLike(object) {\n    return object instanceof Error || object?.constructor?.name === \"Error\" || object?.constructor?.name === \"DOMException\";\n}\n// Check whether |statusText| is a ByteString and\n// matches the Reason-Phrase token production.\n// RFC 2616: https://tools.ietf.org/html/rfc2616\n// RFC 7230: https://tools.ietf.org/html/rfc7230\n// \"reason-phrase = *( HTAB / SP / VCHAR / obs-text )\"\n// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116\nfunction isValidReasonPhrase(statusText) {\n    for(let i = 0; i < statusText.length; ++i){\n        const c = statusText.charCodeAt(i);\n        if (!(c === 0x09 || // HTAB\n        c >= 0x20 && c <= 0x7e || // SP / VCHAR\n        c >= 0x80 && c <= 0xff // obs-text\n        )) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isTokenChar(c) {\n    return !(c >= 0x7f || c <= 0x20 || c === \"(\" || c === \")\" || c === \"<\" || c === \">\" || c === \"@\" || c === \",\" || c === \";\" || c === \":\" || c === \"\\\\\" || c === '\"' || c === \"/\" || c === \"[\" || c === \"]\" || c === \"?\" || c === \"=\" || c === \"{\" || c === \"}\");\n}\n// See RFC 7230, Section 3.2.6.\n// https://github.com/chromium/chromium/blob/d7da0240cae77824d1eda25745c4022757499131/third_party/blink/renderer/platform/network/http_parsers.cc#L321\nfunction isValidHTTPToken(characters) {\n    if (!characters || typeof characters !== \"string\") {\n        return false;\n    }\n    for(let i = 0; i < characters.length; ++i){\n        const c = characters.charCodeAt(i);\n        if (c > 0x7f || !isTokenChar(c)) {\n            return false;\n        }\n    }\n    return true;\n}\n// https://fetch.spec.whatwg.org/#header-name\n// https://github.com/chromium/chromium/blob/b3d37e6f94f87d59e44662d6078f6a12de845d17/net/http/http_util.cc#L342\nfunction isValidHeaderName(potentialValue) {\n    if (potentialValue.length === 0) {\n        return false;\n    }\n    return isValidHTTPToken(potentialValue);\n}\n/**\n * @see https://fetch.spec.whatwg.org/#header-value\n * @param {string} potentialValue\n */ function isValidHeaderValue(potentialValue) {\n    // - Has no leading or trailing HTTP tab or space bytes.\n    // - Contains no 0x00 (NUL) or HTTP newline bytes.\n    if (potentialValue.startsWith(\"\t\") || potentialValue.startsWith(\" \") || potentialValue.endsWith(\"\t\") || potentialValue.endsWith(\" \")) {\n        return false;\n    }\n    if (potentialValue.includes(\"\\x00\") || potentialValue.includes(\"\\r\") || potentialValue.includes(\"\\n\")) {\n        return false;\n    }\n    return true;\n}\n// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect\nfunction setRequestReferrerPolicyOnRedirect(request, actualResponse) {\n    //  Given a request request and a response actualResponse, this algorithm\n    //  updates request’s referrer policy according to the Referrer-Policy\n    //  header (if any) in actualResponse.\n    // 1. Let policy be the result of executing § 8.1 Parse a referrer policy\n    // from a Referrer-Policy header on actualResponse.\n    // 8.1 Parse a referrer policy from a Referrer-Policy header\n    // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.\n    const { headersList } = actualResponse;\n    // 2. Let policy be the empty string.\n    // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.\n    // 4. Return policy.\n    const policyHeader = (headersList.get(\"referrer-policy\") ?? \"\").split(\",\");\n    // Note: As the referrer-policy can contain multiple policies\n    // separated by comma, we need to loop through all of them\n    // and pick the first valid one.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy\n    let policy = \"\";\n    if (policyHeader.length > 0) {\n        // The right-most policy takes precedence.\n        // The left-most policy is the fallback.\n        for(let i = policyHeader.length; i !== 0; i--){\n            const token = policyHeader[i - 1].trim();\n            if (referrerPolicyTokens.includes(token)) {\n                policy = token;\n                break;\n            }\n        }\n    }\n    // 2. If policy is not the empty string, then set request’s referrer policy to policy.\n    if (policy !== \"\") {\n        request.referrerPolicy = policy;\n    }\n}\n// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check\nfunction crossOriginResourcePolicyCheck() {\n    // TODO\n    return \"allowed\";\n}\n// https://fetch.spec.whatwg.org/#concept-cors-check\nfunction corsCheck() {\n    // TODO\n    return \"success\";\n}\n// https://fetch.spec.whatwg.org/#concept-tao-check\nfunction TAOCheck() {\n    // TODO\n    return \"success\";\n}\nfunction appendFetchMetadata(httpRequest) {\n    //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header\n    //  TODO\n    //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header\n    //  1. Assert: r’s url is a potentially trustworthy URL.\n    //  TODO\n    //  2. Let header be a Structured Header whose value is a token.\n    let header = null;\n    //  3. Set header’s value to r’s mode.\n    header = httpRequest.mode;\n    //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.\n    httpRequest.headersList.set(\"sec-fetch-mode\", header);\n//  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header\n//  TODO\n//  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header\n//  TODO\n}\n// https://fetch.spec.whatwg.org/#append-a-request-origin-header\nfunction appendRequestOriginHeader(request) {\n    // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.\n    let serializedOrigin = request.origin;\n    // 2. If request’s response tainting is \"cors\" or request’s mode is \"websocket\", then append (`Origin`, serializedOrigin) to request’s header list.\n    if (request.responseTainting === \"cors\" || request.mode === \"websocket\") {\n        if (serializedOrigin) {\n            request.headersList.append(\"origin\", serializedOrigin);\n        }\n    // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:\n    } else if (request.method !== \"GET\" && request.method !== \"HEAD\") {\n        // 1. Switch on request’s referrer policy:\n        switch(request.referrerPolicy){\n            case \"no-referrer\":\n                // Set serializedOrigin to `null`.\n                serializedOrigin = null;\n                break;\n            case \"no-referrer-when-downgrade\":\n            case \"strict-origin\":\n            case \"strict-origin-when-cross-origin\":\n                // If request’s origin is a tuple origin, its scheme is \"https\", and request’s current URL’s scheme is not \"https\", then set serializedOrigin to `null`.\n                if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {\n                    serializedOrigin = null;\n                }\n                break;\n            case \"same-origin\":\n                // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.\n                if (!sameOrigin(request, requestCurrentURL(request))) {\n                    serializedOrigin = null;\n                }\n                break;\n            default:\n        }\n        if (serializedOrigin) {\n            // 2. Append (`Origin`, serializedOrigin) to request’s header list.\n            request.headersList.append(\"origin\", serializedOrigin);\n        }\n    }\n}\nfunction coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {\n    // TODO\n    return performance.now();\n}\n// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info\nfunction createOpaqueTimingInfo(timingInfo) {\n    return {\n        startTime: timingInfo.startTime ?? 0,\n        redirectStartTime: 0,\n        redirectEndTime: 0,\n        postRedirectStartTime: timingInfo.startTime ?? 0,\n        finalServiceWorkerStartTime: 0,\n        finalNetworkResponseStartTime: 0,\n        finalNetworkRequestStartTime: 0,\n        endTime: 0,\n        encodedBodySize: 0,\n        decodedBodySize: 0,\n        finalConnectionTimingInfo: null\n    };\n}\n// https://html.spec.whatwg.org/multipage/origin.html#policy-container\nfunction makePolicyContainer() {\n    // Note: the fetch spec doesn't make use of embedder policy or CSP list\n    return {\n        referrerPolicy: \"strict-origin-when-cross-origin\"\n    };\n}\n// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container\nfunction clonePolicyContainer(policyContainer) {\n    return {\n        referrerPolicy: policyContainer.referrerPolicy\n    };\n}\n// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer\nfunction determineRequestsReferrer(request) {\n    // 1. Let policy be request's referrer policy.\n    const policy = request.referrerPolicy;\n    // Note: policy cannot (shouldn't) be null or an empty string.\n    assert(policy);\n    // 2. Let environment be request’s client.\n    let referrerSource = null;\n    // 3. Switch on request’s referrer:\n    if (request.referrer === \"client\") {\n        // Note: node isn't a browser and doesn't implement document/iframes,\n        // so we bypass this step and replace it with our own.\n        const globalOrigin = getGlobalOrigin();\n        if (!globalOrigin || globalOrigin.origin === \"null\") {\n            return \"no-referrer\";\n        }\n        // note: we need to clone it as it's mutated\n        referrerSource = new URL(globalOrigin);\n    } else if (request.referrer instanceof URL) {\n        // Let referrerSource be request’s referrer.\n        referrerSource = request.referrer;\n    }\n    // 4. Let request’s referrerURL be the result of stripping referrerSource for\n    //    use as a referrer.\n    let referrerURL = stripURLForReferrer(referrerSource);\n    // 5. Let referrerOrigin be the result of stripping referrerSource for use as\n    //    a referrer, with the origin-only flag set to true.\n    const referrerOrigin = stripURLForReferrer(referrerSource, true);\n    // 6. If the result of serializing referrerURL is a string whose length is\n    //    greater than 4096, set referrerURL to referrerOrigin.\n    if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n    }\n    const areSameOrigin = sameOrigin(request, referrerURL);\n    const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);\n    // 8. Execute the switch statements corresponding to the value of policy:\n    switch(policy){\n        case \"origin\":\n            return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);\n        case \"unsafe-url\":\n            return referrerURL;\n        case \"same-origin\":\n            return areSameOrigin ? referrerOrigin : \"no-referrer\";\n        case \"origin-when-cross-origin\":\n            return areSameOrigin ? referrerURL : referrerOrigin;\n        case \"strict-origin-when-cross-origin\":\n            {\n                const currentURL = requestCurrentURL(request);\n                // 1. If the origin of referrerURL and the origin of request’s current\n                //    URL are the same, then return referrerURL.\n                if (sameOrigin(referrerURL, currentURL)) {\n                    return referrerURL;\n                }\n                // 2. If referrerURL is a potentially trustworthy URL and request’s\n                //    current URL is not a potentially trustworthy URL, then return no\n                //    referrer.\n                if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {\n                    return \"no-referrer\";\n                }\n                // 3. Return referrerOrigin.\n                return referrerOrigin;\n            }\n        case \"strict-origin\":\n        /**\n         * 1. If referrerURL is a potentially trustworthy URL and\n         * request’s current URL is not a potentially trustworthy URL,\n         * then return no referrer.\n         * 2. Return referrerOrigin\n        */ case \"no-referrer-when-downgrade\":\n        /**\n       * 1. If referrerURL is a potentially trustworthy URL and\n       * request’s current URL is not a potentially trustworthy URL,\n       * then return no referrer.\n       * 2. Return referrerOrigin\n      */ default:\n            return isNonPotentiallyTrustWorthy ? \"no-referrer\" : referrerOrigin;\n    }\n}\n/**\n * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url\n * @param {URL} url\n * @param {boolean|undefined} originOnly\n */ function stripURLForReferrer(url, originOnly) {\n    // 1. Assert: url is a URL.\n    assert(url instanceof URL);\n    // 2. If url’s scheme is a local scheme, then return no referrer.\n    if (url.protocol === \"file:\" || url.protocol === \"about:\" || url.protocol === \"blank:\") {\n        return \"no-referrer\";\n    }\n    // 3. Set url’s username to the empty string.\n    url.username = \"\";\n    // 4. Set url’s password to the empty string.\n    url.password = \"\";\n    // 5. Set url’s fragment to null.\n    url.hash = \"\";\n    // 6. If the origin-only flag is true, then:\n    if (originOnly) {\n        // 1. Set url’s path to « the empty string ».\n        url.pathname = \"\";\n        // 2. Set url’s query to null.\n        url.search = \"\";\n    }\n    // 7. Return url.\n    return url;\n}\nfunction isURLPotentiallyTrustworthy(url) {\n    if (!(url instanceof URL)) {\n        return false;\n    }\n    // If child of about, return true\n    if (url.href === \"about:blank\" || url.href === \"about:srcdoc\") {\n        return true;\n    }\n    // If scheme is data, return true\n    if (url.protocol === \"data:\") return true;\n    // If file, return true\n    if (url.protocol === \"file:\") return true;\n    return isOriginPotentiallyTrustworthy(url.origin);\n    function isOriginPotentiallyTrustworthy(origin) {\n        // If origin is explicitly null, return false\n        if (origin == null || origin === \"null\") return false;\n        const originAsURL = new URL(origin);\n        // If secure, return true\n        if (originAsURL.protocol === \"https:\" || originAsURL.protocol === \"wss:\") {\n            return true;\n        }\n        // If localhost or variants, return true\n        if (/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(originAsURL.hostname) || originAsURL.hostname === \"localhost\" || originAsURL.hostname.includes(\"localhost.\") || originAsURL.hostname.endsWith(\".localhost\")) {\n            return true;\n        }\n        // If any other, return false\n        return false;\n    }\n}\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist\n * @param {Uint8Array} bytes\n * @param {string} metadataList\n */ function bytesMatch(bytes, metadataList) {\n    // If node is not built with OpenSSL support, we cannot check\n    // a request's integrity, so allow it by default (the spec will\n    // allow requests if an invalid hash is given, as precedence).\n    /* istanbul ignore if: only if node is built with --without-ssl */ if (crypto === undefined) {\n        return true;\n    }\n    // 1. Let parsedMetadata be the result of parsing metadataList.\n    const parsedMetadata = parseMetadata(metadataList);\n    // 2. If parsedMetadata is no metadata, return true.\n    if (parsedMetadata === \"no metadata\") {\n        return true;\n    }\n    // 3. If parsedMetadata is the empty set, return true.\n    if (parsedMetadata.length === 0) {\n        return true;\n    }\n    // 4. Let metadata be the result of getting the strongest\n    //    metadata from parsedMetadata.\n    const list = parsedMetadata.sort((c, d)=>d.algo.localeCompare(c.algo));\n    // get the strongest algorithm\n    const strongest = list[0].algo;\n    // get all entries that use the strongest algorithm; ignore weaker\n    const metadata = list.filter((item)=>item.algo === strongest);\n    // 5. For each item in metadata:\n    for (const item of metadata){\n        // 1. Let algorithm be the alg component of item.\n        const algorithm = item.algo;\n        // 2. Let expectedValue be the val component of item.\n        let expectedValue = item.hash;\n        // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e\n        // \"be liberal with padding\". This is annoying, and it's not even in the spec.\n        if (expectedValue.endsWith(\"==\")) {\n            expectedValue = expectedValue.slice(0, -2);\n        }\n        // 3. Let actualValue be the result of applying algorithm to bytes.\n        let actualValue = crypto.createHash(algorithm).update(bytes).digest(\"base64\");\n        if (actualValue.endsWith(\"==\")) {\n            actualValue = actualValue.slice(0, -2);\n        }\n        // 4. If actualValue is a case-sensitive match for expectedValue,\n        //    return true.\n        if (actualValue === expectedValue) {\n            return true;\n        }\n        let actualBase64URL = crypto.createHash(algorithm).update(bytes).digest(\"base64url\");\n        if (actualBase64URL.endsWith(\"==\")) {\n            actualBase64URL = actualBase64URL.slice(0, -2);\n        }\n        if (actualBase64URL === expectedValue) {\n            return true;\n        }\n    }\n    // 6. Return false.\n    return false;\n}\n// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options\n// https://www.w3.org/TR/CSP2/#source-list-syntax\n// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1\nconst parseHashWithOptions = /((?<algo>sha256|sha384|sha512)-(?<hash>[A-z0-9+/]{1}.*={0,2}))( +[\\x21-\\x7e]?)?/i;\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n * @param {string} metadata\n */ function parseMetadata(metadata) {\n    // 1. Let result be the empty set.\n    /** @type {{ algo: string, hash: string }[]} */ const result = [];\n    // 2. Let empty be equal to true.\n    let empty = true;\n    const supportedHashes = crypto.getHashes();\n    // 3. For each token returned by splitting metadata on spaces:\n    for (const token of metadata.split(\" \")){\n        // 1. Set empty to false.\n        empty = false;\n        // 2. Parse token as a hash-with-options.\n        const parsedToken = parseHashWithOptions.exec(token);\n        // 3. If token does not parse, continue to the next token.\n        if (parsedToken === null || parsedToken.groups === undefined) {\n            continue;\n        }\n        // 4. Let algorithm be the hash-algo component of token.\n        const algorithm = parsedToken.groups.algo;\n        // 5. If algorithm is a hash function recognized by the user\n        //    agent, add the parsed token to result.\n        if (supportedHashes.includes(algorithm.toLowerCase())) {\n            result.push(parsedToken.groups);\n        }\n    }\n    // 4. Return no metadata if empty is true, otherwise return result.\n    if (empty === true) {\n        return \"no metadata\";\n    }\n    return result;\n}\n// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request\nfunction tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {\n// TODO\n}\n/**\n * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}\n * @param {URL} A\n * @param {URL} B\n */ function sameOrigin(A, B) {\n    // 1. If A and B are the same opaque origin, then return true.\n    if (A.origin === B.origin && A.origin === \"null\") {\n        return true;\n    }\n    // 2. If A and B are both tuple origins and their schemes,\n    //    hosts, and port are identical, then return true.\n    if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {\n        return true;\n    }\n    // 3. Return false.\n    return false;\n}\nfunction createDeferredPromise() {\n    let res;\n    let rej;\n    const promise = new Promise((resolve, reject)=>{\n        res = resolve;\n        rej = reject;\n    });\n    return {\n        promise,\n        resolve: res,\n        reject: rej\n    };\n}\nfunction isAborted(fetchParams) {\n    return fetchParams.controller.state === \"aborted\";\n}\nfunction isCancelled(fetchParams) {\n    return fetchParams.controller.state === \"aborted\" || fetchParams.controller.state === \"terminated\";\n}\n// https://fetch.spec.whatwg.org/#concept-method-normalize\nfunction normalizeMethod(method) {\n    return /^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$/i.test(method) ? method.toUpperCase() : method;\n}\n// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string\nfunction serializeJavascriptValueToJSONString(value) {\n    // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).\n    const result = JSON.stringify(value);\n    // 2. If result is undefined, then throw a TypeError.\n    if (result === undefined) {\n        throw new TypeError(\"Value is not JSON serializable\");\n    }\n    // 3. Assert: result is a string.\n    assert(typeof result === \"string\");\n    // 4. Return result.\n    return result;\n}\n// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object\nconst esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));\n/**\n * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n * @param {() => unknown[]} iterator\n * @param {string} name name of the instance\n * @param {'key'|'value'|'key+value'} kind\n */ function makeIterator(iterator, name, kind) {\n    const object = {\n        index: 0,\n        kind,\n        target: iterator\n    };\n    const i = {\n        next () {\n            // 1. Let interface be the interface for which the iterator prototype object exists.\n            // 2. Let thisValue be the this value.\n            // 3. Let object be ? ToObject(thisValue).\n            // 4. If object is a platform object, then perform a security\n            //    check, passing:\n            // 5. If object is not a default iterator object for interface,\n            //    then throw a TypeError.\n            if (Object.getPrototypeOf(this) !== i) {\n                throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);\n            }\n            // 6. Let index be object’s index.\n            // 7. Let kind be object’s kind.\n            // 8. Let values be object’s target's value pairs to iterate over.\n            const { index, kind, target } = object;\n            const values = target();\n            // 9. Let len be the length of values.\n            const len = values.length;\n            // 10. If index is greater than or equal to len, then return\n            //     CreateIterResultObject(undefined, true).\n            if (index >= len) {\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n            // 11. Let pair be the entry in values at index index.\n            const pair = values[index];\n            // 12. Set object’s index to index + 1.\n            object.index = index + 1;\n            // 13. Return the iterator result for pair and kind.\n            return iteratorResult(pair, kind);\n        },\n        // The class string of an iterator prototype object for a given interface is the\n        // result of concatenating the identifier of the interface and the string \" Iterator\".\n        [Symbol.toStringTag]: `${name} Iterator`\n    };\n    // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.\n    Object.setPrototypeOf(i, esIteratorPrototype);\n    // esIteratorPrototype needs to be the prototype of i\n    // which is the prototype of an empty object. Yes, it's confusing.\n    return Object.setPrototypeOf({}, i);\n}\n// https://webidl.spec.whatwg.org/#iterator-result\nfunction iteratorResult(pair, kind) {\n    let result;\n    // 1. Let result be a value determined by the value of kind:\n    switch(kind){\n        case \"key\":\n            {\n                // 1. Let idlKey be pair’s key.\n                // 2. Let key be the result of converting idlKey to an\n                //    ECMAScript value.\n                // 3. result is key.\n                result = pair[0];\n                break;\n            }\n        case \"value\":\n            {\n                // 1. Let idlValue be pair’s value.\n                // 2. Let value be the result of converting idlValue to\n                //    an ECMAScript value.\n                // 3. result is value.\n                result = pair[1];\n                break;\n            }\n        case \"key+value\":\n            {\n                // 1. Let idlKey be pair’s key.\n                // 2. Let idlValue be pair’s value.\n                // 3. Let key be the result of converting idlKey to an\n                //    ECMAScript value.\n                // 4. Let value be the result of converting idlValue to\n                //    an ECMAScript value.\n                // 5. Let array be ! ArrayCreate(2).\n                // 6. Call ! CreateDataProperty(array, \"0\", key).\n                // 7. Call ! CreateDataProperty(array, \"1\", value).\n                // 8. result is array.\n                result = pair;\n                break;\n            }\n    }\n    // 2. Return CreateIterResultObject(result, false).\n    return {\n        value: result,\n        done: false\n    };\n}\n/**\n * @see https://fetch.spec.whatwg.org/#body-fully-read\n */ async function fullyReadBody(body, processBody, processBodyError) {\n    // 1. If taskDestination is null, then set taskDestination to\n    //    the result of starting a new parallel queue.\n    // 2. Let successSteps given a byte sequence bytes be to queue a\n    //    fetch task to run processBody given bytes, with taskDestination.\n    const successSteps = processBody;\n    // 3. Let errorSteps be to queue a fetch task to run processBodyError,\n    //    with taskDestination.\n    const errorSteps = processBodyError;\n    // 4. Let reader be the result of getting a reader for body’s stream.\n    //    If that threw an exception, then run errorSteps with that\n    //    exception and return.\n    let reader;\n    try {\n        reader = body.stream.getReader();\n    } catch (e) {\n        errorSteps(e);\n        return;\n    }\n    // 5. Read all bytes from reader, given successSteps and errorSteps.\n    try {\n        const result = await readAllBytes(reader);\n        successSteps(result);\n    } catch (e) {\n        errorSteps(e);\n    }\n}\n/** @type {ReadableStream} */ let ReadableStream = globalThis.ReadableStream;\nfunction isReadableStreamLike(stream) {\n    if (!ReadableStream) {\n        ReadableStream = (__webpack_require__(/*! stream/web */ \"stream/web\").ReadableStream);\n    }\n    return stream instanceof ReadableStream || stream[Symbol.toStringTag] === \"ReadableStream\" && typeof stream.tee === \"function\";\n}\nconst MAXIMUM_ARGUMENT_LENGTH = 65535;\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-decode\n * @param {number[]|Uint8Array} input\n */ function isomorphicDecode(input) {\n    // 1. To isomorphic decode a byte sequence input, return a string whose code point\n    //    length is equal to input’s length and whose code points have the same values\n    //    as the values of input’s bytes, in the same order.\n    if (input.length < MAXIMUM_ARGUMENT_LENGTH) {\n        return String.fromCharCode(...input);\n    }\n    return input.reduce((previous, current)=>previous + String.fromCharCode(current), \"\");\n}\n/**\n * @param {ReadableStreamController<Uint8Array>} controller\n */ function readableStreamClose(controller) {\n    try {\n        controller.close();\n    } catch (err) {\n        // TODO: add comment explaining why this error occurs.\n        if (!err.message.includes(\"Controller is already closed\")) {\n            throw err;\n        }\n    }\n}\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-encode\n * @param {string} input\n */ function isomorphicEncode(input) {\n    // 1. Assert: input contains no code points greater than U+00FF.\n    for(let i = 0; i < input.length; i++){\n        assert(input.charCodeAt(i) <= 0xFF);\n    }\n    // 2. Return a byte sequence whose length is equal to input’s code\n    //    point length and whose bytes have the same values as the\n    //    values of input’s code points, in the same order\n    return input;\n}\n/**\n * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes\n * @see https://streams.spec.whatwg.org/#read-loop\n * @param {ReadableStreamDefaultReader} reader\n */ async function readAllBytes(reader) {\n    const bytes = [];\n    let byteLength = 0;\n    while(true){\n        const { done, value: chunk } = await reader.read();\n        if (done) {\n            // 1. Call successSteps with bytes.\n            return Buffer.concat(bytes, byteLength);\n        }\n        // 1. If chunk is not a Uint8Array object, call failureSteps\n        //    with a TypeError and abort these steps.\n        if (!isUint8Array(chunk)) {\n            throw new TypeError(\"Received non-Uint8Array chunk\");\n        }\n        // 2. Append the bytes represented by chunk to bytes.\n        bytes.push(chunk);\n        byteLength += chunk.length;\n    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.\n    }\n}\n/**\n * @see https://fetch.spec.whatwg.org/#is-local\n * @param {URL} url\n */ function urlIsLocal(url) {\n    assert(\"protocol\" in url) // ensure it's a url object\n    ;\n    const protocol = url.protocol;\n    return protocol === \"about:\" || protocol === \"blob:\" || protocol === \"data:\";\n}\n/**\n * @param {string|URL} url\n */ function urlHasHttpsScheme(url) {\n    if (typeof url === \"string\") {\n        return url.startsWith(\"https:\");\n    }\n    return url.protocol === \"https:\";\n}\n/**\n * @see https://fetch.spec.whatwg.org/#http-scheme\n * @param {URL} url\n */ function urlIsHttpHttpsScheme(url) {\n    assert(\"protocol\" in url) // ensure it's a url object\n    ;\n    const protocol = url.protocol;\n    return protocol === \"http:\" || protocol === \"https:\";\n}\n/**\n * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.\n */ const hasOwn = Object.hasOwn || ((dict, key)=>Object.prototype.hasOwnProperty.call(dict, key));\nmodule.exports = {\n    isAborted,\n    isCancelled,\n    createDeferredPromise,\n    ReadableStreamFrom,\n    toUSVString,\n    tryUpgradeRequestToAPotentiallyTrustworthyURL,\n    coarsenedSharedCurrentTime,\n    determineRequestsReferrer,\n    makePolicyContainer,\n    clonePolicyContainer,\n    appendFetchMetadata,\n    appendRequestOriginHeader,\n    TAOCheck,\n    corsCheck,\n    crossOriginResourcePolicyCheck,\n    createOpaqueTimingInfo,\n    setRequestReferrerPolicyOnRedirect,\n    isValidHTTPToken,\n    requestBadPort,\n    requestCurrentURL,\n    responseURL,\n    responseLocationURL,\n    isBlobLike,\n    isURLPotentiallyTrustworthy,\n    isValidReasonPhrase,\n    sameOrigin,\n    normalizeMethod,\n    serializeJavascriptValueToJSONString,\n    makeIterator,\n    isValidHeaderName,\n    isValidHeaderValue,\n    hasOwn,\n    isErrorLike,\n    fullyReadBody,\n    bytesMatch,\n    isReadableStreamLike,\n    readableStreamClose,\n    isomorphicEncode,\n    isomorphicDecode,\n    urlIsLocal,\n    urlHasHttpsScheme,\n    urlIsHttpHttpsScheme,\n    readAllBytes\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fetch/webidl.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/fetch/webidl.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { types } = __webpack_require__(/*! util */ \"util\");\nconst { hasOwn, toUSVString } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fetch/util.js\");\n/** @type {import('../../types/webidl').Webidl} */ const webidl = {};\nwebidl.converters = {};\nwebidl.util = {};\nwebidl.errors = {};\nwebidl.errors.exception = function(message) {\n    return new TypeError(`${message.header}: ${message.message}`);\n};\nwebidl.errors.conversionFailed = function(context) {\n    const plural = context.types.length === 1 ? \"\" : \" one of\";\n    const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(\", \")}.`;\n    return webidl.errors.exception({\n        header: context.prefix,\n        message\n    });\n};\nwebidl.errors.invalidArgument = function(context) {\n    return webidl.errors.exception({\n        header: context.prefix,\n        message: `\"${context.value}\" is an invalid ${context.type}.`\n    });\n};\n// https://webidl.spec.whatwg.org/#implements\nwebidl.brandCheck = function(V, I, opts = undefined) {\n    if (opts?.strict !== false && !(V instanceof I)) {\n        throw new TypeError(\"Illegal invocation\");\n    } else {\n        return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];\n    }\n};\nwebidl.argumentLengthCheck = function({ length }, min, ctx) {\n    if (length < min) {\n        throw webidl.errors.exception({\n            message: `${min} argument${min !== 1 ? \"s\" : \"\"} required, ` + `but${length ? \" only\" : \"\"} ${length} found.`,\n            ...ctx\n        });\n    }\n};\nwebidl.illegalConstructor = function() {\n    throw webidl.errors.exception({\n        header: \"TypeError\",\n        message: \"Illegal constructor\"\n    });\n};\n// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\nwebidl.util.Type = function(V) {\n    switch(typeof V){\n        case \"undefined\":\n            return \"Undefined\";\n        case \"boolean\":\n            return \"Boolean\";\n        case \"string\":\n            return \"String\";\n        case \"symbol\":\n            return \"Symbol\";\n        case \"number\":\n            return \"Number\";\n        case \"bigint\":\n            return \"BigInt\";\n        case \"function\":\n        case \"object\":\n            {\n                if (V === null) {\n                    return \"Null\";\n                }\n                return \"Object\";\n            }\n    }\n};\n// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\nwebidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {\n    let upperBound;\n    let lowerBound;\n    // 1. If bitLength is 64, then:\n    if (bitLength === 64) {\n        // 1. Let upperBound be 2^53 − 1.\n        upperBound = Math.pow(2, 53) - 1;\n        // 2. If signedness is \"unsigned\", then let lowerBound be 0.\n        if (signedness === \"unsigned\") {\n            lowerBound = 0;\n        } else {\n            // 3. Otherwise let lowerBound be −2^53 + 1.\n            lowerBound = Math.pow(-2, 53) + 1;\n        }\n    } else if (signedness === \"unsigned\") {\n        // 2. Otherwise, if signedness is \"unsigned\", then:\n        // 1. Let lowerBound be 0.\n        lowerBound = 0;\n        // 2. Let upperBound be 2^bitLength − 1.\n        upperBound = Math.pow(2, bitLength) - 1;\n    } else {\n        // 3. Otherwise:\n        // 1. Let lowerBound be -2^bitLength − 1.\n        lowerBound = Math.pow(-2, bitLength) - 1;\n        // 2. Let upperBound be 2^bitLength − 1 − 1.\n        upperBound = Math.pow(2, bitLength - 1) - 1;\n    }\n    // 4. Let x be ? ToNumber(V).\n    let x = Number(V);\n    // 5. If x is −0, then set x to +0.\n    if (x === 0) {\n        x = 0;\n    }\n    // 6. If the conversion is to an IDL type associated\n    //    with the [EnforceRange] extended attribute, then:\n    if (opts.enforceRange === true) {\n        // 1. If x is NaN, +∞, or −∞, then throw a TypeError.\n        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\n            throw webidl.errors.exception({\n                header: \"Integer conversion\",\n                message: `Could not convert ${V} to an integer.`\n            });\n        }\n        // 2. Set x to IntegerPart(x).\n        x = webidl.util.IntegerPart(x);\n        // 3. If x < lowerBound or x > upperBound, then\n        //    throw a TypeError.\n        if (x < lowerBound || x > upperBound) {\n            throw webidl.errors.exception({\n                header: \"Integer conversion\",\n                message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`\n            });\n        }\n        // 4. Return x.\n        return x;\n    }\n    // 7. If x is not NaN and the conversion is to an IDL\n    //    type associated with the [Clamp] extended\n    //    attribute, then:\n    if (!Number.isNaN(x) && opts.clamp === true) {\n        // 1. Set x to min(max(x, lowerBound), upperBound).\n        x = Math.min(Math.max(x, lowerBound), upperBound);\n        // 2. Round x to the nearest integer, choosing the\n        //    even integer if it lies halfway between two,\n        //    and choosing +0 rather than −0.\n        if (Math.floor(x) % 2 === 0) {\n            x = Math.floor(x);\n        } else {\n            x = Math.ceil(x);\n        }\n        // 3. Return x.\n        return x;\n    }\n    // 8. If x is NaN, +0, +∞, or −∞, then return +0.\n    if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\n        return 0;\n    }\n    // 9. Set x to IntegerPart(x).\n    x = webidl.util.IntegerPart(x);\n    // 10. Set x to x modulo 2^bitLength.\n    x = x % Math.pow(2, bitLength);\n    // 11. If signedness is \"signed\" and x ≥ 2^bitLength − 1,\n    //    then return x − 2^bitLength.\n    if (signedness === \"signed\" && x >= Math.pow(2, bitLength) - 1) {\n        return x - Math.pow(2, bitLength);\n    }\n    // 12. Otherwise, return x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart\nwebidl.util.IntegerPart = function(n) {\n    // 1. Let r be floor(abs(n)).\n    const r = Math.floor(Math.abs(n));\n    // 2. If n < 0, then return -1 × r.\n    if (n < 0) {\n        return -1 * r;\n    }\n    // 3. Otherwise, return r.\n    return r;\n};\n// https://webidl.spec.whatwg.org/#es-sequence\nwebidl.sequenceConverter = function(converter) {\n    return (V)=>{\n        // 1. If Type(V) is not Object, throw a TypeError.\n        if (webidl.util.Type(V) !== \"Object\") {\n            throw webidl.errors.exception({\n                header: \"Sequence\",\n                message: `Value of type ${webidl.util.Type(V)} is not an Object.`\n            });\n        }\n        // 2. Let method be ? GetMethod(V, @@iterator).\n        /** @type {Generator} */ const method = V?.[Symbol.iterator]?.();\n        const seq = [];\n        // 3. If method is undefined, throw a TypeError.\n        if (method === undefined || typeof method.next !== \"function\") {\n            throw webidl.errors.exception({\n                header: \"Sequence\",\n                message: \"Object is not an iterator.\"\n            });\n        }\n        // https://webidl.spec.whatwg.org/#create-sequence-from-iterable\n        while(true){\n            const { done, value } = method.next();\n            if (done) {\n                break;\n            }\n            seq.push(converter(value));\n        }\n        return seq;\n    };\n};\n// https://webidl.spec.whatwg.org/#es-to-record\nwebidl.recordConverter = function(keyConverter, valueConverter) {\n    return (O)=>{\n        // 1. If Type(O) is not Object, throw a TypeError.\n        if (webidl.util.Type(O) !== \"Object\") {\n            throw webidl.errors.exception({\n                header: \"Record\",\n                message: `Value of type ${webidl.util.Type(O)} is not an Object.`\n            });\n        }\n        // 2. Let result be a new empty instance of record<K, V>.\n        const result = {};\n        if (!types.isProxy(O)) {\n            // Object.keys only returns enumerable properties\n            const keys = Object.keys(O);\n            for (const key of keys){\n                // 1. Let typedKey be key converted to an IDL value of type K.\n                const typedKey = keyConverter(key);\n                // 2. Let value be ? Get(O, key).\n                // 3. Let typedValue be value converted to an IDL value of type V.\n                const typedValue = valueConverter(O[key]);\n                // 4. Set result[typedKey] to typedValue.\n                result[typedKey] = typedValue;\n            }\n            // 5. Return result.\n            return result;\n        }\n        // 3. Let keys be ? O.[[OwnPropertyKeys]]().\n        const keys = Reflect.ownKeys(O);\n        // 4. For each key of keys.\n        for (const key of keys){\n            // 1. Let desc be ? O.[[GetOwnProperty]](key).\n            const desc = Reflect.getOwnPropertyDescriptor(O, key);\n            // 2. If desc is not undefined and desc.[[Enumerable]] is true:\n            if (desc?.enumerable) {\n                // 1. Let typedKey be key converted to an IDL value of type K.\n                const typedKey = keyConverter(key);\n                // 2. Let value be ? Get(O, key).\n                // 3. Let typedValue be value converted to an IDL value of type V.\n                const typedValue = valueConverter(O[key]);\n                // 4. Set result[typedKey] to typedValue.\n                result[typedKey] = typedValue;\n            }\n        }\n        // 5. Return result.\n        return result;\n    };\n};\nwebidl.interfaceConverter = function(i) {\n    return (V, opts = {})=>{\n        if (opts.strict !== false && !(V instanceof i)) {\n            throw webidl.errors.exception({\n                header: i.name,\n                message: `Expected ${V} to be an instance of ${i.name}.`\n            });\n        }\n        return V;\n    };\n};\nwebidl.dictionaryConverter = function(converters) {\n    return (dictionary)=>{\n        const type = webidl.util.Type(dictionary);\n        const dict = {};\n        if (type === \"Null\" || type === \"Undefined\") {\n            return dict;\n        } else if (type !== \"Object\") {\n            throw webidl.errors.exception({\n                header: \"Dictionary\",\n                message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`\n            });\n        }\n        for (const options of converters){\n            const { key, defaultValue, required, converter } = options;\n            if (required === true) {\n                if (!hasOwn(dictionary, key)) {\n                    throw webidl.errors.exception({\n                        header: \"Dictionary\",\n                        message: `Missing required key \"${key}\".`\n                    });\n                }\n            }\n            let value = dictionary[key];\n            const hasDefault = hasOwn(options, \"defaultValue\");\n            // Only use defaultValue if value is undefined and\n            // a defaultValue options was provided.\n            if (hasDefault && value !== null) {\n                value = value ?? defaultValue;\n            }\n            // A key can be optional and have no default value.\n            // When this happens, do not perform a conversion,\n            // and do not assign the key a value.\n            if (required || hasDefault || value !== undefined) {\n                value = converter(value);\n                if (options.allowedValues && !options.allowedValues.includes(value)) {\n                    throw webidl.errors.exception({\n                        header: \"Dictionary\",\n                        message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(\", \")}.`\n                    });\n                }\n                dict[key] = value;\n            }\n        }\n        return dict;\n    };\n};\nwebidl.nullableConverter = function(converter) {\n    return (V)=>{\n        if (V === null) {\n            return V;\n        }\n        return converter(V);\n    };\n};\n// https://webidl.spec.whatwg.org/#es-DOMString\nwebidl.converters.DOMString = function(V, opts = {}) {\n    // 1. If V is null and the conversion is to an IDL type\n    //    associated with the [LegacyNullToEmptyString]\n    //    extended attribute, then return the DOMString value\n    //    that represents the empty string.\n    if (V === null && opts.legacyNullToEmptyString) {\n        return \"\";\n    }\n    // 2. Let x be ? ToString(V).\n    if (typeof V === \"symbol\") {\n        throw new TypeError(\"Could not convert argument of type symbol to string.\");\n    }\n    // 3. Return the IDL DOMString value that represents the\n    //    same sequence of code units as the one the\n    //    ECMAScript String value x represents.\n    return String(V);\n};\n// https://webidl.spec.whatwg.org/#es-ByteString\nwebidl.converters.ByteString = function(V) {\n    // 1. Let x be ? ToString(V).\n    // Note: DOMString converter perform ? ToString(V)\n    const x = webidl.converters.DOMString(V);\n    // 2. If the value of any element of x is greater than\n    //    255, then throw a TypeError.\n    for(let index = 0; index < x.length; index++){\n        const charCode = x.charCodeAt(index);\n        if (charCode > 255) {\n            throw new TypeError(\"Cannot convert argument to a ByteString because the character at \" + `index ${index} has a value of ${charCode} which is greater than 255.`);\n        }\n    }\n    // 3. Return an IDL ByteString value whose length is the\n    //    length of x, and where the value of each element is\n    //    the value of the corresponding element of x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-USVString\nwebidl.converters.USVString = toUSVString;\n// https://webidl.spec.whatwg.org/#es-boolean\nwebidl.converters.boolean = function(V) {\n    // 1. Let x be the result of computing ToBoolean(V).\n    const x = Boolean(V);\n    // 2. Return the IDL boolean value that is the one that represents\n    //    the same truth value as the ECMAScript Boolean value x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-any\nwebidl.converters.any = function(V) {\n    return V;\n};\n// https://webidl.spec.whatwg.org/#es-long-long\nwebidl.converters[\"long long\"] = function(V) {\n    // 1. Let x be ? ConvertToInt(V, 64, \"signed\").\n    const x = webidl.util.ConvertToInt(V, 64, \"signed\");\n    // 2. Return the IDL long long value that represents\n    //    the same numeric value as x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-unsigned-long-long\nwebidl.converters[\"unsigned long long\"] = function(V) {\n    // 1. Let x be ? ConvertToInt(V, 64, \"unsigned\").\n    const x = webidl.util.ConvertToInt(V, 64, \"unsigned\");\n    // 2. Return the IDL unsigned long long value that\n    //    represents the same numeric value as x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-unsigned-long\nwebidl.converters[\"unsigned long\"] = function(V) {\n    // 1. Let x be ? ConvertToInt(V, 32, \"unsigned\").\n    const x = webidl.util.ConvertToInt(V, 32, \"unsigned\");\n    // 2. Return the IDL unsigned long value that\n    //    represents the same numeric value as x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#es-unsigned-short\nwebidl.converters[\"unsigned short\"] = function(V, opts) {\n    // 1. Let x be ? ConvertToInt(V, 16, \"unsigned\").\n    const x = webidl.util.ConvertToInt(V, 16, \"unsigned\", opts);\n    // 2. Return the IDL unsigned short value that represents\n    //    the same numeric value as x.\n    return x;\n};\n// https://webidl.spec.whatwg.org/#idl-ArrayBuffer\nwebidl.converters.ArrayBuffer = function(V, opts = {}) {\n    // 1. If Type(V) is not Object, or V does not have an\n    //    [[ArrayBufferData]] internal slot, then throw a\n    //    TypeError.\n    // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances\n    // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances\n    if (webidl.util.Type(V) !== \"Object\" || !types.isAnyArrayBuffer(V)) {\n        throw webidl.errors.conversionFailed({\n            prefix: `${V}`,\n            argument: `${V}`,\n            types: [\n                \"ArrayBuffer\"\n            ]\n        });\n    }\n    // 2. If the conversion is not to an IDL type associated\n    //    with the [AllowShared] extended attribute, and\n    //    IsSharedArrayBuffer(V) is true, then throw a\n    //    TypeError.\n    if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {\n        throw webidl.errors.exception({\n            header: \"ArrayBuffer\",\n            message: \"SharedArrayBuffer is not allowed.\"\n        });\n    }\n    // 3. If the conversion is not to an IDL type associated\n    //    with the [AllowResizable] extended attribute, and\n    //    IsResizableArrayBuffer(V) is true, then throw a\n    //    TypeError.\n    // Note: resizable ArrayBuffers are currently a proposal.\n    // 4. Return the IDL ArrayBuffer value that is a\n    //    reference to the same object as V.\n    return V;\n};\nwebidl.converters.TypedArray = function(V, T, opts = {}) {\n    // 1. Let T be the IDL type V is being converted to.\n    // 2. If Type(V) is not Object, or V does not have a\n    //    [[TypedArrayName]] internal slot with a value\n    //    equal to T’s name, then throw a TypeError.\n    if (webidl.util.Type(V) !== \"Object\" || !types.isTypedArray(V) || V.constructor.name !== T.name) {\n        throw webidl.errors.conversionFailed({\n            prefix: `${T.name}`,\n            argument: `${V}`,\n            types: [\n                T.name\n            ]\n        });\n    }\n    // 3. If the conversion is not to an IDL type associated\n    //    with the [AllowShared] extended attribute, and\n    //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is\n    //    true, then throw a TypeError.\n    if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n        throw webidl.errors.exception({\n            header: \"ArrayBuffer\",\n            message: \"SharedArrayBuffer is not allowed.\"\n        });\n    }\n    // 4. If the conversion is not to an IDL type associated\n    //    with the [AllowResizable] extended attribute, and\n    //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n    //    true, then throw a TypeError.\n    // Note: resizable array buffers are currently a proposal\n    // 5. Return the IDL value of type T that is a reference\n    //    to the same object as V.\n    return V;\n};\nwebidl.converters.DataView = function(V, opts = {}) {\n    // 1. If Type(V) is not Object, or V does not have a\n    //    [[DataView]] internal slot, then throw a TypeError.\n    if (webidl.util.Type(V) !== \"Object\" || !types.isDataView(V)) {\n        throw webidl.errors.exception({\n            header: \"DataView\",\n            message: \"Object is not a DataView.\"\n        });\n    }\n    // 2. If the conversion is not to an IDL type associated\n    //    with the [AllowShared] extended attribute, and\n    //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,\n    //    then throw a TypeError.\n    if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n        throw webidl.errors.exception({\n            header: \"ArrayBuffer\",\n            message: \"SharedArrayBuffer is not allowed.\"\n        });\n    }\n    // 3. If the conversion is not to an IDL type associated\n    //    with the [AllowResizable] extended attribute, and\n    //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n    //    true, then throw a TypeError.\n    // Note: resizable ArrayBuffers are currently a proposal\n    // 4. Return the IDL DataView value that is a reference\n    //    to the same object as V.\n    return V;\n};\n// https://webidl.spec.whatwg.org/#BufferSource\nwebidl.converters.BufferSource = function(V, opts = {}) {\n    if (types.isAnyArrayBuffer(V)) {\n        return webidl.converters.ArrayBuffer(V, opts);\n    }\n    if (types.isTypedArray(V)) {\n        return webidl.converters.TypedArray(V, V.constructor);\n    }\n    if (types.isDataView(V)) {\n        return webidl.converters.DataView(V, opts);\n    }\n    throw new TypeError(`Could not convert ${V} to a BufferSource.`);\n};\nwebidl.converters[\"sequence<ByteString>\"] = webidl.sequenceConverter(webidl.converters.ByteString);\nwebidl.converters[\"sequence<sequence<ByteString>>\"] = webidl.sequenceConverter(webidl.converters[\"sequence<ByteString>\"]);\nwebidl.converters[\"record<ByteString, ByteString>\"] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString);\nmodule.exports = {\n    webidl\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fetch/webidl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fileapi/encoding.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/fileapi/encoding.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * @see https://encoding.spec.whatwg.org/#concept-encoding-get\n * @param {string|undefined} label\n */ function getEncoding(label) {\n    if (!label) {\n        return \"failure\";\n    }\n    // 1. Remove any leading and trailing ASCII whitespace from label.\n    // 2. If label is an ASCII case-insensitive match for any of the\n    //    labels listed in the table below, then return the\n    //    corresponding encoding; otherwise return failure.\n    switch(label.trim().toLowerCase()){\n        case \"unicode-1-1-utf-8\":\n        case \"unicode11utf8\":\n        case \"unicode20utf8\":\n        case \"utf-8\":\n        case \"utf8\":\n        case \"x-unicode20utf8\":\n            return \"UTF-8\";\n        case \"866\":\n        case \"cp866\":\n        case \"csibm866\":\n        case \"ibm866\":\n            return \"IBM866\";\n        case \"csisolatin2\":\n        case \"iso-8859-2\":\n        case \"iso-ir-101\":\n        case \"iso8859-2\":\n        case \"iso88592\":\n        case \"iso_8859-2\":\n        case \"iso_8859-2:1987\":\n        case \"l2\":\n        case \"latin2\":\n            return \"ISO-8859-2\";\n        case \"csisolatin3\":\n        case \"iso-8859-3\":\n        case \"iso-ir-109\":\n        case \"iso8859-3\":\n        case \"iso88593\":\n        case \"iso_8859-3\":\n        case \"iso_8859-3:1988\":\n        case \"l3\":\n        case \"latin3\":\n            return \"ISO-8859-3\";\n        case \"csisolatin4\":\n        case \"iso-8859-4\":\n        case \"iso-ir-110\":\n        case \"iso8859-4\":\n        case \"iso88594\":\n        case \"iso_8859-4\":\n        case \"iso_8859-4:1988\":\n        case \"l4\":\n        case \"latin4\":\n            return \"ISO-8859-4\";\n        case \"csisolatincyrillic\":\n        case \"cyrillic\":\n        case \"iso-8859-5\":\n        case \"iso-ir-144\":\n        case \"iso8859-5\":\n        case \"iso88595\":\n        case \"iso_8859-5\":\n        case \"iso_8859-5:1988\":\n            return \"ISO-8859-5\";\n        case \"arabic\":\n        case \"asmo-708\":\n        case \"csiso88596e\":\n        case \"csiso88596i\":\n        case \"csisolatinarabic\":\n        case \"ecma-114\":\n        case \"iso-8859-6\":\n        case \"iso-8859-6-e\":\n        case \"iso-8859-6-i\":\n        case \"iso-ir-127\":\n        case \"iso8859-6\":\n        case \"iso88596\":\n        case \"iso_8859-6\":\n        case \"iso_8859-6:1987\":\n            return \"ISO-8859-6\";\n        case \"csisolatingreek\":\n        case \"ecma-118\":\n        case \"elot_928\":\n        case \"greek\":\n        case \"greek8\":\n        case \"iso-8859-7\":\n        case \"iso-ir-126\":\n        case \"iso8859-7\":\n        case \"iso88597\":\n        case \"iso_8859-7\":\n        case \"iso_8859-7:1987\":\n        case \"sun_eu_greek\":\n            return \"ISO-8859-7\";\n        case \"csiso88598e\":\n        case \"csisolatinhebrew\":\n        case \"hebrew\":\n        case \"iso-8859-8\":\n        case \"iso-8859-8-e\":\n        case \"iso-ir-138\":\n        case \"iso8859-8\":\n        case \"iso88598\":\n        case \"iso_8859-8\":\n        case \"iso_8859-8:1988\":\n        case \"visual\":\n            return \"ISO-8859-8\";\n        case \"csiso88598i\":\n        case \"iso-8859-8-i\":\n        case \"logical\":\n            return \"ISO-8859-8-I\";\n        case \"csisolatin6\":\n        case \"iso-8859-10\":\n        case \"iso-ir-157\":\n        case \"iso8859-10\":\n        case \"iso885910\":\n        case \"l6\":\n        case \"latin6\":\n            return \"ISO-8859-10\";\n        case \"iso-8859-13\":\n        case \"iso8859-13\":\n        case \"iso885913\":\n            return \"ISO-8859-13\";\n        case \"iso-8859-14\":\n        case \"iso8859-14\":\n        case \"iso885914\":\n            return \"ISO-8859-14\";\n        case \"csisolatin9\":\n        case \"iso-8859-15\":\n        case \"iso8859-15\":\n        case \"iso885915\":\n        case \"iso_8859-15\":\n        case \"l9\":\n            return \"ISO-8859-15\";\n        case \"iso-8859-16\":\n            return \"ISO-8859-16\";\n        case \"cskoi8r\":\n        case \"koi\":\n        case \"koi8\":\n        case \"koi8-r\":\n        case \"koi8_r\":\n            return \"KOI8-R\";\n        case \"koi8-ru\":\n        case \"koi8-u\":\n            return \"KOI8-U\";\n        case \"csmacintosh\":\n        case \"mac\":\n        case \"macintosh\":\n        case \"x-mac-roman\":\n            return \"macintosh\";\n        case \"iso-8859-11\":\n        case \"iso8859-11\":\n        case \"iso885911\":\n        case \"tis-620\":\n        case \"windows-874\":\n            return \"windows-874\";\n        case \"cp1250\":\n        case \"windows-1250\":\n        case \"x-cp1250\":\n            return \"windows-1250\";\n        case \"cp1251\":\n        case \"windows-1251\":\n        case \"x-cp1251\":\n            return \"windows-1251\";\n        case \"ansi_x3.4-1968\":\n        case \"ascii\":\n        case \"cp1252\":\n        case \"cp819\":\n        case \"csisolatin1\":\n        case \"ibm819\":\n        case \"iso-8859-1\":\n        case \"iso-ir-100\":\n        case \"iso8859-1\":\n        case \"iso88591\":\n        case \"iso_8859-1\":\n        case \"iso_8859-1:1987\":\n        case \"l1\":\n        case \"latin1\":\n        case \"us-ascii\":\n        case \"windows-1252\":\n        case \"x-cp1252\":\n            return \"windows-1252\";\n        case \"cp1253\":\n        case \"windows-1253\":\n        case \"x-cp1253\":\n            return \"windows-1253\";\n        case \"cp1254\":\n        case \"csisolatin5\":\n        case \"iso-8859-9\":\n        case \"iso-ir-148\":\n        case \"iso8859-9\":\n        case \"iso88599\":\n        case \"iso_8859-9\":\n        case \"iso_8859-9:1989\":\n        case \"l5\":\n        case \"latin5\":\n        case \"windows-1254\":\n        case \"x-cp1254\":\n            return \"windows-1254\";\n        case \"cp1255\":\n        case \"windows-1255\":\n        case \"x-cp1255\":\n            return \"windows-1255\";\n        case \"cp1256\":\n        case \"windows-1256\":\n        case \"x-cp1256\":\n            return \"windows-1256\";\n        case \"cp1257\":\n        case \"windows-1257\":\n        case \"x-cp1257\":\n            return \"windows-1257\";\n        case \"cp1258\":\n        case \"windows-1258\":\n        case \"x-cp1258\":\n            return \"windows-1258\";\n        case \"x-mac-cyrillic\":\n        case \"x-mac-ukrainian\":\n            return \"x-mac-cyrillic\";\n        case \"chinese\":\n        case \"csgb2312\":\n        case \"csiso58gb231280\":\n        case \"gb2312\":\n        case \"gb_2312\":\n        case \"gb_2312-80\":\n        case \"gbk\":\n        case \"iso-ir-58\":\n        case \"x-gbk\":\n            return \"GBK\";\n        case \"gb18030\":\n            return \"gb18030\";\n        case \"big5\":\n        case \"big5-hkscs\":\n        case \"cn-big5\":\n        case \"csbig5\":\n        case \"x-x-big5\":\n            return \"Big5\";\n        case \"cseucpkdfmtjapanese\":\n        case \"euc-jp\":\n        case \"x-euc-jp\":\n            return \"EUC-JP\";\n        case \"csiso2022jp\":\n        case \"iso-2022-jp\":\n            return \"ISO-2022-JP\";\n        case \"csshiftjis\":\n        case \"ms932\":\n        case \"ms_kanji\":\n        case \"shift-jis\":\n        case \"shift_jis\":\n        case \"sjis\":\n        case \"windows-31j\":\n        case \"x-sjis\":\n            return \"Shift_JIS\";\n        case \"cseuckr\":\n        case \"csksc56011987\":\n        case \"euc-kr\":\n        case \"iso-ir-149\":\n        case \"korean\":\n        case \"ks_c_5601-1987\":\n        case \"ks_c_5601-1989\":\n        case \"ksc5601\":\n        case \"ksc_5601\":\n        case \"windows-949\":\n            return \"EUC-KR\";\n        case \"csiso2022kr\":\n        case \"hz-gb-2312\":\n        case \"iso-2022-cn\":\n        case \"iso-2022-cn-ext\":\n        case \"iso-2022-kr\":\n        case \"replacement\":\n            return \"replacement\";\n        case \"unicodefffe\":\n        case \"utf-16be\":\n            return \"UTF-16BE\";\n        case \"csunicode\":\n        case \"iso-10646-ucs-2\":\n        case \"ucs-2\":\n        case \"unicode\":\n        case \"unicodefeff\":\n        case \"utf-16\":\n        case \"utf-16le\":\n            return \"UTF-16LE\";\n        case \"x-user-defined\":\n            return \"x-user-defined\";\n        default:\n            return \"failure\";\n    }\n}\nmodule.exports = {\n    getEncoding\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fileapi/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fileapi/filereader.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/fileapi/filereader.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { staticPropertyDescriptors, readOperation, fireAProgressEvent } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/fileapi/util.js\");\nconst { kState, kError, kResult, kEvents, kAborted } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fileapi/symbols.js\");\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nclass FileReader extends EventTarget {\n    constructor(){\n        super();\n        this[kState] = \"empty\";\n        this[kResult] = null;\n        this[kError] = null;\n        this[kEvents] = {\n            loadend: null,\n            error: null,\n            abort: null,\n            load: null,\n            progress: null,\n            loadstart: null\n        };\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer\n   * @param {import('buffer').Blob} blob\n   */ readAsArrayBuffer(blob) {\n        webidl.brandCheck(this, FileReader);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FileReader.readAsArrayBuffer\"\n        });\n        blob = webidl.converters.Blob(blob, {\n            strict: false\n        });\n        // The readAsArrayBuffer(blob) method, when invoked,\n        // must initiate a read operation for blob with ArrayBuffer.\n        readOperation(this, blob, \"ArrayBuffer\");\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#readAsBinaryString\n   * @param {import('buffer').Blob} blob\n   */ readAsBinaryString(blob) {\n        webidl.brandCheck(this, FileReader);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FileReader.readAsBinaryString\"\n        });\n        blob = webidl.converters.Blob(blob, {\n            strict: false\n        });\n        // The readAsBinaryString(blob) method, when invoked,\n        // must initiate a read operation for blob with BinaryString.\n        readOperation(this, blob, \"BinaryString\");\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#readAsDataText\n   * @param {import('buffer').Blob} blob\n   * @param {string?} encoding\n   */ readAsText(blob, encoding = undefined) {\n        webidl.brandCheck(this, FileReader);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FileReader.readAsText\"\n        });\n        blob = webidl.converters.Blob(blob, {\n            strict: false\n        });\n        if (encoding !== undefined) {\n            encoding = webidl.converters.DOMString(encoding);\n        }\n        // The readAsText(blob, encoding) method, when invoked,\n        // must initiate a read operation for blob with Text and encoding.\n        readOperation(this, blob, \"Text\", encoding);\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL\n   * @param {import('buffer').Blob} blob\n   */ readAsDataURL(blob) {\n        webidl.brandCheck(this, FileReader);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"FileReader.readAsDataURL\"\n        });\n        blob = webidl.converters.Blob(blob, {\n            strict: false\n        });\n        // The readAsDataURL(blob) method, when invoked, must\n        // initiate a read operation for blob with DataURL.\n        readOperation(this, blob, \"DataURL\");\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dfn-abort\n   */ abort() {\n        // 1. If this's state is \"empty\" or if this's state is\n        //    \"done\" set this's result to null and terminate\n        //    this algorithm.\n        if (this[kState] === \"empty\" || this[kState] === \"done\") {\n            this[kResult] = null;\n            return;\n        }\n        // 2. If this's state is \"loading\" set this's state to\n        //    \"done\" and set this's result to null.\n        if (this[kState] === \"loading\") {\n            this[kState] = \"done\";\n            this[kResult] = null;\n        }\n        // 3. If there are any tasks from this on the file reading\n        //    task source in an affiliated task queue, then remove\n        //    those tasks from that task queue.\n        this[kAborted] = true;\n        // 4. Terminate the algorithm for the read method being processed.\n        // TODO\n        // 5. Fire a progress event called abort at this.\n        fireAProgressEvent(\"abort\", this);\n        // 6. If this's state is not \"loading\", fire a progress\n        //    event called loadend at this.\n        if (this[kState] !== \"loading\") {\n            fireAProgressEvent(\"loadend\", this);\n        }\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate\n   */ get readyState() {\n        webidl.brandCheck(this, FileReader);\n        switch(this[kState]){\n            case \"empty\":\n                return this.EMPTY;\n            case \"loading\":\n                return this.LOADING;\n            case \"done\":\n                return this.DONE;\n        }\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-result\n   */ get result() {\n        webidl.brandCheck(this, FileReader);\n        // The result attribute’s getter, when invoked, must return\n        // this's result.\n        return this[kResult];\n    }\n    /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-error\n   */ get error() {\n        webidl.brandCheck(this, FileReader);\n        // The error attribute’s getter, when invoked, must return\n        // this's error.\n        return this[kError];\n    }\n    get onloadend() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].loadend;\n    }\n    set onloadend(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].loadend) {\n            this.removeEventListener(\"loadend\", this[kEvents].loadend);\n        }\n        if (typeof fn === \"function\") {\n            this[kEvents].loadend = fn;\n            this.addEventListener(\"loadend\", fn);\n        } else {\n            this[kEvents].loadend = null;\n        }\n    }\n    get onerror() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].error;\n    }\n    set onerror(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].error) {\n            this.removeEventListener(\"error\", this[kEvents].error);\n        }\n        if (typeof fn === \"function\") {\n            this[kEvents].error = fn;\n            this.addEventListener(\"error\", fn);\n        } else {\n            this[kEvents].error = null;\n        }\n    }\n    get onloadstart() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].loadstart;\n    }\n    set onloadstart(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].loadstart) {\n            this.removeEventListener(\"loadstart\", this[kEvents].loadstart);\n        }\n        if (typeof fn === \"function\") {\n            this[kEvents].loadstart = fn;\n            this.addEventListener(\"loadstart\", fn);\n        } else {\n            this[kEvents].loadstart = null;\n        }\n    }\n    get onprogress() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].progress;\n    }\n    set onprogress(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].progress) {\n            this.removeEventListener(\"progress\", this[kEvents].progress);\n        }\n        if (typeof fn === \"function\") {\n            this[kEvents].progress = fn;\n            this.addEventListener(\"progress\", fn);\n        } else {\n            this[kEvents].progress = null;\n        }\n    }\n    get onload() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].load;\n    }\n    set onload(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].load) {\n            this.removeEventListener(\"load\", this[kEvents].load);\n        }\n        if (typeof fn === \"function\") {\n            this[kEvents].load = fn;\n            this.addEventListener(\"load\", fn);\n        } else {\n            this[kEvents].load = null;\n        }\n    }\n    get onabort() {\n        webidl.brandCheck(this, FileReader);\n        return this[kEvents].abort;\n    }\n    set onabort(fn) {\n        webidl.brandCheck(this, FileReader);\n        if (this[kEvents].abort) {\n            this.removeEventListener(\"abort\", this[kEvents].abort);\n        }\n        if (typeof fn === \"function\") {\n            this[kEvents].abort = fn;\n            this.addEventListener(\"abort\", fn);\n        } else {\n            this[kEvents].abort = null;\n        }\n    }\n}\n// https://w3c.github.io/FileAPI/#dom-filereader-empty\nFileReader.EMPTY = FileReader.prototype.EMPTY = 0;\n// https://w3c.github.io/FileAPI/#dom-filereader-loading\nFileReader.LOADING = FileReader.prototype.LOADING = 1;\n// https://w3c.github.io/FileAPI/#dom-filereader-done\nFileReader.DONE = FileReader.prototype.DONE = 2;\nObject.defineProperties(FileReader.prototype, {\n    EMPTY: staticPropertyDescriptors,\n    LOADING: staticPropertyDescriptors,\n    DONE: staticPropertyDescriptors,\n    readAsArrayBuffer: kEnumerableProperty,\n    readAsBinaryString: kEnumerableProperty,\n    readAsText: kEnumerableProperty,\n    readAsDataURL: kEnumerableProperty,\n    abort: kEnumerableProperty,\n    readyState: kEnumerableProperty,\n    result: kEnumerableProperty,\n    error: kEnumerableProperty,\n    onloadstart: kEnumerableProperty,\n    onprogress: kEnumerableProperty,\n    onload: kEnumerableProperty,\n    onabort: kEnumerableProperty,\n    onerror: kEnumerableProperty,\n    onloadend: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: \"FileReader\",\n        writable: false,\n        enumerable: false,\n        configurable: true\n    }\n});\nObject.defineProperties(FileReader, {\n    EMPTY: staticPropertyDescriptors,\n    LOADING: staticPropertyDescriptors,\n    DONE: staticPropertyDescriptors\n});\nmodule.exports = {\n    FileReader\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fileapi/filereader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fileapi/progressevent.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/fileapi/progressevent.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst kState = Symbol(\"ProgressEvent state\");\n/**\n * @see https://xhr.spec.whatwg.org/#progressevent\n */ class ProgressEvent extends Event {\n    constructor(type, eventInitDict = {}){\n        type = webidl.converters.DOMString(type);\n        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});\n        super(type, eventInitDict);\n        this[kState] = {\n            lengthComputable: eventInitDict.lengthComputable,\n            loaded: eventInitDict.loaded,\n            total: eventInitDict.total\n        };\n    }\n    get lengthComputable() {\n        webidl.brandCheck(this, ProgressEvent);\n        return this[kState].lengthComputable;\n    }\n    get loaded() {\n        webidl.brandCheck(this, ProgressEvent);\n        return this[kState].loaded;\n    }\n    get total() {\n        webidl.brandCheck(this, ProgressEvent);\n        return this[kState].total;\n    }\n}\nwebidl.converters.ProgressEventInit = webidl.dictionaryConverter([\n    {\n        key: \"lengthComputable\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    },\n    {\n        key: \"loaded\",\n        converter: webidl.converters[\"unsigned long long\"],\n        defaultValue: 0\n    },\n    {\n        key: \"total\",\n        converter: webidl.converters[\"unsigned long long\"],\n        defaultValue: 0\n    },\n    {\n        key: \"bubbles\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    },\n    {\n        key: \"cancelable\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    },\n    {\n        key: \"composed\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    }\n]);\nmodule.exports = {\n    ProgressEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9maWxlYXBpL3Byb2dyZXNzZXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLE1BQU0sRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUUzQixNQUFNQyxTQUFTQyxPQUFPO0FBRXRCOztDQUVDLEdBQ0QsTUFBTUMsc0JBQXNCQztJQUMxQkMsWUFBYUMsSUFBSSxFQUFFQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUU7UUFDckNELE9BQU9QLE9BQU9TLFVBQVUsQ0FBQ0MsU0FBUyxDQUFDSDtRQUNuQ0MsZ0JBQWdCUixPQUFPUyxVQUFVLENBQUNFLGlCQUFpQixDQUFDSCxpQkFBaUIsQ0FBQztRQUV0RSxLQUFLLENBQUNELE1BQU1DO1FBRVosSUFBSSxDQUFDTixPQUFPLEdBQUc7WUFDYlUsa0JBQWtCSixjQUFjSSxnQkFBZ0I7WUFDaERDLFFBQVFMLGNBQWNLLE1BQU07WUFDNUJDLE9BQU9OLGNBQWNNLEtBQUs7UUFDNUI7SUFDRjtJQUVBLElBQUlGLG1CQUFvQjtRQUN0QlosT0FBT2UsVUFBVSxDQUFDLElBQUksRUFBRVg7UUFFeEIsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQ1UsZ0JBQWdCO0lBQ3RDO0lBRUEsSUFBSUMsU0FBVTtRQUNaYixPQUFPZSxVQUFVLENBQUMsSUFBSSxFQUFFWDtRQUV4QixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDVyxNQUFNO0lBQzVCO0lBRUEsSUFBSUMsUUFBUztRQUNYZCxPQUFPZSxVQUFVLENBQUMsSUFBSSxFQUFFWDtRQUV4QixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDWSxLQUFLO0lBQzNCO0FBQ0Y7QUFFQWQsT0FBT1MsVUFBVSxDQUFDRSxpQkFBaUIsR0FBR1gsT0FBT2dCLG1CQUFtQixDQUFDO0lBQy9EO1FBQ0VDLEtBQUs7UUFDTEMsV0FBV2xCLE9BQU9TLFVBQVUsQ0FBQ1UsT0FBTztRQUNwQ0MsY0FBYztJQUNoQjtJQUNBO1FBQ0VILEtBQUs7UUFDTEMsV0FBV2xCLE9BQU9TLFVBQVUsQ0FBQyxxQkFBcUI7UUFDbERXLGNBQWM7SUFDaEI7SUFDQTtRQUNFSCxLQUFLO1FBQ0xDLFdBQVdsQixPQUFPUyxVQUFVLENBQUMscUJBQXFCO1FBQ2xEVyxjQUFjO0lBQ2hCO0lBQ0E7UUFDRUgsS0FBSztRQUNMQyxXQUFXbEIsT0FBT1MsVUFBVSxDQUFDVSxPQUFPO1FBQ3BDQyxjQUFjO0lBQ2hCO0lBQ0E7UUFDRUgsS0FBSztRQUNMQyxXQUFXbEIsT0FBT1MsVUFBVSxDQUFDVSxPQUFPO1FBQ3BDQyxjQUFjO0lBQ2hCO0lBQ0E7UUFDRUgsS0FBSztRQUNMQyxXQUFXbEIsT0FBT1MsVUFBVSxDQUFDVSxPQUFPO1FBQ3BDQyxjQUFjO0lBQ2hCO0NBQ0Q7QUFFREMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvZmlsZWFwaS9wcm9ncmVzc2V2ZW50LmpzPzE0N2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgd2ViaWRsIH0gPSByZXF1aXJlKCcuLi9mZXRjaC93ZWJpZGwnKVxuXG5jb25zdCBrU3RhdGUgPSBTeW1ib2woJ1Byb2dyZXNzRXZlbnQgc3RhdGUnKVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNwcm9ncmVzc2V2ZW50XG4gKi9cbmNsYXNzIFByb2dyZXNzRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIGNvbnN0cnVjdG9yICh0eXBlLCBldmVudEluaXREaWN0ID0ge30pIHtcbiAgICB0eXBlID0gd2ViaWRsLmNvbnZlcnRlcnMuRE9NU3RyaW5nKHR5cGUpXG4gICAgZXZlbnRJbml0RGljdCA9IHdlYmlkbC5jb252ZXJ0ZXJzLlByb2dyZXNzRXZlbnRJbml0KGV2ZW50SW5pdERpY3QgPz8ge30pXG5cbiAgICBzdXBlcih0eXBlLCBldmVudEluaXREaWN0KVxuXG4gICAgdGhpc1trU3RhdGVdID0ge1xuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogZXZlbnRJbml0RGljdC5sZW5ndGhDb21wdXRhYmxlLFxuICAgICAgbG9hZGVkOiBldmVudEluaXREaWN0LmxvYWRlZCxcbiAgICAgIHRvdGFsOiBldmVudEluaXREaWN0LnRvdGFsXG4gICAgfVxuICB9XG5cbiAgZ2V0IGxlbmd0aENvbXB1dGFibGUgKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIFByb2dyZXNzRXZlbnQpXG5cbiAgICByZXR1cm4gdGhpc1trU3RhdGVdLmxlbmd0aENvbXB1dGFibGVcbiAgfVxuXG4gIGdldCBsb2FkZWQgKCkge1xuICAgIHdlYmlkbC5icmFuZENoZWNrKHRoaXMsIFByb2dyZXNzRXZlbnQpXG5cbiAgICByZXR1cm4gdGhpc1trU3RhdGVdLmxvYWRlZFxuICB9XG5cbiAgZ2V0IHRvdGFsICgpIHtcbiAgICB3ZWJpZGwuYnJhbmRDaGVjayh0aGlzLCBQcm9ncmVzc0V2ZW50KVxuXG4gICAgcmV0dXJuIHRoaXNba1N0YXRlXS50b3RhbFxuICB9XG59XG5cbndlYmlkbC5jb252ZXJ0ZXJzLlByb2dyZXNzRXZlbnRJbml0ID0gd2ViaWRsLmRpY3Rpb25hcnlDb252ZXJ0ZXIoW1xuICB7XG4gICAga2V5OiAnbGVuZ3RoQ29tcHV0YWJsZScsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5ib29sZWFuLFxuICAgIGRlZmF1bHRWYWx1ZTogZmFsc2VcbiAgfSxcbiAge1xuICAgIGtleTogJ2xvYWRlZCcsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVyc1sndW5zaWduZWQgbG9uZyBsb25nJ10sXG4gICAgZGVmYXVsdFZhbHVlOiAwXG4gIH0sXG4gIHtcbiAgICBrZXk6ICd0b3RhbCcsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVyc1sndW5zaWduZWQgbG9uZyBsb25nJ10sXG4gICAgZGVmYXVsdFZhbHVlOiAwXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdidWJibGVzJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLmJvb2xlYW4sXG4gICAgZGVmYXVsdFZhbHVlOiBmYWxzZVxuICB9LFxuICB7XG4gICAga2V5OiAnY2FuY2VsYWJsZScsXG4gICAgY29udmVydGVyOiB3ZWJpZGwuY29udmVydGVycy5ib29sZWFuLFxuICAgIGRlZmF1bHRWYWx1ZTogZmFsc2VcbiAgfSxcbiAge1xuICAgIGtleTogJ2NvbXBvc2VkJyxcbiAgICBjb252ZXJ0ZXI6IHdlYmlkbC5jb252ZXJ0ZXJzLmJvb2xlYW4sXG4gICAgZGVmYXVsdFZhbHVlOiBmYWxzZVxuICB9XG5dKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUHJvZ3Jlc3NFdmVudFxufVxuIl0sIm5hbWVzIjpbIndlYmlkbCIsInJlcXVpcmUiLCJrU3RhdGUiLCJTeW1ib2wiLCJQcm9ncmVzc0V2ZW50IiwiRXZlbnQiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJldmVudEluaXREaWN0IiwiY29udmVydGVycyIsIkRPTVN0cmluZyIsIlByb2dyZXNzRXZlbnRJbml0IiwibGVuZ3RoQ29tcHV0YWJsZSIsImxvYWRlZCIsInRvdGFsIiwiYnJhbmRDaGVjayIsImRpY3Rpb25hcnlDb252ZXJ0ZXIiLCJrZXkiLCJjb252ZXJ0ZXIiLCJib29sZWFuIiwiZGVmYXVsdFZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fileapi/progressevent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fileapi/symbols.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/fileapi/symbols.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    kState: Symbol(\"FileReader state\"),\n    kResult: Symbol(\"FileReader result\"),\n    kError: Symbol(\"FileReader error\"),\n    kLastProgressEventFired: Symbol(\"FileReader last progress event fired timestamp\"),\n    kEvents: Symbol(\"FileReader events\"),\n    kAborted: Symbol(\"FileReader aborted\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9maWxlYXBpL3N5bWJvbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLFFBQVFDLE9BQU87SUFDZkMsU0FBU0QsT0FBTztJQUNoQkUsUUFBUUYsT0FBTztJQUNmRyx5QkFBeUJILE9BQU87SUFDaENJLFNBQVNKLE9BQU87SUFDaEJLLFVBQVVMLE9BQU87QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9maWxlYXBpL3N5bWJvbHMuanM/NzA4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtTdGF0ZTogU3ltYm9sKCdGaWxlUmVhZGVyIHN0YXRlJyksXG4gIGtSZXN1bHQ6IFN5bWJvbCgnRmlsZVJlYWRlciByZXN1bHQnKSxcbiAga0Vycm9yOiBTeW1ib2woJ0ZpbGVSZWFkZXIgZXJyb3InKSxcbiAga0xhc3RQcm9ncmVzc0V2ZW50RmlyZWQ6IFN5bWJvbCgnRmlsZVJlYWRlciBsYXN0IHByb2dyZXNzIGV2ZW50IGZpcmVkIHRpbWVzdGFtcCcpLFxuICBrRXZlbnRzOiBTeW1ib2woJ0ZpbGVSZWFkZXIgZXZlbnRzJyksXG4gIGtBYm9ydGVkOiBTeW1ib2woJ0ZpbGVSZWFkZXIgYWJvcnRlZCcpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtTdGF0ZSIsIlN5bWJvbCIsImtSZXN1bHQiLCJrRXJyb3IiLCJrTGFzdFByb2dyZXNzRXZlbnRGaXJlZCIsImtFdmVudHMiLCJrQWJvcnRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fileapi/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/fileapi/util.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/fileapi/util.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { kState, kError, kResult, kAborted, kLastProgressEventFired } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/fileapi/symbols.js\");\nconst { ProgressEvent } = __webpack_require__(/*! ./progressevent */ \"(ssr)/./node_modules/undici/lib/fileapi/progressevent.js\");\nconst { getEncoding } = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/undici/lib/fileapi/encoding.js\");\nconst { DOMException } = __webpack_require__(/*! ../fetch/constants */ \"(ssr)/./node_modules/undici/lib/fetch/constants.js\");\nconst { serializeAMimeType, parseMIMEType } = __webpack_require__(/*! ../fetch/dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nconst { types } = __webpack_require__(/*! util */ \"util\");\nconst { StringDecoder } = __webpack_require__(/*! string_decoder */ \"string_decoder\");\nconst { btoa } = __webpack_require__(/*! buffer */ \"buffer\");\n/** @type {PropertyDescriptor} */ const staticPropertyDescriptors = {\n    enumerable: true,\n    writable: false,\n    configurable: false\n};\n/**\n * @see https://w3c.github.io/FileAPI/#readOperation\n * @param {import('./filereader').FileReader} fr\n * @param {import('buffer').Blob} blob\n * @param {string} type\n * @param {string?} encodingName\n */ function readOperation(fr, blob, type, encodingName) {\n    // 1. If fr’s state is \"loading\", throw an InvalidStateError\n    //    DOMException.\n    if (fr[kState] === \"loading\") {\n        throw new DOMException(\"Invalid state\", \"InvalidStateError\");\n    }\n    // 2. Set fr’s state to \"loading\".\n    fr[kState] = \"loading\";\n    // 3. Set fr’s result to null.\n    fr[kResult] = null;\n    // 4. Set fr’s error to null.\n    fr[kError] = null;\n    // 5. Let stream be the result of calling get stream on blob.\n    /** @type {import('stream/web').ReadableStream} */ const stream = blob.stream();\n    // 6. Let reader be the result of getting a reader from stream.\n    const reader = stream.getReader();\n    // 7. Let bytes be an empty byte sequence.\n    /** @type {Uint8Array[]} */ const bytes = [];\n    // 8. Let chunkPromise be the result of reading a chunk from\n    //    stream with reader.\n    let chunkPromise = reader.read();\n    // 9. Let isFirstChunk be true.\n    let isFirstChunk = true;\n    (async ()=>{\n        while(!fr[kAborted]){\n            // 1. Wait for chunkPromise to be fulfilled or rejected.\n            try {\n                const { done, value } = await chunkPromise;\n                // 2. If chunkPromise is fulfilled, and isFirstChunk is\n                //    true, queue a task to fire a progress event called\n                //    loadstart at fr.\n                if (isFirstChunk && !fr[kAborted]) {\n                    queueMicrotask(()=>{\n                        fireAProgressEvent(\"loadstart\", fr);\n                    });\n                }\n                // 3. Set isFirstChunk to false.\n                isFirstChunk = false;\n                // 4. If chunkPromise is fulfilled with an object whose\n                //    done property is false and whose value property is\n                //    a Uint8Array object, run these steps:\n                if (!done && types.isUint8Array(value)) {\n                    // 1. Let bs be the byte sequence represented by the\n                    //    Uint8Array object.\n                    // 2. Append bs to bytes.\n                    bytes.push(value);\n                    // 3. If roughly 50ms have passed since these steps\n                    //    were last invoked, queue a task to fire a\n                    //    progress event called progress at fr.\n                    if ((fr[kLastProgressEventFired] === undefined || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {\n                        fr[kLastProgressEventFired] = Date.now();\n                        queueMicrotask(()=>{\n                            fireAProgressEvent(\"progress\", fr);\n                        });\n                    }\n                    // 4. Set chunkPromise to the result of reading a\n                    //    chunk from stream with reader.\n                    chunkPromise = reader.read();\n                } else if (done) {\n                    // 5. Otherwise, if chunkPromise is fulfilled with an\n                    //    object whose done property is true, queue a task\n                    //    to run the following steps and abort this algorithm:\n                    queueMicrotask(()=>{\n                        // 1. Set fr’s state to \"done\".\n                        fr[kState] = \"done\";\n                        // 2. Let result be the result of package data given\n                        //    bytes, type, blob’s type, and encodingName.\n                        try {\n                            const result = packageData(bytes, type, blob.type, encodingName);\n                            // 4. Else:\n                            if (fr[kAborted]) {\n                                return;\n                            }\n                            // 1. Set fr’s result to result.\n                            fr[kResult] = result;\n                            // 2. Fire a progress event called load at the fr.\n                            fireAProgressEvent(\"load\", fr);\n                        } catch (error) {\n                            // 3. If package data threw an exception error:\n                            // 1. Set fr’s error to error.\n                            fr[kError] = error;\n                            // 2. Fire a progress event called error at fr.\n                            fireAProgressEvent(\"error\", fr);\n                        }\n                        // 5. If fr’s state is not \"loading\", fire a progress\n                        //    event called loadend at the fr.\n                        if (fr[kState] !== \"loading\") {\n                            fireAProgressEvent(\"loadend\", fr);\n                        }\n                    });\n                    break;\n                }\n            } catch (error) {\n                if (fr[kAborted]) {\n                    return;\n                }\n                // 6. Otherwise, if chunkPromise is rejected with an\n                //    error error, queue a task to run the following\n                //    steps and abort this algorithm:\n                queueMicrotask(()=>{\n                    // 1. Set fr’s state to \"done\".\n                    fr[kState] = \"done\";\n                    // 2. Set fr’s error to error.\n                    fr[kError] = error;\n                    // 3. Fire a progress event called error at fr.\n                    fireAProgressEvent(\"error\", fr);\n                    // 4. If fr’s state is not \"loading\", fire a progress\n                    //    event called loadend at fr.\n                    if (fr[kState] !== \"loading\") {\n                        fireAProgressEvent(\"loadend\", fr);\n                    }\n                });\n                break;\n            }\n        }\n    })();\n}\n/**\n * @see https://w3c.github.io/FileAPI/#fire-a-progress-event\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e The name of the event\n * @param {import('./filereader').FileReader} reader\n */ function fireAProgressEvent(e, reader) {\n    // The progress event e does not bubble. e.bubbles must be false\n    // The progress event e is NOT cancelable. e.cancelable must be false\n    const event = new ProgressEvent(e, {\n        bubbles: false,\n        cancelable: false\n    });\n    reader.dispatchEvent(event);\n}\n/**\n * @see https://w3c.github.io/FileAPI/#blob-package-data\n * @param {Uint8Array[]} bytes\n * @param {string} type\n * @param {string?} mimeType\n * @param {string?} encodingName\n */ function packageData(bytes, type, mimeType, encodingName) {\n    // 1. A Blob has an associated package data algorithm, given\n    //    bytes, a type, a optional mimeType, and a optional\n    //    encodingName, which switches on type and runs the\n    //    associated steps:\n    switch(type){\n        case \"DataURL\":\n            {\n                // 1. Return bytes as a DataURL [RFC2397] subject to\n                //    the considerations below:\n                //  * Use mimeType as part of the Data URL if it is\n                //    available in keeping with the Data URL\n                //    specification [RFC2397].\n                //  * If mimeType is not available return a Data URL\n                //    without a media-type. [RFC2397].\n                // https://datatracker.ietf.org/doc/html/rfc2397#section-3\n                // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n                // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n                // data       := *urlchar\n                // parameter  := attribute \"=\" value\n                let dataURL = \"data:\";\n                const parsed = parseMIMEType(mimeType || \"application/octet-stream\");\n                if (parsed !== \"failure\") {\n                    dataURL += serializeAMimeType(parsed);\n                }\n                dataURL += \";base64,\";\n                const decoder = new StringDecoder(\"latin1\");\n                for (const chunk of bytes){\n                    dataURL += btoa(decoder.write(chunk));\n                }\n                dataURL += btoa(decoder.end());\n                return dataURL;\n            }\n        case \"Text\":\n            {\n                // 1. Let encoding be failure\n                let encoding = \"failure\";\n                // 2. If the encodingName is present, set encoding to the\n                //    result of getting an encoding from encodingName.\n                if (encodingName) {\n                    encoding = getEncoding(encodingName);\n                }\n                // 3. If encoding is failure, and mimeType is present:\n                if (encoding === \"failure\" && mimeType) {\n                    // 1. Let type be the result of parse a MIME type\n                    //    given mimeType.\n                    const type = parseMIMEType(mimeType);\n                    // 2. If type is not failure, set encoding to the result\n                    //    of getting an encoding from type’s parameters[\"charset\"].\n                    if (type !== \"failure\") {\n                        encoding = getEncoding(type.parameters.get(\"charset\"));\n                    }\n                }\n                // 4. If encoding is failure, then set encoding to UTF-8.\n                if (encoding === \"failure\") {\n                    encoding = \"UTF-8\";\n                }\n                // 5. Decode bytes using fallback encoding encoding, and\n                //    return the result.\n                return decode(bytes, encoding);\n            }\n        case \"ArrayBuffer\":\n            {\n                // Return a new ArrayBuffer whose contents are bytes.\n                const sequence = combineByteSequences(bytes);\n                return sequence.buffer;\n            }\n        case \"BinaryString\":\n            {\n                // Return bytes as a binary string, in which every byte\n                //  is represented by a code unit of equal value [0..255].\n                let binaryString = \"\";\n                const decoder = new StringDecoder(\"latin1\");\n                for (const chunk of bytes){\n                    binaryString += decoder.write(chunk);\n                }\n                binaryString += decoder.end();\n                return binaryString;\n            }\n    }\n}\n/**\n * @see https://encoding.spec.whatwg.org/#decode\n * @param {Uint8Array[]} ioQueue\n * @param {string} encoding\n */ function decode(ioQueue, encoding) {\n    const bytes = combineByteSequences(ioQueue);\n    // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.\n    const BOMEncoding = BOMSniffing(bytes);\n    let slice = 0;\n    // 2. If BOMEncoding is non-null:\n    if (BOMEncoding !== null) {\n        // 1. Set encoding to BOMEncoding.\n        encoding = BOMEncoding;\n        // 2. Read three bytes from ioQueue, if BOMEncoding is\n        //    UTF-8; otherwise read two bytes.\n        //    (Do nothing with those bytes.)\n        slice = BOMEncoding === \"UTF-8\" ? 3 : 2;\n    }\n    // 3. Process a queue with an instance of encoding’s\n    //    decoder, ioQueue, output, and \"replacement\".\n    // 4. Return output.\n    const sliced = bytes.slice(slice);\n    return new TextDecoder(encoding).decode(sliced);\n}\n/**\n * @see https://encoding.spec.whatwg.org/#bom-sniff\n * @param {Uint8Array} ioQueue\n */ function BOMSniffing(ioQueue) {\n    // 1. Let BOM be the result of peeking 3 bytes from ioQueue,\n    //    converted to a byte sequence.\n    const [a, b, c] = ioQueue;\n    // 2. For each of the rows in the table below, starting with\n    //    the first one and going down, if BOM starts with the\n    //    bytes given in the first column, then return the\n    //    encoding given in the cell in the second column of that\n    //    row. Otherwise, return null.\n    if (a === 0xEF && b === 0xBB && c === 0xBF) {\n        return \"UTF-8\";\n    } else if (a === 0xFE && b === 0xFF) {\n        return \"UTF-16BE\";\n    } else if (a === 0xFF && b === 0xFE) {\n        return \"UTF-16LE\";\n    }\n    return null;\n}\n/**\n * @param {Uint8Array[]} sequences\n */ function combineByteSequences(sequences) {\n    const size = sequences.reduce((a, b)=>{\n        return a + b.byteLength;\n    }, 0);\n    let offset = 0;\n    return sequences.reduce((a, b)=>{\n        a.set(b, offset);\n        offset += b.byteLength;\n        return a;\n    }, new Uint8Array(size));\n}\nmodule.exports = {\n    staticPropertyDescriptors,\n    readOperation,\n    fireAProgressEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9maWxlYXBpL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQ0pBLE1BQU0sRUFDTkMsTUFBTSxFQUNOQyxPQUFPLEVBQ1BDLFFBQVEsRUFDUkMsdUJBQXVCLEVBQ3hCLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ1osTUFBTSxFQUFFQyxhQUFhLEVBQUUsR0FBR0QsbUJBQU9BLENBQUM7QUFDbEMsTUFBTSxFQUFFRSxXQUFXLEVBQUUsR0FBR0YsbUJBQU9BLENBQUM7QUFDaEMsTUFBTSxFQUFFRyxZQUFZLEVBQUUsR0FBR0gsbUJBQU9BLENBQUM7QUFDakMsTUFBTSxFQUFFSSxrQkFBa0IsRUFBRUMsYUFBYSxFQUFFLEdBQUdMLG1CQUFPQSxDQUFDO0FBQ3RELE1BQU0sRUFBRU0sS0FBSyxFQUFFLEdBQUdOLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU0sRUFBRU8sYUFBYSxFQUFFLEdBQUdQLG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU0sRUFBRVEsSUFBSSxFQUFFLEdBQUdSLG1CQUFPQSxDQUFDO0FBRXpCLCtCQUErQixHQUMvQixNQUFNUyw0QkFBNEI7SUFDaENDLFlBQVk7SUFDWkMsVUFBVTtJQUNWQyxjQUFjO0FBQ2hCO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsY0FBZUMsRUFBRSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsWUFBWTtJQUNsRCw0REFBNEQ7SUFDNUQsbUJBQW1CO0lBQ25CLElBQUlILEVBQUUsQ0FBQ25CLE9BQU8sS0FBSyxXQUFXO1FBQzVCLE1BQU0sSUFBSVEsYUFBYSxpQkFBaUI7SUFDMUM7SUFFQSxrQ0FBa0M7SUFDbENXLEVBQUUsQ0FBQ25CLE9BQU8sR0FBRztJQUViLDhCQUE4QjtJQUM5Qm1CLEVBQUUsQ0FBQ2pCLFFBQVEsR0FBRztJQUVkLDZCQUE2QjtJQUM3QmlCLEVBQUUsQ0FBQ2xCLE9BQU8sR0FBRztJQUViLDZEQUE2RDtJQUM3RCxnREFBZ0QsR0FDaEQsTUFBTXNCLFNBQVNILEtBQUtHLE1BQU07SUFFMUIsK0RBQStEO0lBQy9ELE1BQU1DLFNBQVNELE9BQU9FLFNBQVM7SUFFL0IsMENBQTBDO0lBQzFDLHlCQUF5QixHQUN6QixNQUFNQyxRQUFRLEVBQUU7SUFFaEIsNERBQTREO0lBQzVELHlCQUF5QjtJQUN6QixJQUFJQyxlQUFlSCxPQUFPSSxJQUFJO0lBRTlCLCtCQUErQjtJQUMvQixJQUFJQyxlQUFlO0lBT2pCO1FBQ0EsTUFBTyxDQUFDVixFQUFFLENBQUNoQixTQUFTLENBQUU7WUFDcEIsd0RBQXdEO1lBQ3hELElBQUk7Z0JBQ0YsTUFBTSxFQUFFMkIsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNSjtnQkFFOUIsdURBQXVEO2dCQUN2RCx3REFBd0Q7Z0JBQ3hELHNCQUFzQjtnQkFDdEIsSUFBSUUsZ0JBQWdCLENBQUNWLEVBQUUsQ0FBQ2hCLFNBQVMsRUFBRTtvQkFDakM2QixlQUFlO3dCQUNiQyxtQkFBbUIsYUFBYWQ7b0JBQ2xDO2dCQUNGO2dCQUVBLGdDQUFnQztnQkFDaENVLGVBQWU7Z0JBRWYsdURBQXVEO2dCQUN2RCx3REFBd0Q7Z0JBQ3hELDJDQUEyQztnQkFDM0MsSUFBSSxDQUFDQyxRQUFRbkIsTUFBTXVCLFlBQVksQ0FBQ0gsUUFBUTtvQkFDdEMsb0RBQW9EO29CQUNwRCx3QkFBd0I7b0JBRXhCLHlCQUF5QjtvQkFDekJMLE1BQU1TLElBQUksQ0FBQ0o7b0JBRVgsbURBQW1EO29CQUNuRCwrQ0FBK0M7b0JBQy9DLDJDQUEyQztvQkFDM0MsSUFDRSxDQUNFWixFQUFFLENBQUNmLHdCQUF3QixLQUFLZ0MsYUFDaENDLEtBQUtDLEdBQUcsS0FBS25CLEVBQUUsQ0FBQ2Ysd0JBQXdCLElBQUksRUFBQyxLQUUvQyxDQUFDZSxFQUFFLENBQUNoQixTQUFTLEVBQ2I7d0JBQ0FnQixFQUFFLENBQUNmLHdCQUF3QixHQUFHaUMsS0FBS0MsR0FBRzt3QkFDdENOLGVBQWU7NEJBQ2JDLG1CQUFtQixZQUFZZDt3QkFDakM7b0JBQ0Y7b0JBRUEsaURBQWlEO29CQUNqRCxvQ0FBb0M7b0JBQ3BDUSxlQUFlSCxPQUFPSSxJQUFJO2dCQUM1QixPQUFPLElBQUlFLE1BQU07b0JBQ2YscURBQXFEO29CQUNyRCxzREFBc0Q7b0JBQ3RELDBEQUEwRDtvQkFDMURFLGVBQWU7d0JBQ2IsK0JBQStCO3dCQUMvQmIsRUFBRSxDQUFDbkIsT0FBTyxHQUFHO3dCQUViLG9EQUFvRDt3QkFDcEQsaURBQWlEO3dCQUNqRCxJQUFJOzRCQUNGLE1BQU11QyxTQUFTQyxZQUFZZCxPQUFPTCxNQUFNRCxLQUFLQyxJQUFJLEVBQUVDOzRCQUVuRCxXQUFXOzRCQUVYLElBQUlILEVBQUUsQ0FBQ2hCLFNBQVMsRUFBRTtnQ0FDaEI7NEJBQ0Y7NEJBRUEsZ0NBQWdDOzRCQUNoQ2dCLEVBQUUsQ0FBQ2pCLFFBQVEsR0FBR3FDOzRCQUVkLGtEQUFrRDs0QkFDbEROLG1CQUFtQixRQUFRZDt3QkFDN0IsRUFBRSxPQUFPc0IsT0FBTzs0QkFDZCwrQ0FBK0M7NEJBRS9DLDhCQUE4Qjs0QkFDOUJ0QixFQUFFLENBQUNsQixPQUFPLEdBQUd3Qzs0QkFFYiwrQ0FBK0M7NEJBQy9DUixtQkFBbUIsU0FBU2Q7d0JBQzlCO3dCQUVBLHFEQUFxRDt3QkFDckQscUNBQXFDO3dCQUNyQyxJQUFJQSxFQUFFLENBQUNuQixPQUFPLEtBQUssV0FBVzs0QkFDNUJpQyxtQkFBbUIsV0FBV2Q7d0JBQ2hDO29CQUNGO29CQUVBO2dCQUNGO1lBQ0YsRUFBRSxPQUFPc0IsT0FBTztnQkFDZCxJQUFJdEIsRUFBRSxDQUFDaEIsU0FBUyxFQUFFO29CQUNoQjtnQkFDRjtnQkFFQSxvREFBb0Q7Z0JBQ3BELG9EQUFvRDtnQkFDcEQscUNBQXFDO2dCQUNyQzZCLGVBQWU7b0JBQ2IsK0JBQStCO29CQUMvQmIsRUFBRSxDQUFDbkIsT0FBTyxHQUFHO29CQUViLDhCQUE4QjtvQkFDOUJtQixFQUFFLENBQUNsQixPQUFPLEdBQUd3QztvQkFFYiwrQ0FBK0M7b0JBQy9DUixtQkFBbUIsU0FBU2Q7b0JBRTVCLHFEQUFxRDtvQkFDckQsaUNBQWlDO29CQUNqQyxJQUFJQSxFQUFFLENBQUNuQixPQUFPLEtBQUssV0FBVzt3QkFDNUJpQyxtQkFBbUIsV0FBV2Q7b0JBQ2hDO2dCQUNGO2dCQUVBO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNELFNBQVNjLG1CQUFvQlMsQ0FBQyxFQUFFbEIsTUFBTTtJQUNwQyxnRUFBZ0U7SUFDaEUscUVBQXFFO0lBQ3JFLE1BQU1tQixRQUFRLElBQUlyQyxjQUFjb0MsR0FBRztRQUNqQ0UsU0FBUztRQUNUQyxZQUFZO0lBQ2Q7SUFFQXJCLE9BQU9zQixhQUFhLENBQUNIO0FBQ3ZCO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU0gsWUFBYWQsS0FBSyxFQUFFTCxJQUFJLEVBQUUwQixRQUFRLEVBQUV6QixZQUFZO0lBQ3ZELDREQUE0RDtJQUM1RCx3REFBd0Q7SUFDeEQsdURBQXVEO0lBQ3ZELHVCQUF1QjtJQUV2QixPQUFRRDtRQUNOLEtBQUs7WUFBVztnQkFDZCxvREFBb0Q7Z0JBQ3BELCtCQUErQjtnQkFDL0IsbURBQW1EO2dCQUNuRCw0Q0FBNEM7Z0JBQzVDLDhCQUE4QjtnQkFDOUIsb0RBQW9EO2dCQUNwRCxzQ0FBc0M7Z0JBRXRDLDBEQUEwRDtnQkFDMUQsNkRBQTZEO2dCQUM3RCx3REFBd0Q7Z0JBQ3hELHlCQUF5QjtnQkFDekIsb0NBQW9DO2dCQUNwQyxJQUFJMkIsVUFBVTtnQkFFZCxNQUFNQyxTQUFTdkMsY0FBY3FDLFlBQVk7Z0JBRXpDLElBQUlFLFdBQVcsV0FBVztvQkFDeEJELFdBQVd2QyxtQkFBbUJ3QztnQkFDaEM7Z0JBRUFELFdBQVc7Z0JBRVgsTUFBTUUsVUFBVSxJQUFJdEMsY0FBYztnQkFFbEMsS0FBSyxNQUFNdUMsU0FBU3pCLE1BQU87b0JBQ3pCc0IsV0FBV25DLEtBQUtxQyxRQUFRRSxLQUFLLENBQUNEO2dCQUNoQztnQkFFQUgsV0FBV25DLEtBQUtxQyxRQUFRRyxHQUFHO2dCQUUzQixPQUFPTDtZQUNUO1FBQ0EsS0FBSztZQUFRO2dCQUNYLDZCQUE2QjtnQkFDN0IsSUFBSU0sV0FBVztnQkFFZix5REFBeUQ7Z0JBQ3pELHNEQUFzRDtnQkFDdEQsSUFBSWhDLGNBQWM7b0JBQ2hCZ0MsV0FBVy9DLFlBQVllO2dCQUN6QjtnQkFFQSxzREFBc0Q7Z0JBQ3RELElBQUlnQyxhQUFhLGFBQWFQLFVBQVU7b0JBQ3RDLGlEQUFpRDtvQkFDakQscUJBQXFCO29CQUNyQixNQUFNMUIsT0FBT1gsY0FBY3FDO29CQUUzQix3REFBd0Q7b0JBQ3hELCtEQUErRDtvQkFDL0QsSUFBSTFCLFNBQVMsV0FBVzt3QkFDdEJpQyxXQUFXL0MsWUFBWWMsS0FBS2tDLFVBQVUsQ0FBQ0MsR0FBRyxDQUFDO29CQUM3QztnQkFDRjtnQkFFQSx5REFBeUQ7Z0JBQ3pELElBQUlGLGFBQWEsV0FBVztvQkFDMUJBLFdBQVc7Z0JBQ2I7Z0JBRUEsd0RBQXdEO2dCQUN4RCx3QkFBd0I7Z0JBQ3hCLE9BQU9HLE9BQU8vQixPQUFPNEI7WUFDdkI7UUFDQSxLQUFLO1lBQWU7Z0JBQ2xCLHFEQUFxRDtnQkFDckQsTUFBTUksV0FBV0MscUJBQXFCakM7Z0JBRXRDLE9BQU9nQyxTQUFTRSxNQUFNO1lBQ3hCO1FBQ0EsS0FBSztZQUFnQjtnQkFDbkIsdURBQXVEO2dCQUN2RCwwREFBMEQ7Z0JBQzFELElBQUlDLGVBQWU7Z0JBRW5CLE1BQU1YLFVBQVUsSUFBSXRDLGNBQWM7Z0JBRWxDLEtBQUssTUFBTXVDLFNBQVN6QixNQUFPO29CQUN6Qm1DLGdCQUFnQlgsUUFBUUUsS0FBSyxDQUFDRDtnQkFDaEM7Z0JBRUFVLGdCQUFnQlgsUUFBUUcsR0FBRztnQkFFM0IsT0FBT1E7WUFDVDtJQUNGO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU0osT0FBUUssT0FBTyxFQUFFUixRQUFRO0lBQ2hDLE1BQU01QixRQUFRaUMscUJBQXFCRztJQUVuQyw0REFBNEQ7SUFDNUQsTUFBTUMsY0FBY0MsWUFBWXRDO0lBRWhDLElBQUl1QyxRQUFRO0lBRVosaUNBQWlDO0lBQ2pDLElBQUlGLGdCQUFnQixNQUFNO1FBQ3hCLGtDQUFrQztRQUNsQ1QsV0FBV1M7UUFFWCxzREFBc0Q7UUFDdEQsc0NBQXNDO1FBQ3RDLG9DQUFvQztRQUNwQ0UsUUFBUUYsZ0JBQWdCLFVBQVUsSUFBSTtJQUN4QztJQUVBLG9EQUFvRDtJQUNwRCxrREFBa0Q7SUFFbEQsb0JBQW9CO0lBRXBCLE1BQU1HLFNBQVN4QyxNQUFNdUMsS0FBSyxDQUFDQTtJQUMzQixPQUFPLElBQUlFLFlBQVliLFVBQVVHLE1BQU0sQ0FBQ1M7QUFDMUM7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRixZQUFhRixPQUFPO0lBQzNCLDREQUE0RDtJQUM1RCxtQ0FBbUM7SUFDbkMsTUFBTSxDQUFDTSxHQUFHQyxHQUFHQyxFQUFFLEdBQUdSO0lBRWxCLDREQUE0RDtJQUM1RCwwREFBMEQ7SUFDMUQsc0RBQXNEO0lBQ3RELDZEQUE2RDtJQUM3RCxrQ0FBa0M7SUFDbEMsSUFBSU0sTUFBTSxRQUFRQyxNQUFNLFFBQVFDLE1BQU0sTUFBTTtRQUMxQyxPQUFPO0lBQ1QsT0FBTyxJQUFJRixNQUFNLFFBQVFDLE1BQU0sTUFBTTtRQUNuQyxPQUFPO0lBQ1QsT0FBTyxJQUFJRCxNQUFNLFFBQVFDLE1BQU0sTUFBTTtRQUNuQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPO0FBQ1Q7QUFFQTs7Q0FFQyxHQUNELFNBQVNWLHFCQUFzQlksU0FBUztJQUN0QyxNQUFNQyxPQUFPRCxVQUFVRSxNQUFNLENBQUMsQ0FBQ0wsR0FBR0M7UUFDaEMsT0FBT0QsSUFBSUMsRUFBRUssVUFBVTtJQUN6QixHQUFHO0lBRUgsSUFBSUMsU0FBUztJQUViLE9BQU9KLFVBQVVFLE1BQU0sQ0FBQyxDQUFDTCxHQUFHQztRQUMxQkQsRUFBRVEsR0FBRyxDQUFDUCxHQUFHTTtRQUNUQSxVQUFVTixFQUFFSyxVQUFVO1FBQ3RCLE9BQU9OO0lBQ1QsR0FBRyxJQUFJUyxXQUFXTDtBQUNwQjtBQUVBTSxPQUFPQyxPQUFPLEdBQUc7SUFDZmpFO0lBQ0FJO0lBQ0FlO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9maWxlYXBpL3V0aWwuanM/ZjExYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qge1xuICBrU3RhdGUsXG4gIGtFcnJvcixcbiAga1Jlc3VsdCxcbiAga0Fib3J0ZWQsXG4gIGtMYXN0UHJvZ3Jlc3NFdmVudEZpcmVkXG59ID0gcmVxdWlyZSgnLi9zeW1ib2xzJylcbmNvbnN0IHsgUHJvZ3Jlc3NFdmVudCB9ID0gcmVxdWlyZSgnLi9wcm9ncmVzc2V2ZW50JylcbmNvbnN0IHsgZ2V0RW5jb2RpbmcgfSA9IHJlcXVpcmUoJy4vZW5jb2RpbmcnKVxuY29uc3QgeyBET01FeGNlcHRpb24gfSA9IHJlcXVpcmUoJy4uL2ZldGNoL2NvbnN0YW50cycpXG5jb25zdCB7IHNlcmlhbGl6ZUFNaW1lVHlwZSwgcGFyc2VNSU1FVHlwZSB9ID0gcmVxdWlyZSgnLi4vZmV0Y2gvZGF0YVVSTCcpXG5jb25zdCB7IHR5cGVzIH0gPSByZXF1aXJlKCd1dGlsJylcbmNvbnN0IHsgU3RyaW5nRGVjb2RlciB9ID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXInKVxuY29uc3QgeyBidG9hIH0gPSByZXF1aXJlKCdidWZmZXInKVxuXG4vKiogQHR5cGUge1Byb3BlcnR5RGVzY3JpcHRvcn0gKi9cbmNvbnN0IHN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMgPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHdyaXRhYmxlOiBmYWxzZSxcbiAgY29uZmlndXJhYmxlOiBmYWxzZVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ZpbGVBUEkvI3JlYWRPcGVyYXRpb25cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ZpbGVyZWFkZXInKS5GaWxlUmVhZGVyfSBmclxuICogQHBhcmFtIHtpbXBvcnQoJ2J1ZmZlcicpLkJsb2J9IGJsb2JcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZz99IGVuY29kaW5nTmFtZVxuICovXG5mdW5jdGlvbiByZWFkT3BlcmF0aW9uIChmciwgYmxvYiwgdHlwZSwgZW5jb2RpbmdOYW1lKSB7XG4gIC8vIDEuIElmIGZy4oCZcyBzdGF0ZSBpcyBcImxvYWRpbmdcIiwgdGhyb3cgYW4gSW52YWxpZFN0YXRlRXJyb3JcbiAgLy8gICAgRE9NRXhjZXB0aW9uLlxuICBpZiAoZnJba1N0YXRlXSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignSW52YWxpZCBzdGF0ZScsICdJbnZhbGlkU3RhdGVFcnJvcicpXG4gIH1cblxuICAvLyAyLiBTZXQgZnLigJlzIHN0YXRlIHRvIFwibG9hZGluZ1wiLlxuICBmcltrU3RhdGVdID0gJ2xvYWRpbmcnXG5cbiAgLy8gMy4gU2V0IGZy4oCZcyByZXN1bHQgdG8gbnVsbC5cbiAgZnJba1Jlc3VsdF0gPSBudWxsXG5cbiAgLy8gNC4gU2V0IGZy4oCZcyBlcnJvciB0byBudWxsLlxuICBmcltrRXJyb3JdID0gbnVsbFxuXG4gIC8vIDUuIExldCBzdHJlYW0gYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIGdldCBzdHJlYW0gb24gYmxvYi5cbiAgLyoqIEB0eXBlIHtpbXBvcnQoJ3N0cmVhbS93ZWInKS5SZWFkYWJsZVN0cmVhbX0gKi9cbiAgY29uc3Qgc3RyZWFtID0gYmxvYi5zdHJlYW0oKVxuXG4gIC8vIDYuIExldCByZWFkZXIgYmUgdGhlIHJlc3VsdCBvZiBnZXR0aW5nIGEgcmVhZGVyIGZyb20gc3RyZWFtLlxuICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKClcblxuICAvLyA3LiBMZXQgYnl0ZXMgYmUgYW4gZW1wdHkgYnl0ZSBzZXF1ZW5jZS5cbiAgLyoqIEB0eXBlIHtVaW50OEFycmF5W119ICovXG4gIGNvbnN0IGJ5dGVzID0gW11cblxuICAvLyA4LiBMZXQgY2h1bmtQcm9taXNlIGJlIHRoZSByZXN1bHQgb2YgcmVhZGluZyBhIGNodW5rIGZyb21cbiAgLy8gICAgc3RyZWFtIHdpdGggcmVhZGVyLlxuICBsZXQgY2h1bmtQcm9taXNlID0gcmVhZGVyLnJlYWQoKVxuXG4gIC8vIDkuIExldCBpc0ZpcnN0Q2h1bmsgYmUgdHJ1ZS5cbiAgbGV0IGlzRmlyc3RDaHVuayA9IHRydWVcblxuICAvLyAxMC4gSW4gcGFyYWxsZWwsIHdoaWxlIHRydWU6XG4gIC8vIE5vdGU6IFwiSW4gcGFyYWxsZWxcIiBqdXN0IG1lYW5zIG5vbi1ibG9ja2luZ1xuICAvLyBOb3RlIDI6IHJlYWRPcGVyYXRpb24gaXRzZWxmIGNhbm5vdCBiZSBhc3luYyBhcyBkb3VibGVcbiAgLy8gcmVhZGluZyB0aGUgYm9keSB3b3VsZCB0aGVuIHJlamVjdCB0aGUgcHJvbWlzZSwgaW5zdGVhZFxuICAvLyBvZiB0aHJvd2luZyBhbiBlcnJvci5cbiAgOyhhc3luYyAoKSA9PiB7XG4gICAgd2hpbGUgKCFmcltrQWJvcnRlZF0pIHtcbiAgICAgIC8vIDEuIFdhaXQgZm9yIGNodW5rUHJvbWlzZSB0byBiZSBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCBjaHVua1Byb21pc2VcblxuICAgICAgICAvLyAyLiBJZiBjaHVua1Byb21pc2UgaXMgZnVsZmlsbGVkLCBhbmQgaXNGaXJzdENodW5rIGlzXG4gICAgICAgIC8vICAgIHRydWUsIHF1ZXVlIGEgdGFzayB0byBmaXJlIGEgcHJvZ3Jlc3MgZXZlbnQgY2FsbGVkXG4gICAgICAgIC8vICAgIGxvYWRzdGFydCBhdCBmci5cbiAgICAgICAgaWYgKGlzRmlyc3RDaHVuayAmJiAhZnJba0Fib3J0ZWRdKSB7XG4gICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgZmlyZUFQcm9ncmVzc0V2ZW50KCdsb2Fkc3RhcnQnLCBmcilcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gMy4gU2V0IGlzRmlyc3RDaHVuayB0byBmYWxzZS5cbiAgICAgICAgaXNGaXJzdENodW5rID0gZmFsc2VcblxuICAgICAgICAvLyA0LiBJZiBjaHVua1Byb21pc2UgaXMgZnVsZmlsbGVkIHdpdGggYW4gb2JqZWN0IHdob3NlXG4gICAgICAgIC8vICAgIGRvbmUgcHJvcGVydHkgaXMgZmFsc2UgYW5kIHdob3NlIHZhbHVlIHByb3BlcnR5IGlzXG4gICAgICAgIC8vICAgIGEgVWludDhBcnJheSBvYmplY3QsIHJ1biB0aGVzZSBzdGVwczpcbiAgICAgICAgaWYgKCFkb25lICYmIHR5cGVzLmlzVWludDhBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAvLyAxLiBMZXQgYnMgYmUgdGhlIGJ5dGUgc2VxdWVuY2UgcmVwcmVzZW50ZWQgYnkgdGhlXG4gICAgICAgICAgLy8gICAgVWludDhBcnJheSBvYmplY3QuXG5cbiAgICAgICAgICAvLyAyLiBBcHBlbmQgYnMgdG8gYnl0ZXMuXG4gICAgICAgICAgYnl0ZXMucHVzaCh2YWx1ZSlcblxuICAgICAgICAgIC8vIDMuIElmIHJvdWdobHkgNTBtcyBoYXZlIHBhc3NlZCBzaW5jZSB0aGVzZSBzdGVwc1xuICAgICAgICAgIC8vICAgIHdlcmUgbGFzdCBpbnZva2VkLCBxdWV1ZSBhIHRhc2sgdG8gZmlyZSBhXG4gICAgICAgICAgLy8gICAgcHJvZ3Jlc3MgZXZlbnQgY2FsbGVkIHByb2dyZXNzIGF0IGZyLlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgZnJba0xhc3RQcm9ncmVzc0V2ZW50RmlyZWRdID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgRGF0ZS5ub3coKSAtIGZyW2tMYXN0UHJvZ3Jlc3NFdmVudEZpcmVkXSA+PSA1MFxuICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgIWZyW2tBYm9ydGVkXVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgZnJba0xhc3RQcm9ncmVzc0V2ZW50RmlyZWRdID0gRGF0ZS5ub3coKVxuICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICBmaXJlQVByb2dyZXNzRXZlbnQoJ3Byb2dyZXNzJywgZnIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIDQuIFNldCBjaHVua1Byb21pc2UgdG8gdGhlIHJlc3VsdCBvZiByZWFkaW5nIGFcbiAgICAgICAgICAvLyAgICBjaHVuayBmcm9tIHN0cmVhbSB3aXRoIHJlYWRlci5cbiAgICAgICAgICBjaHVua1Byb21pc2UgPSByZWFkZXIucmVhZCgpXG4gICAgICAgIH0gZWxzZSBpZiAoZG9uZSkge1xuICAgICAgICAgIC8vIDUuIE90aGVyd2lzZSwgaWYgY2h1bmtQcm9taXNlIGlzIGZ1bGZpbGxlZCB3aXRoIGFuXG4gICAgICAgICAgLy8gICAgb2JqZWN0IHdob3NlIGRvbmUgcHJvcGVydHkgaXMgdHJ1ZSwgcXVldWUgYSB0YXNrXG4gICAgICAgICAgLy8gICAgdG8gcnVuIHRoZSBmb2xsb3dpbmcgc3RlcHMgYW5kIGFib3J0IHRoaXMgYWxnb3JpdGhtOlxuICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgIC8vIDEuIFNldCBmcuKAmXMgc3RhdGUgdG8gXCJkb25lXCIuXG4gICAgICAgICAgICBmcltrU3RhdGVdID0gJ2RvbmUnXG5cbiAgICAgICAgICAgIC8vIDIuIExldCByZXN1bHQgYmUgdGhlIHJlc3VsdCBvZiBwYWNrYWdlIGRhdGEgZ2l2ZW5cbiAgICAgICAgICAgIC8vICAgIGJ5dGVzLCB0eXBlLCBibG9i4oCZcyB0eXBlLCBhbmQgZW5jb2RpbmdOYW1lLlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcGFja2FnZURhdGEoYnl0ZXMsIHR5cGUsIGJsb2IudHlwZSwgZW5jb2RpbmdOYW1lKVxuXG4gICAgICAgICAgICAgIC8vIDQuIEVsc2U6XG5cbiAgICAgICAgICAgICAgaWYgKGZyW2tBYm9ydGVkXSkge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gMS4gU2V0IGZy4oCZcyByZXN1bHQgdG8gcmVzdWx0LlxuICAgICAgICAgICAgICBmcltrUmVzdWx0XSA9IHJlc3VsdFxuXG4gICAgICAgICAgICAgIC8vIDIuIEZpcmUgYSBwcm9ncmVzcyBldmVudCBjYWxsZWQgbG9hZCBhdCB0aGUgZnIuXG4gICAgICAgICAgICAgIGZpcmVBUHJvZ3Jlc3NFdmVudCgnbG9hZCcsIGZyKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gMy4gSWYgcGFja2FnZSBkYXRhIHRocmV3IGFuIGV4Y2VwdGlvbiBlcnJvcjpcblxuICAgICAgICAgICAgICAvLyAxLiBTZXQgZnLigJlzIGVycm9yIHRvIGVycm9yLlxuICAgICAgICAgICAgICBmcltrRXJyb3JdID0gZXJyb3JcblxuICAgICAgICAgICAgICAvLyAyLiBGaXJlIGEgcHJvZ3Jlc3MgZXZlbnQgY2FsbGVkIGVycm9yIGF0IGZyLlxuICAgICAgICAgICAgICBmaXJlQVByb2dyZXNzRXZlbnQoJ2Vycm9yJywgZnIpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIDUuIElmIGZy4oCZcyBzdGF0ZSBpcyBub3QgXCJsb2FkaW5nXCIsIGZpcmUgYSBwcm9ncmVzc1xuICAgICAgICAgICAgLy8gICAgZXZlbnQgY2FsbGVkIGxvYWRlbmQgYXQgdGhlIGZyLlxuICAgICAgICAgICAgaWYgKGZyW2tTdGF0ZV0gIT09ICdsb2FkaW5nJykge1xuICAgICAgICAgICAgICBmaXJlQVByb2dyZXNzRXZlbnQoJ2xvYWRlbmQnLCBmcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGZyW2tBYm9ydGVkXSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gNi4gT3RoZXJ3aXNlLCBpZiBjaHVua1Byb21pc2UgaXMgcmVqZWN0ZWQgd2l0aCBhblxuICAgICAgICAvLyAgICBlcnJvciBlcnJvciwgcXVldWUgYSB0YXNrIHRvIHJ1biB0aGUgZm9sbG93aW5nXG4gICAgICAgIC8vICAgIHN0ZXBzIGFuZCBhYm9ydCB0aGlzIGFsZ29yaXRobTpcbiAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgIC8vIDEuIFNldCBmcuKAmXMgc3RhdGUgdG8gXCJkb25lXCIuXG4gICAgICAgICAgZnJba1N0YXRlXSA9ICdkb25lJ1xuXG4gICAgICAgICAgLy8gMi4gU2V0IGZy4oCZcyBlcnJvciB0byBlcnJvci5cbiAgICAgICAgICBmcltrRXJyb3JdID0gZXJyb3JcblxuICAgICAgICAgIC8vIDMuIEZpcmUgYSBwcm9ncmVzcyBldmVudCBjYWxsZWQgZXJyb3IgYXQgZnIuXG4gICAgICAgICAgZmlyZUFQcm9ncmVzc0V2ZW50KCdlcnJvcicsIGZyKVxuXG4gICAgICAgICAgLy8gNC4gSWYgZnLigJlzIHN0YXRlIGlzIG5vdCBcImxvYWRpbmdcIiwgZmlyZSBhIHByb2dyZXNzXG4gICAgICAgICAgLy8gICAgZXZlbnQgY2FsbGVkIGxvYWRlbmQgYXQgZnIuXG4gICAgICAgICAgaWYgKGZyW2tTdGF0ZV0gIT09ICdsb2FkaW5nJykge1xuICAgICAgICAgICAgZmlyZUFQcm9ncmVzc0V2ZW50KCdsb2FkZW5kJywgZnIpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9KSgpXG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL3czYy5naXRodWIuaW8vRmlsZUFQSS8jZmlyZS1hLXByb2dyZXNzLWV2ZW50XG4gKiBAc2VlIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ldmVudC1maXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ZpbGVyZWFkZXInKS5GaWxlUmVhZGVyfSByZWFkZXJcbiAqL1xuZnVuY3Rpb24gZmlyZUFQcm9ncmVzc0V2ZW50IChlLCByZWFkZXIpIHtcbiAgLy8gVGhlIHByb2dyZXNzIGV2ZW50IGUgZG9lcyBub3QgYnViYmxlLiBlLmJ1YmJsZXMgbXVzdCBiZSBmYWxzZVxuICAvLyBUaGUgcHJvZ3Jlc3MgZXZlbnQgZSBpcyBOT1QgY2FuY2VsYWJsZS4gZS5jYW5jZWxhYmxlIG11c3QgYmUgZmFsc2VcbiAgY29uc3QgZXZlbnQgPSBuZXcgUHJvZ3Jlc3NFdmVudChlLCB7XG4gICAgYnViYmxlczogZmFsc2UsXG4gICAgY2FuY2VsYWJsZTogZmFsc2VcbiAgfSlcblxuICByZWFkZXIuZGlzcGF0Y2hFdmVudChldmVudClcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyNibG9iLXBhY2thZ2UtZGF0YVxuICogQHBhcmFtIHtVaW50OEFycmF5W119IGJ5dGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmc/fSBtaW1lVHlwZVxuICogQHBhcmFtIHtzdHJpbmc/fSBlbmNvZGluZ05hbWVcbiAqL1xuZnVuY3Rpb24gcGFja2FnZURhdGEgKGJ5dGVzLCB0eXBlLCBtaW1lVHlwZSwgZW5jb2RpbmdOYW1lKSB7XG4gIC8vIDEuIEEgQmxvYiBoYXMgYW4gYXNzb2NpYXRlZCBwYWNrYWdlIGRhdGEgYWxnb3JpdGhtLCBnaXZlblxuICAvLyAgICBieXRlcywgYSB0eXBlLCBhIG9wdGlvbmFsIG1pbWVUeXBlLCBhbmQgYSBvcHRpb25hbFxuICAvLyAgICBlbmNvZGluZ05hbWUsIHdoaWNoIHN3aXRjaGVzIG9uIHR5cGUgYW5kIHJ1bnMgdGhlXG4gIC8vICAgIGFzc29jaWF0ZWQgc3RlcHM6XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnRGF0YVVSTCc6IHtcbiAgICAgIC8vIDEuIFJldHVybiBieXRlcyBhcyBhIERhdGFVUkwgW1JGQzIzOTddIHN1YmplY3QgdG9cbiAgICAgIC8vICAgIHRoZSBjb25zaWRlcmF0aW9ucyBiZWxvdzpcbiAgICAgIC8vICAqIFVzZSBtaW1lVHlwZSBhcyBwYXJ0IG9mIHRoZSBEYXRhIFVSTCBpZiBpdCBpc1xuICAgICAgLy8gICAgYXZhaWxhYmxlIGluIGtlZXBpbmcgd2l0aCB0aGUgRGF0YSBVUkxcbiAgICAgIC8vICAgIHNwZWNpZmljYXRpb24gW1JGQzIzOTddLlxuICAgICAgLy8gICogSWYgbWltZVR5cGUgaXMgbm90IGF2YWlsYWJsZSByZXR1cm4gYSBEYXRhIFVSTFxuICAgICAgLy8gICAgd2l0aG91dCBhIG1lZGlhLXR5cGUuIFtSRkMyMzk3XS5cblxuICAgICAgLy8gaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmMyMzk3I3NlY3Rpb24tM1xuICAgICAgLy8gZGF0YXVybCAgICA6PSBcImRhdGE6XCIgWyBtZWRpYXR5cGUgXSBbIFwiO2Jhc2U2NFwiIF0gXCIsXCIgZGF0YVxuICAgICAgLy8gbWVkaWF0eXBlICA6PSBbIHR5cGUgXCIvXCIgc3VidHlwZSBdICooIFwiO1wiIHBhcmFtZXRlciApXG4gICAgICAvLyBkYXRhICAgICAgIDo9ICp1cmxjaGFyXG4gICAgICAvLyBwYXJhbWV0ZXIgIDo9IGF0dHJpYnV0ZSBcIj1cIiB2YWx1ZVxuICAgICAgbGV0IGRhdGFVUkwgPSAnZGF0YTonXG5cbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlTUlNRVR5cGUobWltZVR5cGUgfHwgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpXG5cbiAgICAgIGlmIChwYXJzZWQgIT09ICdmYWlsdXJlJykge1xuICAgICAgICBkYXRhVVJMICs9IHNlcmlhbGl6ZUFNaW1lVHlwZShwYXJzZWQpXG4gICAgICB9XG5cbiAgICAgIGRhdGFVUkwgKz0gJztiYXNlNjQsJ1xuXG4gICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoJ2xhdGluMScpXG5cbiAgICAgIGZvciAoY29uc3QgY2h1bmsgb2YgYnl0ZXMpIHtcbiAgICAgICAgZGF0YVVSTCArPSBidG9hKGRlY29kZXIud3JpdGUoY2h1bmspKVxuICAgICAgfVxuXG4gICAgICBkYXRhVVJMICs9IGJ0b2EoZGVjb2Rlci5lbmQoKSlcblxuICAgICAgcmV0dXJuIGRhdGFVUkxcbiAgICB9XG4gICAgY2FzZSAnVGV4dCc6IHtcbiAgICAgIC8vIDEuIExldCBlbmNvZGluZyBiZSBmYWlsdXJlXG4gICAgICBsZXQgZW5jb2RpbmcgPSAnZmFpbHVyZSdcblxuICAgICAgLy8gMi4gSWYgdGhlIGVuY29kaW5nTmFtZSBpcyBwcmVzZW50LCBzZXQgZW5jb2RpbmcgdG8gdGhlXG4gICAgICAvLyAgICByZXN1bHQgb2YgZ2V0dGluZyBhbiBlbmNvZGluZyBmcm9tIGVuY29kaW5nTmFtZS5cbiAgICAgIGlmIChlbmNvZGluZ05hbWUpIHtcbiAgICAgICAgZW5jb2RpbmcgPSBnZXRFbmNvZGluZyhlbmNvZGluZ05hbWUpXG4gICAgICB9XG5cbiAgICAgIC8vIDMuIElmIGVuY29kaW5nIGlzIGZhaWx1cmUsIGFuZCBtaW1lVHlwZSBpcyBwcmVzZW50OlxuICAgICAgaWYgKGVuY29kaW5nID09PSAnZmFpbHVyZScgJiYgbWltZVR5cGUpIHtcbiAgICAgICAgLy8gMS4gTGV0IHR5cGUgYmUgdGhlIHJlc3VsdCBvZiBwYXJzZSBhIE1JTUUgdHlwZVxuICAgICAgICAvLyAgICBnaXZlbiBtaW1lVHlwZS5cbiAgICAgICAgY29uc3QgdHlwZSA9IHBhcnNlTUlNRVR5cGUobWltZVR5cGUpXG5cbiAgICAgICAgLy8gMi4gSWYgdHlwZSBpcyBub3QgZmFpbHVyZSwgc2V0IGVuY29kaW5nIHRvIHRoZSByZXN1bHRcbiAgICAgICAgLy8gICAgb2YgZ2V0dGluZyBhbiBlbmNvZGluZyBmcm9tIHR5cGXigJlzIHBhcmFtZXRlcnNbXCJjaGFyc2V0XCJdLlxuICAgICAgICBpZiAodHlwZSAhPT0gJ2ZhaWx1cmUnKSB7XG4gICAgICAgICAgZW5jb2RpbmcgPSBnZXRFbmNvZGluZyh0eXBlLnBhcmFtZXRlcnMuZ2V0KCdjaGFyc2V0JykpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gNC4gSWYgZW5jb2RpbmcgaXMgZmFpbHVyZSwgdGhlbiBzZXQgZW5jb2RpbmcgdG8gVVRGLTguXG4gICAgICBpZiAoZW5jb2RpbmcgPT09ICdmYWlsdXJlJykge1xuICAgICAgICBlbmNvZGluZyA9ICdVVEYtOCdcbiAgICAgIH1cblxuICAgICAgLy8gNS4gRGVjb2RlIGJ5dGVzIHVzaW5nIGZhbGxiYWNrIGVuY29kaW5nIGVuY29kaW5nLCBhbmRcbiAgICAgIC8vICAgIHJldHVybiB0aGUgcmVzdWx0LlxuICAgICAgcmV0dXJuIGRlY29kZShieXRlcywgZW5jb2RpbmcpXG4gICAgfVxuICAgIGNhc2UgJ0FycmF5QnVmZmVyJzoge1xuICAgICAgLy8gUmV0dXJuIGEgbmV3IEFycmF5QnVmZmVyIHdob3NlIGNvbnRlbnRzIGFyZSBieXRlcy5cbiAgICAgIGNvbnN0IHNlcXVlbmNlID0gY29tYmluZUJ5dGVTZXF1ZW5jZXMoYnl0ZXMpXG5cbiAgICAgIHJldHVybiBzZXF1ZW5jZS5idWZmZXJcbiAgICB9XG4gICAgY2FzZSAnQmluYXJ5U3RyaW5nJzoge1xuICAgICAgLy8gUmV0dXJuIGJ5dGVzIGFzIGEgYmluYXJ5IHN0cmluZywgaW4gd2hpY2ggZXZlcnkgYnl0ZVxuICAgICAgLy8gIGlzIHJlcHJlc2VudGVkIGJ5IGEgY29kZSB1bml0IG9mIGVxdWFsIHZhbHVlIFswLi4yNTVdLlxuICAgICAgbGV0IGJpbmFyeVN0cmluZyA9ICcnXG5cbiAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcignbGF0aW4xJylcblxuICAgICAgZm9yIChjb25zdCBjaHVuayBvZiBieXRlcykge1xuICAgICAgICBiaW5hcnlTdHJpbmcgKz0gZGVjb2Rlci53cml0ZShjaHVuaylcbiAgICAgIH1cblxuICAgICAgYmluYXJ5U3RyaW5nICs9IGRlY29kZXIuZW5kKClcblxuICAgICAgcmV0dXJuIGJpbmFyeVN0cmluZ1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9lbmNvZGluZy5zcGVjLndoYXR3Zy5vcmcvI2RlY29kZVxuICogQHBhcmFtIHtVaW50OEFycmF5W119IGlvUXVldWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGluZ1xuICovXG5mdW5jdGlvbiBkZWNvZGUgKGlvUXVldWUsIGVuY29kaW5nKSB7XG4gIGNvbnN0IGJ5dGVzID0gY29tYmluZUJ5dGVTZXF1ZW5jZXMoaW9RdWV1ZSlcblxuICAvLyAxLiBMZXQgQk9NRW5jb2RpbmcgYmUgdGhlIHJlc3VsdCBvZiBCT00gc25pZmZpbmcgaW9RdWV1ZS5cbiAgY29uc3QgQk9NRW5jb2RpbmcgPSBCT01TbmlmZmluZyhieXRlcylcblxuICBsZXQgc2xpY2UgPSAwXG5cbiAgLy8gMi4gSWYgQk9NRW5jb2RpbmcgaXMgbm9uLW51bGw6XG4gIGlmIChCT01FbmNvZGluZyAhPT0gbnVsbCkge1xuICAgIC8vIDEuIFNldCBlbmNvZGluZyB0byBCT01FbmNvZGluZy5cbiAgICBlbmNvZGluZyA9IEJPTUVuY29kaW5nXG5cbiAgICAvLyAyLiBSZWFkIHRocmVlIGJ5dGVzIGZyb20gaW9RdWV1ZSwgaWYgQk9NRW5jb2RpbmcgaXNcbiAgICAvLyAgICBVVEYtODsgb3RoZXJ3aXNlIHJlYWQgdHdvIGJ5dGVzLlxuICAgIC8vICAgIChEbyBub3RoaW5nIHdpdGggdGhvc2UgYnl0ZXMuKVxuICAgIHNsaWNlID0gQk9NRW5jb2RpbmcgPT09ICdVVEYtOCcgPyAzIDogMlxuICB9XG5cbiAgLy8gMy4gUHJvY2VzcyBhIHF1ZXVlIHdpdGggYW4gaW5zdGFuY2Ugb2YgZW5jb2RpbmfigJlzXG4gIC8vICAgIGRlY29kZXIsIGlvUXVldWUsIG91dHB1dCwgYW5kIFwicmVwbGFjZW1lbnRcIi5cblxuICAvLyA0LiBSZXR1cm4gb3V0cHV0LlxuXG4gIGNvbnN0IHNsaWNlZCA9IGJ5dGVzLnNsaWNlKHNsaWNlKVxuICByZXR1cm4gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKS5kZWNvZGUoc2xpY2VkKVxufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9lbmNvZGluZy5zcGVjLndoYXR3Zy5vcmcvI2JvbS1zbmlmZlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBpb1F1ZXVlXG4gKi9cbmZ1bmN0aW9uIEJPTVNuaWZmaW5nIChpb1F1ZXVlKSB7XG4gIC8vIDEuIExldCBCT00gYmUgdGhlIHJlc3VsdCBvZiBwZWVraW5nIDMgYnl0ZXMgZnJvbSBpb1F1ZXVlLFxuICAvLyAgICBjb252ZXJ0ZWQgdG8gYSBieXRlIHNlcXVlbmNlLlxuICBjb25zdCBbYSwgYiwgY10gPSBpb1F1ZXVlXG5cbiAgLy8gMi4gRm9yIGVhY2ggb2YgdGhlIHJvd3MgaW4gdGhlIHRhYmxlIGJlbG93LCBzdGFydGluZyB3aXRoXG4gIC8vICAgIHRoZSBmaXJzdCBvbmUgYW5kIGdvaW5nIGRvd24sIGlmIEJPTSBzdGFydHMgd2l0aCB0aGVcbiAgLy8gICAgYnl0ZXMgZ2l2ZW4gaW4gdGhlIGZpcnN0IGNvbHVtbiwgdGhlbiByZXR1cm4gdGhlXG4gIC8vICAgIGVuY29kaW5nIGdpdmVuIGluIHRoZSBjZWxsIGluIHRoZSBzZWNvbmQgY29sdW1uIG9mIHRoYXRcbiAgLy8gICAgcm93LiBPdGhlcndpc2UsIHJldHVybiBudWxsLlxuICBpZiAoYSA9PT0gMHhFRiAmJiBiID09PSAweEJCICYmIGMgPT09IDB4QkYpIHtcbiAgICByZXR1cm4gJ1VURi04J1xuICB9IGVsc2UgaWYgKGEgPT09IDB4RkUgJiYgYiA9PT0gMHhGRikge1xuICAgIHJldHVybiAnVVRGLTE2QkUnXG4gIH0gZWxzZSBpZiAoYSA9PT0gMHhGRiAmJiBiID09PSAweEZFKSB7XG4gICAgcmV0dXJuICdVVEYtMTZMRSdcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5W119IHNlcXVlbmNlc1xuICovXG5mdW5jdGlvbiBjb21iaW5lQnl0ZVNlcXVlbmNlcyAoc2VxdWVuY2VzKSB7XG4gIGNvbnN0IHNpemUgPSBzZXF1ZW5jZXMucmVkdWNlKChhLCBiKSA9PiB7XG4gICAgcmV0dXJuIGEgKyBiLmJ5dGVMZW5ndGhcbiAgfSwgMClcblxuICBsZXQgb2Zmc2V0ID0gMFxuXG4gIHJldHVybiBzZXF1ZW5jZXMucmVkdWNlKChhLCBiKSA9PiB7XG4gICAgYS5zZXQoYiwgb2Zmc2V0KVxuICAgIG9mZnNldCArPSBiLmJ5dGVMZW5ndGhcbiAgICByZXR1cm4gYVxuICB9LCBuZXcgVWludDhBcnJheShzaXplKSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMsXG4gIHJlYWRPcGVyYXRpb24sXG4gIGZpcmVBUHJvZ3Jlc3NFdmVudFxufVxuIl0sIm5hbWVzIjpbImtTdGF0ZSIsImtFcnJvciIsImtSZXN1bHQiLCJrQWJvcnRlZCIsImtMYXN0UHJvZ3Jlc3NFdmVudEZpcmVkIiwicmVxdWlyZSIsIlByb2dyZXNzRXZlbnQiLCJnZXRFbmNvZGluZyIsIkRPTUV4Y2VwdGlvbiIsInNlcmlhbGl6ZUFNaW1lVHlwZSIsInBhcnNlTUlNRVR5cGUiLCJ0eXBlcyIsIlN0cmluZ0RlY29kZXIiLCJidG9hIiwic3RhdGljUHJvcGVydHlEZXNjcmlwdG9ycyIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInJlYWRPcGVyYXRpb24iLCJmciIsImJsb2IiLCJ0eXBlIiwiZW5jb2RpbmdOYW1lIiwic3RyZWFtIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwiYnl0ZXMiLCJjaHVua1Byb21pc2UiLCJyZWFkIiwiaXNGaXJzdENodW5rIiwiZG9uZSIsInZhbHVlIiwicXVldWVNaWNyb3Rhc2siLCJmaXJlQVByb2dyZXNzRXZlbnQiLCJpc1VpbnQ4QXJyYXkiLCJwdXNoIiwidW5kZWZpbmVkIiwiRGF0ZSIsIm5vdyIsInJlc3VsdCIsInBhY2thZ2VEYXRhIiwiZXJyb3IiLCJlIiwiZXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRpc3BhdGNoRXZlbnQiLCJtaW1lVHlwZSIsImRhdGFVUkwiLCJwYXJzZWQiLCJkZWNvZGVyIiwiY2h1bmsiLCJ3cml0ZSIsImVuZCIsImVuY29kaW5nIiwicGFyYW1ldGVycyIsImdldCIsImRlY29kZSIsInNlcXVlbmNlIiwiY29tYmluZUJ5dGVTZXF1ZW5jZXMiLCJidWZmZXIiLCJiaW5hcnlTdHJpbmciLCJpb1F1ZXVlIiwiQk9NRW5jb2RpbmciLCJCT01TbmlmZmluZyIsInNsaWNlIiwic2xpY2VkIiwiVGV4dERlY29kZXIiLCJhIiwiYiIsImMiLCJzZXF1ZW5jZXMiLCJzaXplIiwicmVkdWNlIiwiYnl0ZUxlbmd0aCIsIm9mZnNldCIsInNldCIsIlVpbnQ4QXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/fileapi/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/global.js":
/*!*******************************************!*\
  !*** ./node_modules/undici/lib/global.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// We include a version number for the Dispatcher API. In case of breaking changes,\n// this version number must be increased to avoid conflicts.\nconst globalDispatcher = Symbol.for(\"undici.globalDispatcher.1\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst Agent = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/undici/lib/agent.js\");\nif (getGlobalDispatcher() === undefined) {\n    setGlobalDispatcher(new Agent());\n}\nfunction setGlobalDispatcher(agent) {\n    if (!agent || typeof agent.dispatch !== \"function\") {\n        throw new InvalidArgumentError(\"Argument agent must implement Agent\");\n    }\n    Object.defineProperty(globalThis, globalDispatcher, {\n        value: agent,\n        writable: true,\n        enumerable: false,\n        configurable: false\n    });\n}\nfunction getGlobalDispatcher() {\n    return globalThis[globalDispatcher];\n}\nmodule.exports = {\n    setGlobalDispatcher,\n    getGlobalDispatcher\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9nbG9iYWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxtRkFBbUY7QUFDbkYsNERBQTREO0FBQzVELE1BQU1BLG1CQUFtQkMsT0FBT0MsR0FBRyxDQUFDO0FBQ3BDLE1BQU0sRUFBRUMsb0JBQW9CLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFDekMsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFFdEIsSUFBSUUsMEJBQTBCQyxXQUFXO0lBQ3ZDQyxvQkFBb0IsSUFBSUg7QUFDMUI7QUFFQSxTQUFTRyxvQkFBcUJDLEtBQUs7SUFDakMsSUFBSSxDQUFDQSxTQUFTLE9BQU9BLE1BQU1DLFFBQVEsS0FBSyxZQUFZO1FBQ2xELE1BQU0sSUFBSVAscUJBQXFCO0lBQ2pDO0lBQ0FRLE9BQU9DLGNBQWMsQ0FBQ0MsWUFBWWIsa0JBQWtCO1FBQ2xEYyxPQUFPTDtRQUNQTSxVQUFVO1FBQ1ZDLFlBQVk7UUFDWkMsY0FBYztJQUNoQjtBQUNGO0FBRUEsU0FBU1g7SUFDUCxPQUFPTyxVQUFVLENBQUNiLGlCQUFpQjtBQUNyQztBQUVBa0IsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZYO0lBQ0FGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9nbG9iYWwuanM/ZGI4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLy8gV2UgaW5jbHVkZSBhIHZlcnNpb24gbnVtYmVyIGZvciB0aGUgRGlzcGF0Y2hlciBBUEkuIEluIGNhc2Ugb2YgYnJlYWtpbmcgY2hhbmdlcyxcbi8vIHRoaXMgdmVyc2lvbiBudW1iZXIgbXVzdCBiZSBpbmNyZWFzZWQgdG8gYXZvaWQgY29uZmxpY3RzLlxuY29uc3QgZ2xvYmFsRGlzcGF0Y2hlciA9IFN5bWJvbC5mb3IoJ3VuZGljaS5nbG9iYWxEaXNwYXRjaGVyLjEnKVxuY29uc3QgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9ID0gcmVxdWlyZSgnLi9jb3JlL2Vycm9ycycpXG5jb25zdCBBZ2VudCA9IHJlcXVpcmUoJy4vYWdlbnQnKVxuXG5pZiAoZ2V0R2xvYmFsRGlzcGF0Y2hlcigpID09PSB1bmRlZmluZWQpIHtcbiAgc2V0R2xvYmFsRGlzcGF0Y2hlcihuZXcgQWdlbnQoKSlcbn1cblxuZnVuY3Rpb24gc2V0R2xvYmFsRGlzcGF0Y2hlciAoYWdlbnQpIHtcbiAgaWYgKCFhZ2VudCB8fCB0eXBlb2YgYWdlbnQuZGlzcGF0Y2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0FyZ3VtZW50IGFnZW50IG11c3QgaW1wbGVtZW50IEFnZW50JylcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywgZ2xvYmFsRGlzcGF0Y2hlciwge1xuICAgIHZhbHVlOiBhZ2VudCxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGdldEdsb2JhbERpc3BhdGNoZXIgKCkge1xuICByZXR1cm4gZ2xvYmFsVGhpc1tnbG9iYWxEaXNwYXRjaGVyXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0R2xvYmFsRGlzcGF0Y2hlcixcbiAgZ2V0R2xvYmFsRGlzcGF0Y2hlclxufVxuIl0sIm5hbWVzIjpbImdsb2JhbERpc3BhdGNoZXIiLCJTeW1ib2wiLCJmb3IiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsInJlcXVpcmUiLCJBZ2VudCIsImdldEdsb2JhbERpc3BhdGNoZXIiLCJ1bmRlZmluZWQiLCJzZXRHbG9iYWxEaXNwYXRjaGVyIiwiYWdlbnQiLCJkaXNwYXRjaCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2xvYmFsVGhpcyIsInZhbHVlIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/handler/DecoratorHandler.js":
/*!*************************************************************!*\
  !*** ./node_modules/undici/lib/handler/DecoratorHandler.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = class DecoratorHandler {\n    constructor(handler){\n        this.handler = handler;\n    }\n    onConnect(...args) {\n        return this.handler.onConnect(...args);\n    }\n    onError(...args) {\n        return this.handler.onError(...args);\n    }\n    onUpgrade(...args) {\n        return this.handler.onUpgrade(...args);\n    }\n    onHeaders(...args) {\n        return this.handler.onHeaders(...args);\n    }\n    onData(...args) {\n        return this.handler.onData(...args);\n    }\n    onComplete(...args) {\n        return this.handler.onComplete(...args);\n    }\n    onBodySent(...args) {\n        return this.handler.onBodySent(...args);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9oYW5kbGVyL0RlY29yYXRvckhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHLE1BQU1DO0lBQ3JCQyxZQUFhQyxPQUFPLENBQUU7UUFDcEIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ2pCO0lBRUFDLFVBQVcsR0FBR0MsSUFBSSxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDRixPQUFPLENBQUNDLFNBQVMsSUFBSUM7SUFDbkM7SUFFQUMsUUFBUyxHQUFHRCxJQUFJLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csT0FBTyxJQUFJRDtJQUNqQztJQUVBRSxVQUFXLEdBQUdGLElBQUksRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDSSxTQUFTLElBQUlGO0lBQ25DO0lBRUFHLFVBQVcsR0FBR0gsSUFBSSxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDRixPQUFPLENBQUNLLFNBQVMsSUFBSUg7SUFDbkM7SUFFQUksT0FBUSxHQUFHSixJQUFJLEVBQUU7UUFDZixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDTSxNQUFNLElBQUlKO0lBQ2hDO0lBRUFLLFdBQVksR0FBR0wsSUFBSSxFQUFFO1FBQ25CLE9BQU8sSUFBSSxDQUFDRixPQUFPLENBQUNPLFVBQVUsSUFBSUw7SUFDcEM7SUFFQU0sV0FBWSxHQUFHTixJQUFJLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQ1EsVUFBVSxJQUFJTjtJQUNwQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvaGFuZGxlci9EZWNvcmF0b3JIYW5kbGVyLmpzPzE1Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRGVjb3JhdG9ySGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yIChoYW5kbGVyKSB7XG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlclxuICB9XG5cbiAgb25Db25uZWN0ICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5vbkNvbm5lY3QoLi4uYXJncylcbiAgfVxuXG4gIG9uRXJyb3IgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm9uRXJyb3IoLi4uYXJncylcbiAgfVxuXG4gIG9uVXBncmFkZSAoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIub25VcGdyYWRlKC4uLmFyZ3MpXG4gIH1cblxuICBvbkhlYWRlcnMgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm9uSGVhZGVycyguLi5hcmdzKVxuICB9XG5cbiAgb25EYXRhICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5vbkRhdGEoLi4uYXJncylcbiAgfVxuXG4gIG9uQ29tcGxldGUgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm9uQ29tcGxldGUoLi4uYXJncylcbiAgfVxuXG4gIG9uQm9keVNlbnQgKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLm9uQm9keVNlbnQoLi4uYXJncylcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJEZWNvcmF0b3JIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJoYW5kbGVyIiwib25Db25uZWN0IiwiYXJncyIsIm9uRXJyb3IiLCJvblVwZ3JhZGUiLCJvbkhlYWRlcnMiLCJvbkRhdGEiLCJvbkNvbXBsZXRlIiwib25Cb2R5U2VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/handler/DecoratorHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/handler/RedirectHandler.js":
/*!************************************************************!*\
  !*** ./node_modules/undici/lib/handler/RedirectHandler.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { kBodyUsed } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst EE = __webpack_require__(/*! events */ \"events\");\nconst redirectableStatusCodes = [\n    300,\n    301,\n    302,\n    303,\n    307,\n    308\n];\nconst kBody = Symbol(\"body\");\nclass BodyAsyncIterable {\n    constructor(body){\n        this[kBody] = body;\n        this[kBodyUsed] = false;\n    }\n    async *[Symbol.asyncIterator]() {\n        assert(!this[kBodyUsed], \"disturbed\");\n        this[kBodyUsed] = true;\n        yield* this[kBody];\n    }\n}\nclass RedirectHandler {\n    constructor(dispatch, maxRedirections, opts, handler){\n        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n            throw new InvalidArgumentError(\"maxRedirections must be a positive number\");\n        }\n        util.validateHandler(handler, opts.method, opts.upgrade);\n        this.dispatch = dispatch;\n        this.location = null;\n        this.abort = null;\n        this.opts = {\n            ...opts,\n            maxRedirections: 0\n        } // opts must be a copy\n        ;\n        this.maxRedirections = maxRedirections;\n        this.handler = handler;\n        this.history = [];\n        if (util.isStream(this.opts.body)) {\n            // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n            // so that it can be dispatched again?\n            // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n            if (util.bodyLength(this.opts.body) === 0) {\n                this.opts.body.on(\"data\", function() {\n                    assert(false);\n                });\n            }\n            if (typeof this.opts.body.readableDidRead !== \"boolean\") {\n                this.opts.body[kBodyUsed] = false;\n                EE.prototype.on.call(this.opts.body, \"data\", function() {\n                    this[kBodyUsed] = true;\n                });\n            }\n        } else if (this.opts.body && typeof this.opts.body.pipeTo === \"function\") {\n            // TODO (fix): We can't access ReadableStream internal state\n            // to determine whether or not it has been disturbed. This is just\n            // a workaround.\n            this.opts.body = new BodyAsyncIterable(this.opts.body);\n        } else if (this.opts.body && typeof this.opts.body !== \"string\" && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {\n            // TODO: Should we allow re-using iterable if !this.opts.idempotent\n            // or through some other flag?\n            this.opts.body = new BodyAsyncIterable(this.opts.body);\n        }\n    }\n    onConnect(abort) {\n        this.abort = abort;\n        this.handler.onConnect(abort, {\n            history: this.history\n        });\n    }\n    onUpgrade(statusCode, headers, socket) {\n        this.handler.onUpgrade(statusCode, headers, socket);\n    }\n    onError(error) {\n        this.handler.onError(error);\n    }\n    onHeaders(statusCode, headers, resume, statusText) {\n        this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);\n        if (this.opts.origin) {\n            this.history.push(new URL(this.opts.path, this.opts.origin));\n        }\n        if (!this.location) {\n            return this.handler.onHeaders(statusCode, headers, resume, statusText);\n        }\n        const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));\n        const path = search ? `${pathname}${search}` : pathname;\n        // Remove headers referring to the original URL.\n        // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.\n        // https://tools.ietf.org/html/rfc7231#section-6.4\n        this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);\n        this.opts.path = path;\n        this.opts.origin = origin;\n        this.opts.maxRedirections = 0;\n        this.opts.query = null;\n        // https://tools.ietf.org/html/rfc7231#section-6.4.4\n        // In case of HTTP 303, always replace method to be either HEAD or GET\n        if (statusCode === 303 && this.opts.method !== \"HEAD\") {\n            this.opts.method = \"GET\";\n            this.opts.body = null;\n        }\n    }\n    onData(chunk) {\n        if (this.location) {\n        /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response bodies.\n\n        Redirection is used to serve the requested resource from another URL, so it is assumes that\n        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.\n\n        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually\n        (which means it's optional and not mandated) contain just an hyperlink to the value of\n        the Location response header, so the body can be ignored safely.\n\n        For status 300, which is \"Multiple Choices\", the spec mentions both generating a Location\n        response header AND a response body with the other possible location to follow.\n        Since the spec explicitily chooses not to specify a format for such body and leave it to\n        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.\n      */ } else {\n            return this.handler.onData(chunk);\n        }\n    }\n    onComplete(trailers) {\n        if (this.location) {\n            /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections\n        and neither are useful if present.\n\n        See comment on onData method above for more detailed informations.\n      */ this.location = null;\n            this.abort = null;\n            this.dispatch(this.opts, this);\n        } else {\n            this.handler.onComplete(trailers);\n        }\n    }\n    onBodySent(chunk) {\n        if (this.handler.onBodySent) {\n            this.handler.onBodySent(chunk);\n        }\n    }\n}\nfunction parseLocation(statusCode, headers) {\n    if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n        return null;\n    }\n    for(let i = 0; i < headers.length; i += 2){\n        if (headers[i].toString().toLowerCase() === \"location\") {\n            return headers[i + 1];\n        }\n    }\n}\n// https://tools.ietf.org/html/rfc7231#section-6.4.4\nfunction shouldRemoveHeader(header, removeContent, unknownOrigin) {\n    return header.length === 4 && header.toString().toLowerCase() === \"host\" || removeContent && header.toString().toLowerCase().indexOf(\"content-\") === 0 || unknownOrigin && header.length === 13 && header.toString().toLowerCase() === \"authorization\" || unknownOrigin && header.length === 6 && header.toString().toLowerCase() === \"cookie\";\n}\n// https://tools.ietf.org/html/rfc7231#section-6.4\nfunction cleanRequestHeaders(headers, removeContent, unknownOrigin) {\n    const ret = [];\n    if (Array.isArray(headers)) {\n        for(let i = 0; i < headers.length; i += 2){\n            if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n                ret.push(headers[i], headers[i + 1]);\n            }\n        }\n    } else if (headers && typeof headers === \"object\") {\n        for (const key of Object.keys(headers)){\n            if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n                ret.push(key, headers[key]);\n            }\n        }\n    } else {\n        assert(headers == null, \"headers must be an object or an array\");\n    }\n    return ret;\n}\nmodule.exports = RedirectHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/handler/RedirectHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/interceptor/redirectInterceptor.js":
/*!********************************************************************!*\
  !*** ./node_modules/undici/lib/interceptor/redirectInterceptor.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst RedirectHandler = __webpack_require__(/*! ../handler/RedirectHandler */ \"(ssr)/./node_modules/undici/lib/handler/RedirectHandler.js\");\nfunction createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {\n    return (dispatch)=>{\n        return function Intercept(opts, handler) {\n            const { maxRedirections = defaultMaxRedirections } = opts;\n            if (!maxRedirections) {\n                return dispatch(opts, handler);\n            }\n            const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);\n            opts = {\n                ...opts,\n                maxRedirections: 0\n            } // Stop sub dispatcher from also redirecting.\n            ;\n            return dispatch(opts, redirectHandler);\n        };\n    };\n}\nmodule.exports = createRedirectInterceptor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9pbnRlcmNlcHRvci9yZWRpcmVjdEludGVyY2VwdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsa0JBQWtCQyxtQkFBT0EsQ0FBQztBQUVoQyxTQUFTQywwQkFBMkIsRUFBRUMsaUJBQWlCQyxzQkFBc0IsRUFBRTtJQUM3RSxPQUFPLENBQUNDO1FBQ04sT0FBTyxTQUFTQyxVQUFXQyxJQUFJLEVBQUVDLE9BQU87WUFDdEMsTUFBTSxFQUFFTCxrQkFBa0JDLHNCQUFzQixFQUFFLEdBQUdHO1lBRXJELElBQUksQ0FBQ0osaUJBQWlCO2dCQUNwQixPQUFPRSxTQUFTRSxNQUFNQztZQUN4QjtZQUVBLE1BQU1DLGtCQUFrQixJQUFJVCxnQkFBZ0JLLFVBQVVGLGlCQUFpQkksTUFBTUM7WUFDN0VELE9BQU87Z0JBQUUsR0FBR0EsSUFBSTtnQkFBRUosaUJBQWlCO1lBQUUsRUFBRSw2Q0FBNkM7O1lBQ3BGLE9BQU9FLFNBQVNFLE1BQU1FO1FBQ3hCO0lBQ0Y7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvaW50ZXJjZXB0b3IvcmVkaXJlY3RJbnRlcmNlcHRvci5qcz9iODIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBSZWRpcmVjdEhhbmRsZXIgPSByZXF1aXJlKCcuLi9oYW5kbGVyL1JlZGlyZWN0SGFuZGxlcicpXG5cbmZ1bmN0aW9uIGNyZWF0ZVJlZGlyZWN0SW50ZXJjZXB0b3IgKHsgbWF4UmVkaXJlY3Rpb25zOiBkZWZhdWx0TWF4UmVkaXJlY3Rpb25zIH0pIHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiBJbnRlcmNlcHQgKG9wdHMsIGhhbmRsZXIpIHtcbiAgICAgIGNvbnN0IHsgbWF4UmVkaXJlY3Rpb25zID0gZGVmYXVsdE1heFJlZGlyZWN0aW9ucyB9ID0gb3B0c1xuXG4gICAgICBpZiAoIW1heFJlZGlyZWN0aW9ucykge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2gob3B0cywgaGFuZGxlcilcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVkaXJlY3RIYW5kbGVyID0gbmV3IFJlZGlyZWN0SGFuZGxlcihkaXNwYXRjaCwgbWF4UmVkaXJlY3Rpb25zLCBvcHRzLCBoYW5kbGVyKVxuICAgICAgb3B0cyA9IHsgLi4ub3B0cywgbWF4UmVkaXJlY3Rpb25zOiAwIH0gLy8gU3RvcCBzdWIgZGlzcGF0Y2hlciBmcm9tIGFsc28gcmVkaXJlY3RpbmcuXG4gICAgICByZXR1cm4gZGlzcGF0Y2gob3B0cywgcmVkaXJlY3RIYW5kbGVyKVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlZGlyZWN0SW50ZXJjZXB0b3JcbiJdLCJuYW1lcyI6WyJSZWRpcmVjdEhhbmRsZXIiLCJyZXF1aXJlIiwiY3JlYXRlUmVkaXJlY3RJbnRlcmNlcHRvciIsIm1heFJlZGlyZWN0aW9ucyIsImRlZmF1bHRNYXhSZWRpcmVjdGlvbnMiLCJkaXNwYXRjaCIsIkludGVyY2VwdCIsIm9wdHMiLCJoYW5kbGVyIiwicmVkaXJlY3RIYW5kbGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/interceptor/redirectInterceptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/constants.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/constants.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/undici/lib/llhttp/utils.js\");\n// C headers\nvar ERROR;\n(function(ERROR) {\n    ERROR[ERROR[\"OK\"] = 0] = \"OK\";\n    ERROR[ERROR[\"INTERNAL\"] = 1] = \"INTERNAL\";\n    ERROR[ERROR[\"STRICT\"] = 2] = \"STRICT\";\n    ERROR[ERROR[\"LF_EXPECTED\"] = 3] = \"LF_EXPECTED\";\n    ERROR[ERROR[\"UNEXPECTED_CONTENT_LENGTH\"] = 4] = \"UNEXPECTED_CONTENT_LENGTH\";\n    ERROR[ERROR[\"CLOSED_CONNECTION\"] = 5] = \"CLOSED_CONNECTION\";\n    ERROR[ERROR[\"INVALID_METHOD\"] = 6] = \"INVALID_METHOD\";\n    ERROR[ERROR[\"INVALID_URL\"] = 7] = \"INVALID_URL\";\n    ERROR[ERROR[\"INVALID_CONSTANT\"] = 8] = \"INVALID_CONSTANT\";\n    ERROR[ERROR[\"INVALID_VERSION\"] = 9] = \"INVALID_VERSION\";\n    ERROR[ERROR[\"INVALID_HEADER_TOKEN\"] = 10] = \"INVALID_HEADER_TOKEN\";\n    ERROR[ERROR[\"INVALID_CONTENT_LENGTH\"] = 11] = \"INVALID_CONTENT_LENGTH\";\n    ERROR[ERROR[\"INVALID_CHUNK_SIZE\"] = 12] = \"INVALID_CHUNK_SIZE\";\n    ERROR[ERROR[\"INVALID_STATUS\"] = 13] = \"INVALID_STATUS\";\n    ERROR[ERROR[\"INVALID_EOF_STATE\"] = 14] = \"INVALID_EOF_STATE\";\n    ERROR[ERROR[\"INVALID_TRANSFER_ENCODING\"] = 15] = \"INVALID_TRANSFER_ENCODING\";\n    ERROR[ERROR[\"CB_MESSAGE_BEGIN\"] = 16] = \"CB_MESSAGE_BEGIN\";\n    ERROR[ERROR[\"CB_HEADERS_COMPLETE\"] = 17] = \"CB_HEADERS_COMPLETE\";\n    ERROR[ERROR[\"CB_MESSAGE_COMPLETE\"] = 18] = \"CB_MESSAGE_COMPLETE\";\n    ERROR[ERROR[\"CB_CHUNK_HEADER\"] = 19] = \"CB_CHUNK_HEADER\";\n    ERROR[ERROR[\"CB_CHUNK_COMPLETE\"] = 20] = \"CB_CHUNK_COMPLETE\";\n    ERROR[ERROR[\"PAUSED\"] = 21] = \"PAUSED\";\n    ERROR[ERROR[\"PAUSED_UPGRADE\"] = 22] = \"PAUSED_UPGRADE\";\n    ERROR[ERROR[\"PAUSED_H2_UPGRADE\"] = 23] = \"PAUSED_H2_UPGRADE\";\n    ERROR[ERROR[\"USER\"] = 24] = \"USER\";\n})(ERROR = exports.ERROR || (exports.ERROR = {}));\nvar TYPE;\n(function(TYPE) {\n    TYPE[TYPE[\"BOTH\"] = 0] = \"BOTH\";\n    TYPE[TYPE[\"REQUEST\"] = 1] = \"REQUEST\";\n    TYPE[TYPE[\"RESPONSE\"] = 2] = \"RESPONSE\";\n})(TYPE = exports.TYPE || (exports.TYPE = {}));\nvar FLAGS;\n(function(FLAGS) {\n    FLAGS[FLAGS[\"CONNECTION_KEEP_ALIVE\"] = 1] = \"CONNECTION_KEEP_ALIVE\";\n    FLAGS[FLAGS[\"CONNECTION_CLOSE\"] = 2] = \"CONNECTION_CLOSE\";\n    FLAGS[FLAGS[\"CONNECTION_UPGRADE\"] = 4] = \"CONNECTION_UPGRADE\";\n    FLAGS[FLAGS[\"CHUNKED\"] = 8] = \"CHUNKED\";\n    FLAGS[FLAGS[\"UPGRADE\"] = 16] = \"UPGRADE\";\n    FLAGS[FLAGS[\"CONTENT_LENGTH\"] = 32] = \"CONTENT_LENGTH\";\n    FLAGS[FLAGS[\"SKIPBODY\"] = 64] = \"SKIPBODY\";\n    FLAGS[FLAGS[\"TRAILING\"] = 128] = \"TRAILING\";\n    // 1 << 8 is unused\n    FLAGS[FLAGS[\"TRANSFER_ENCODING\"] = 512] = \"TRANSFER_ENCODING\";\n})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));\nvar LENIENT_FLAGS;\n(function(LENIENT_FLAGS) {\n    LENIENT_FLAGS[LENIENT_FLAGS[\"HEADERS\"] = 1] = \"HEADERS\";\n    LENIENT_FLAGS[LENIENT_FLAGS[\"CHUNKED_LENGTH\"] = 2] = \"CHUNKED_LENGTH\";\n    LENIENT_FLAGS[LENIENT_FLAGS[\"KEEP_ALIVE\"] = 4] = \"KEEP_ALIVE\";\n})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));\nvar METHODS;\n(function(METHODS) {\n    METHODS[METHODS[\"DELETE\"] = 0] = \"DELETE\";\n    METHODS[METHODS[\"GET\"] = 1] = \"GET\";\n    METHODS[METHODS[\"HEAD\"] = 2] = \"HEAD\";\n    METHODS[METHODS[\"POST\"] = 3] = \"POST\";\n    METHODS[METHODS[\"PUT\"] = 4] = \"PUT\";\n    /* pathological */ METHODS[METHODS[\"CONNECT\"] = 5] = \"CONNECT\";\n    METHODS[METHODS[\"OPTIONS\"] = 6] = \"OPTIONS\";\n    METHODS[METHODS[\"TRACE\"] = 7] = \"TRACE\";\n    /* WebDAV */ METHODS[METHODS[\"COPY\"] = 8] = \"COPY\";\n    METHODS[METHODS[\"LOCK\"] = 9] = \"LOCK\";\n    METHODS[METHODS[\"MKCOL\"] = 10] = \"MKCOL\";\n    METHODS[METHODS[\"MOVE\"] = 11] = \"MOVE\";\n    METHODS[METHODS[\"PROPFIND\"] = 12] = \"PROPFIND\";\n    METHODS[METHODS[\"PROPPATCH\"] = 13] = \"PROPPATCH\";\n    METHODS[METHODS[\"SEARCH\"] = 14] = \"SEARCH\";\n    METHODS[METHODS[\"UNLOCK\"] = 15] = \"UNLOCK\";\n    METHODS[METHODS[\"BIND\"] = 16] = \"BIND\";\n    METHODS[METHODS[\"REBIND\"] = 17] = \"REBIND\";\n    METHODS[METHODS[\"UNBIND\"] = 18] = \"UNBIND\";\n    METHODS[METHODS[\"ACL\"] = 19] = \"ACL\";\n    /* subversion */ METHODS[METHODS[\"REPORT\"] = 20] = \"REPORT\";\n    METHODS[METHODS[\"MKACTIVITY\"] = 21] = \"MKACTIVITY\";\n    METHODS[METHODS[\"CHECKOUT\"] = 22] = \"CHECKOUT\";\n    METHODS[METHODS[\"MERGE\"] = 23] = \"MERGE\";\n    /* upnp */ METHODS[METHODS[\"M-SEARCH\"] = 24] = \"M-SEARCH\";\n    METHODS[METHODS[\"NOTIFY\"] = 25] = \"NOTIFY\";\n    METHODS[METHODS[\"SUBSCRIBE\"] = 26] = \"SUBSCRIBE\";\n    METHODS[METHODS[\"UNSUBSCRIBE\"] = 27] = \"UNSUBSCRIBE\";\n    /* RFC-5789 */ METHODS[METHODS[\"PATCH\"] = 28] = \"PATCH\";\n    METHODS[METHODS[\"PURGE\"] = 29] = \"PURGE\";\n    /* CalDAV */ METHODS[METHODS[\"MKCALENDAR\"] = 30] = \"MKCALENDAR\";\n    /* RFC-2068, section 19.6.1.2 */ METHODS[METHODS[\"LINK\"] = 31] = \"LINK\";\n    METHODS[METHODS[\"UNLINK\"] = 32] = \"UNLINK\";\n    /* icecast */ METHODS[METHODS[\"SOURCE\"] = 33] = \"SOURCE\";\n    /* RFC-7540, section 11.6 */ METHODS[METHODS[\"PRI\"] = 34] = \"PRI\";\n    /* RFC-2326 RTSP */ METHODS[METHODS[\"DESCRIBE\"] = 35] = \"DESCRIBE\";\n    METHODS[METHODS[\"ANNOUNCE\"] = 36] = \"ANNOUNCE\";\n    METHODS[METHODS[\"SETUP\"] = 37] = \"SETUP\";\n    METHODS[METHODS[\"PLAY\"] = 38] = \"PLAY\";\n    METHODS[METHODS[\"PAUSE\"] = 39] = \"PAUSE\";\n    METHODS[METHODS[\"TEARDOWN\"] = 40] = \"TEARDOWN\";\n    METHODS[METHODS[\"GET_PARAMETER\"] = 41] = \"GET_PARAMETER\";\n    METHODS[METHODS[\"SET_PARAMETER\"] = 42] = \"SET_PARAMETER\";\n    METHODS[METHODS[\"REDIRECT\"] = 43] = \"REDIRECT\";\n    METHODS[METHODS[\"RECORD\"] = 44] = \"RECORD\";\n    /* RAOP */ METHODS[METHODS[\"FLUSH\"] = 45] = \"FLUSH\";\n})(METHODS = exports.METHODS || (exports.METHODS = {}));\nexports.METHODS_HTTP = [\n    METHODS.DELETE,\n    METHODS.GET,\n    METHODS.HEAD,\n    METHODS.POST,\n    METHODS.PUT,\n    METHODS.CONNECT,\n    METHODS.OPTIONS,\n    METHODS.TRACE,\n    METHODS.COPY,\n    METHODS.LOCK,\n    METHODS.MKCOL,\n    METHODS.MOVE,\n    METHODS.PROPFIND,\n    METHODS.PROPPATCH,\n    METHODS.SEARCH,\n    METHODS.UNLOCK,\n    METHODS.BIND,\n    METHODS.REBIND,\n    METHODS.UNBIND,\n    METHODS.ACL,\n    METHODS.REPORT,\n    METHODS.MKACTIVITY,\n    METHODS.CHECKOUT,\n    METHODS.MERGE,\n    METHODS[\"M-SEARCH\"],\n    METHODS.NOTIFY,\n    METHODS.SUBSCRIBE,\n    METHODS.UNSUBSCRIBE,\n    METHODS.PATCH,\n    METHODS.PURGE,\n    METHODS.MKCALENDAR,\n    METHODS.LINK,\n    METHODS.UNLINK,\n    METHODS.PRI,\n    // TODO(indutny): should we allow it with HTTP?\n    METHODS.SOURCE\n];\nexports.METHODS_ICE = [\n    METHODS.SOURCE\n];\nexports.METHODS_RTSP = [\n    METHODS.OPTIONS,\n    METHODS.DESCRIBE,\n    METHODS.ANNOUNCE,\n    METHODS.SETUP,\n    METHODS.PLAY,\n    METHODS.PAUSE,\n    METHODS.TEARDOWN,\n    METHODS.GET_PARAMETER,\n    METHODS.SET_PARAMETER,\n    METHODS.REDIRECT,\n    METHODS.RECORD,\n    METHODS.FLUSH,\n    // For AirPlay\n    METHODS.GET,\n    METHODS.POST\n];\nexports.METHOD_MAP = utils_1.enumToMap(METHODS);\nexports.H_METHOD_MAP = {};\nObject.keys(exports.METHOD_MAP).forEach((key)=>{\n    if (/^H/.test(key)) {\n        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];\n    }\n});\nvar FINISH;\n(function(FINISH) {\n    FINISH[FINISH[\"SAFE\"] = 0] = \"SAFE\";\n    FINISH[FINISH[\"SAFE_WITH_CB\"] = 1] = \"SAFE_WITH_CB\";\n    FINISH[FINISH[\"UNSAFE\"] = 2] = \"UNSAFE\";\n})(FINISH = exports.FINISH || (exports.FINISH = {}));\nexports.ALPHA = [];\nfor(let i = \"A\".charCodeAt(0); i <= \"Z\".charCodeAt(0); i++){\n    // Upper case\n    exports.ALPHA.push(String.fromCharCode(i));\n    // Lower case\n    exports.ALPHA.push(String.fromCharCode(i + 0x20));\n}\nexports.NUM_MAP = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n};\nexports.HEX_MAP = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 0XA,\n    B: 0XB,\n    C: 0XC,\n    D: 0XD,\n    E: 0XE,\n    F: 0XF,\n    a: 0xa,\n    b: 0xb,\n    c: 0xc,\n    d: 0xd,\n    e: 0xe,\n    f: 0xf\n};\nexports.NUM = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\"\n];\nexports.ALPHANUM = exports.ALPHA.concat(exports.NUM);\nexports.MARK = [\n    \"-\",\n    \"_\",\n    \".\",\n    \"!\",\n    \"~\",\n    \"*\",\n    \"'\",\n    \"(\",\n    \")\"\n];\nexports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([\n    \"%\",\n    \";\",\n    \":\",\n    \"&\",\n    \"=\",\n    \"+\",\n    \"$\",\n    \",\"\n]);\n// TODO(indutny): use RFC\nexports.STRICT_URL_CHAR = [\n    \"!\",\n    '\"',\n    \"$\",\n    \"%\",\n    \"&\",\n    \"'\",\n    \"(\",\n    \")\",\n    \"*\",\n    \"+\",\n    \",\",\n    \"-\",\n    \".\",\n    \"/\",\n    \":\",\n    \";\",\n    \"<\",\n    \"=\",\n    \">\",\n    \"@\",\n    \"[\",\n    \"\\\\\",\n    \"]\",\n    \"^\",\n    \"_\",\n    \"`\",\n    \"{\",\n    \"|\",\n    \"}\",\n    \"~\"\n].concat(exports.ALPHANUM);\nexports.URL_CHAR = exports.STRICT_URL_CHAR.concat([\n    \"\t\",\n    \"\\f\"\n]);\n// All characters with 0x80 bit set to 1\nfor(let i = 0x80; i <= 0xff; i++){\n    exports.URL_CHAR.push(i);\n}\nexports.HEX = exports.NUM.concat([\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\"\n]);\n/* Tokens as defined by rfc 2616. Also lowercases them.\n *        token       = 1*<any CHAR except CTLs or separators>\n *     separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *                    | \",\" | \";\" | \":\" | \"\\\" | <\">\n *                    | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *                    | \"{\" | \"}\" | SP | HT\n */ exports.STRICT_TOKEN = [\n    \"!\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"&\",\n    \"'\",\n    \"*\",\n    \"+\",\n    \"-\",\n    \".\",\n    \"^\",\n    \"_\",\n    \"`\",\n    \"|\",\n    \"~\"\n].concat(exports.ALPHANUM);\nexports.TOKEN = exports.STRICT_TOKEN.concat([\n    \" \"\n]);\n/*\n * Verify that a char is a valid visible (printable) US-ASCII\n * character or %x80-FF\n */ exports.HEADER_CHARS = [\n    \"\t\"\n];\nfor(let i = 32; i <= 255; i++){\n    if (i !== 127) {\n        exports.HEADER_CHARS.push(i);\n    }\n}\n// ',' = \\x44\nexports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c)=>c !== 44);\nexports.MAJOR = exports.NUM_MAP;\nexports.MINOR = exports.MAJOR;\nvar HEADER_STATE;\n(function(HEADER_STATE) {\n    HEADER_STATE[HEADER_STATE[\"GENERAL\"] = 0] = \"GENERAL\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION\"] = 1] = \"CONNECTION\";\n    HEADER_STATE[HEADER_STATE[\"CONTENT_LENGTH\"] = 2] = \"CONTENT_LENGTH\";\n    HEADER_STATE[HEADER_STATE[\"TRANSFER_ENCODING\"] = 3] = \"TRANSFER_ENCODING\";\n    HEADER_STATE[HEADER_STATE[\"UPGRADE\"] = 4] = \"UPGRADE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_KEEP_ALIVE\"] = 5] = \"CONNECTION_KEEP_ALIVE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_CLOSE\"] = 6] = \"CONNECTION_CLOSE\";\n    HEADER_STATE[HEADER_STATE[\"CONNECTION_UPGRADE\"] = 7] = \"CONNECTION_UPGRADE\";\n    HEADER_STATE[HEADER_STATE[\"TRANSFER_ENCODING_CHUNKED\"] = 8] = \"TRANSFER_ENCODING_CHUNKED\";\n})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));\nexports.SPECIAL_HEADERS = {\n    \"connection\": HEADER_STATE.CONNECTION,\n    \"content-length\": HEADER_STATE.CONTENT_LENGTH,\n    \"proxy-connection\": HEADER_STATE.CONNECTION,\n    \"transfer-encoding\": HEADER_STATE.TRANSFER_ENCODING,\n    \"upgrade\": HEADER_STATE.UPGRADE\n}; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/llhttp-wasm.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("module.exports = \"\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/llhttp-wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js":
/*!************************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js ***!
  \************************************************************/
/***/ ((module) => {

eval("module.exports = \"\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/llhttp_simd-wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/llhttp/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/undici/lib/llhttp/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.enumToMap = void 0;\nfunction enumToMap(obj) {\n    const res = {};\n    Object.keys(obj).forEach((key)=>{\n        const value = obj[key];\n        if (typeof value === \"number\") {\n            res[key] = value;\n        }\n    });\n    return res;\n}\nexports.enumToMap = enumToMap; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9sbGh0dHAvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsU0FBU0UsVUFBVUMsR0FBRztJQUNsQixNQUFNQyxNQUFNLENBQUM7SUFDYk4sT0FBT08sSUFBSSxDQUFDRixLQUFLRyxPQUFPLENBQUMsQ0FBQ0M7UUFDdEIsTUFBTU4sUUFBUUUsR0FBRyxDQUFDSSxJQUFJO1FBQ3RCLElBQUksT0FBT04sVUFBVSxVQUFVO1lBQzNCRyxHQUFHLENBQUNHLElBQUksR0FBR047UUFDZjtJQUNKO0lBQ0EsT0FBT0c7QUFDWDtBQUNBSixpQkFBaUIsR0FBR0UsV0FDcEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvbGxodHRwL3V0aWxzLmpzP2NjZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVudW1Ub01hcCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGVudW1Ub01hcChvYmopIHtcbiAgICBjb25zdCByZXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmVudW1Ub01hcCA9IGVudW1Ub01hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1Ub01hcCIsIm9iaiIsInJlcyIsImtleXMiLCJmb3JFYWNoIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/llhttp/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-agent.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-agent.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { kClients } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst Agent = __webpack_require__(/*! ../agent */ \"(ssr)/./node_modules/undici/lib/agent.js\");\nconst { kAgent, kMockAgentSet, kMockAgentGet, kDispatches, kIsMockActive, kNetConnect, kGetNetConnect, kOptions, kFactory } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst MockClient = __webpack_require__(/*! ./mock-client */ \"(ssr)/./node_modules/undici/lib/mock/mock-client.js\");\nconst MockPool = __webpack_require__(/*! ./mock-pool */ \"(ssr)/./node_modules/undici/lib/mock/mock-pool.js\");\nconst { matchValue, buildMockOptions } = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst { InvalidArgumentError, UndiciError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst Dispatcher = __webpack_require__(/*! ../dispatcher */ \"(ssr)/./node_modules/undici/lib/dispatcher.js\");\nconst Pluralizer = __webpack_require__(/*! ./pluralizer */ \"(ssr)/./node_modules/undici/lib/mock/pluralizer.js\");\nconst PendingInterceptorsFormatter = __webpack_require__(/*! ./pending-interceptors-formatter */ \"(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js\");\nclass FakeWeakRef {\n    constructor(value){\n        this.value = value;\n    }\n    deref() {\n        return this.value;\n    }\n}\nclass MockAgent extends Dispatcher {\n    constructor(opts){\n        super(opts);\n        this[kNetConnect] = true;\n        this[kIsMockActive] = true;\n        // Instantiate Agent and encapsulate\n        if (opts && opts.agent && typeof opts.agent.dispatch !== \"function\") {\n            throw new InvalidArgumentError(\"Argument opts.agent must implement Agent\");\n        }\n        const agent = opts && opts.agent ? opts.agent : new Agent(opts);\n        this[kAgent] = agent;\n        this[kClients] = agent[kClients];\n        this[kOptions] = buildMockOptions(opts);\n    }\n    get(origin) {\n        let dispatcher = this[kMockAgentGet](origin);\n        if (!dispatcher) {\n            dispatcher = this[kFactory](origin);\n            this[kMockAgentSet](origin, dispatcher);\n        }\n        return dispatcher;\n    }\n    dispatch(opts, handler) {\n        // Call MockAgent.get to perform additional setup before dispatching as normal\n        this.get(opts.origin);\n        return this[kAgent].dispatch(opts, handler);\n    }\n    async close() {\n        await this[kAgent].close();\n        this[kClients].clear();\n    }\n    deactivate() {\n        this[kIsMockActive] = false;\n    }\n    activate() {\n        this[kIsMockActive] = true;\n    }\n    enableNetConnect(matcher) {\n        if (typeof matcher === \"string\" || typeof matcher === \"function\" || matcher instanceof RegExp) {\n            if (Array.isArray(this[kNetConnect])) {\n                this[kNetConnect].push(matcher);\n            } else {\n                this[kNetConnect] = [\n                    matcher\n                ];\n            }\n        } else if (typeof matcher === \"undefined\") {\n            this[kNetConnect] = true;\n        } else {\n            throw new InvalidArgumentError(\"Unsupported matcher. Must be one of String|Function|RegExp.\");\n        }\n    }\n    disableNetConnect() {\n        this[kNetConnect] = false;\n    }\n    // This is required to bypass issues caused by using global symbols - see:\n    // https://github.com/nodejs/undici/issues/1447\n    get isMockActive() {\n        return this[kIsMockActive];\n    }\n    [kMockAgentSet](origin, dispatcher) {\n        this[kClients].set(origin, new FakeWeakRef(dispatcher));\n    }\n    [kFactory](origin) {\n        const mockOptions = Object.assign({\n            agent: this\n        }, this[kOptions]);\n        return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);\n    }\n    [kMockAgentGet](origin) {\n        // First check if we can immediately find it\n        const ref = this[kClients].get(origin);\n        if (ref) {\n            return ref.deref();\n        }\n        // If the origin is not a string create a dummy parent pool and return to user\n        if (typeof origin !== \"string\") {\n            const dispatcher = this[kFactory](\"http://localhost:9999\");\n            this[kMockAgentSet](origin, dispatcher);\n            return dispatcher;\n        }\n        // If we match, create a pool and assign the same dispatches\n        for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])){\n            const nonExplicitDispatcher = nonExplicitRef.deref();\n            if (nonExplicitDispatcher && typeof keyMatcher !== \"string\" && matchValue(keyMatcher, origin)) {\n                const dispatcher = this[kFactory](origin);\n                this[kMockAgentSet](origin, dispatcher);\n                dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];\n                return dispatcher;\n            }\n        }\n    }\n    [kGetNetConnect]() {\n        return this[kNetConnect];\n    }\n    pendingInterceptors() {\n        const mockAgentClients = this[kClients];\n        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope])=>scope.deref()[kDispatches].map((dispatch)=>({\n                    ...dispatch,\n                    origin\n                }))).filter(({ pending })=>pending);\n    }\n    assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {\n        const pending = this.pendingInterceptors();\n        if (pending.length === 0) {\n            return;\n        }\n        const pluralizer = new Pluralizer(\"interceptor\", \"interceptors\").pluralize(pending.length);\n        throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim());\n    }\n}\nmodule.exports = MockAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-client.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-client.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst Client = __webpack_require__(/*! ../client */ \"(ssr)/./node_modules/undici/lib/client.js\");\nconst { buildMockDispatch } = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst { kDispatches, kMockAgent, kClose, kOriginalClose, kOrigin, kOriginalDispatch, kConnected } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst { MockInterceptor } = __webpack_require__(/*! ./mock-interceptor */ \"(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\");\nconst Symbols = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\n/**\n * MockClient provides an API that extends the Client to influence the mockDispatches.\n */ class MockClient extends Client {\n    constructor(origin, opts){\n        super(origin, opts);\n        if (!opts || !opts.agent || typeof opts.agent.dispatch !== \"function\") {\n            throw new InvalidArgumentError(\"Argument opts.agent must implement Agent\");\n        }\n        this[kMockAgent] = opts.agent;\n        this[kOrigin] = origin;\n        this[kDispatches] = [];\n        this[kConnected] = 1;\n        this[kOriginalDispatch] = this.dispatch;\n        this[kOriginalClose] = this.close.bind(this);\n        this.dispatch = buildMockDispatch.call(this);\n        this.close = this[kClose];\n    }\n    get [Symbols.kConnected]() {\n        return this[kConnected];\n    }\n    /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */ intercept(opts) {\n        return new MockInterceptor(opts, this[kDispatches]);\n    }\n    async [kClose]() {\n        await promisify(this[kOriginalClose])();\n        this[kConnected] = 0;\n        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);\n    }\n}\nmodule.exports = MockClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxTQUFTLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFDOUIsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDdkIsTUFBTSxFQUFFRSxpQkFBaUIsRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUN0QyxNQUFNLEVBQ0pHLFdBQVcsRUFDWEMsVUFBVSxFQUNWQyxNQUFNLEVBQ05DLGNBQWMsRUFDZEMsT0FBTyxFQUNQQyxpQkFBaUIsRUFDakJDLFVBQVUsRUFDWCxHQUFHVCxtQkFBT0EsQ0FBQztBQUNaLE1BQU0sRUFBRVUsZUFBZSxFQUFFLEdBQUdWLG1CQUFPQSxDQUFDO0FBQ3BDLE1BQU1XLFVBQVVYLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU0sRUFBRVksb0JBQW9CLEVBQUUsR0FBR1osbUJBQU9BLENBQUM7QUFFekM7O0NBRUMsR0FDRCxNQUFNYSxtQkFBbUJaO0lBQ3ZCYSxZQUFhQyxNQUFNLEVBQUVDLElBQUksQ0FBRTtRQUN6QixLQUFLLENBQUNELFFBQVFDO1FBRWQsSUFBSSxDQUFDQSxRQUFRLENBQUNBLEtBQUtDLEtBQUssSUFBSSxPQUFPRCxLQUFLQyxLQUFLLENBQUNDLFFBQVEsS0FBSyxZQUFZO1lBQ3JFLE1BQU0sSUFBSU4scUJBQXFCO1FBQ2pDO1FBRUEsSUFBSSxDQUFDUixXQUFXLEdBQUdZLEtBQUtDLEtBQUs7UUFDN0IsSUFBSSxDQUFDVixRQUFRLEdBQUdRO1FBQ2hCLElBQUksQ0FBQ1osWUFBWSxHQUFHLEVBQUU7UUFDdEIsSUFBSSxDQUFDTSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDRCxrQkFBa0IsR0FBRyxJQUFJLENBQUNVLFFBQVE7UUFDdkMsSUFBSSxDQUFDWixlQUFlLEdBQUcsSUFBSSxDQUFDYSxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJO1FBRTNDLElBQUksQ0FBQ0YsUUFBUSxHQUFHaEIsa0JBQWtCbUIsSUFBSSxDQUFDLElBQUk7UUFDM0MsSUFBSSxDQUFDRixLQUFLLEdBQUcsSUFBSSxDQUFDZCxPQUFPO0lBQzNCO0lBRUEsSUFBSSxDQUFDTSxRQUFRRixVQUFVLENBQUMsR0FBSTtRQUMxQixPQUFPLElBQUksQ0FBQ0EsV0FBVztJQUN6QjtJQUVBOztHQUVDLEdBQ0RhLFVBQVdOLElBQUksRUFBRTtRQUNmLE9BQU8sSUFBSU4sZ0JBQWdCTSxNQUFNLElBQUksQ0FBQ2IsWUFBWTtJQUNwRDtJQUVBLE1BQU0sQ0FBQ0UsT0FBTyxHQUFJO1FBQ2hCLE1BQU1OLFVBQVUsSUFBSSxDQUFDTyxlQUFlO1FBQ3BDLElBQUksQ0FBQ0csV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0wsV0FBVyxDQUFDTyxRQUFRWSxRQUFRLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQ2pCLFFBQVE7SUFDekQ7QUFDRjtBQUVBa0IsT0FBT0MsT0FBTyxHQUFHYiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL21vY2svbW9jay1jbGllbnQuanM/Yzc2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBwcm9taXNpZnkgfSA9IHJlcXVpcmUoJ3V0aWwnKVxuY29uc3QgQ2xpZW50ID0gcmVxdWlyZSgnLi4vY2xpZW50JylcbmNvbnN0IHsgYnVpbGRNb2NrRGlzcGF0Y2ggfSA9IHJlcXVpcmUoJy4vbW9jay11dGlscycpXG5jb25zdCB7XG4gIGtEaXNwYXRjaGVzLFxuICBrTW9ja0FnZW50LFxuICBrQ2xvc2UsXG4gIGtPcmlnaW5hbENsb3NlLFxuICBrT3JpZ2luLFxuICBrT3JpZ2luYWxEaXNwYXRjaCxcbiAga0Nvbm5lY3RlZFxufSA9IHJlcXVpcmUoJy4vbW9jay1zeW1ib2xzJylcbmNvbnN0IHsgTW9ja0ludGVyY2VwdG9yIH0gPSByZXF1aXJlKCcuL21vY2staW50ZXJjZXB0b3InKVxuY29uc3QgU3ltYm9scyA9IHJlcXVpcmUoJy4uL2NvcmUvc3ltYm9scycpXG5jb25zdCB7IEludmFsaWRBcmd1bWVudEVycm9yIH0gPSByZXF1aXJlKCcuLi9jb3JlL2Vycm9ycycpXG5cbi8qKlxuICogTW9ja0NsaWVudCBwcm92aWRlcyBhbiBBUEkgdGhhdCBleHRlbmRzIHRoZSBDbGllbnQgdG8gaW5mbHVlbmNlIHRoZSBtb2NrRGlzcGF0Y2hlcy5cbiAqL1xuY2xhc3MgTW9ja0NsaWVudCBleHRlbmRzIENsaWVudCB7XG4gIGNvbnN0cnVjdG9yIChvcmlnaW4sIG9wdHMpIHtcbiAgICBzdXBlcihvcmlnaW4sIG9wdHMpXG5cbiAgICBpZiAoIW9wdHMgfHwgIW9wdHMuYWdlbnQgfHwgdHlwZW9mIG9wdHMuYWdlbnQuZGlzcGF0Y2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignQXJndW1lbnQgb3B0cy5hZ2VudCBtdXN0IGltcGxlbWVudCBBZ2VudCcpXG4gICAgfVxuXG4gICAgdGhpc1trTW9ja0FnZW50XSA9IG9wdHMuYWdlbnRcbiAgICB0aGlzW2tPcmlnaW5dID0gb3JpZ2luXG4gICAgdGhpc1trRGlzcGF0Y2hlc10gPSBbXVxuICAgIHRoaXNba0Nvbm5lY3RlZF0gPSAxXG4gICAgdGhpc1trT3JpZ2luYWxEaXNwYXRjaF0gPSB0aGlzLmRpc3BhdGNoXG4gICAgdGhpc1trT3JpZ2luYWxDbG9zZV0gPSB0aGlzLmNsb3NlLmJpbmQodGhpcylcblxuICAgIHRoaXMuZGlzcGF0Y2ggPSBidWlsZE1vY2tEaXNwYXRjaC5jYWxsKHRoaXMpXG4gICAgdGhpcy5jbG9zZSA9IHRoaXNba0Nsb3NlXVxuICB9XG5cbiAgZ2V0IFtTeW1ib2xzLmtDb25uZWN0ZWRdICgpIHtcbiAgICByZXR1cm4gdGhpc1trQ29ubmVjdGVkXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgdGhlIGJhc2UgaW50ZXJjZXB0b3IgZm9yIG1vY2tpbmcgcmVwbGllcyBmcm9tIHVuZGljaS5cbiAgICovXG4gIGludGVyY2VwdCAob3B0cykge1xuICAgIHJldHVybiBuZXcgTW9ja0ludGVyY2VwdG9yKG9wdHMsIHRoaXNba0Rpc3BhdGNoZXNdKVxuICB9XG5cbiAgYXN5bmMgW2tDbG9zZV0gKCkge1xuICAgIGF3YWl0IHByb21pc2lmeSh0aGlzW2tPcmlnaW5hbENsb3NlXSkoKVxuICAgIHRoaXNba0Nvbm5lY3RlZF0gPSAwXG4gICAgdGhpc1trTW9ja0FnZW50XVtTeW1ib2xzLmtDbGllbnRzXS5kZWxldGUodGhpc1trT3JpZ2luXSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vY2tDbGllbnRcbiJdLCJuYW1lcyI6WyJwcm9taXNpZnkiLCJyZXF1aXJlIiwiQ2xpZW50IiwiYnVpbGRNb2NrRGlzcGF0Y2giLCJrRGlzcGF0Y2hlcyIsImtNb2NrQWdlbnQiLCJrQ2xvc2UiLCJrT3JpZ2luYWxDbG9zZSIsImtPcmlnaW4iLCJrT3JpZ2luYWxEaXNwYXRjaCIsImtDb25uZWN0ZWQiLCJNb2NrSW50ZXJjZXB0b3IiLCJTeW1ib2xzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJNb2NrQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcmlnaW4iLCJvcHRzIiwiYWdlbnQiLCJkaXNwYXRjaCIsImNsb3NlIiwiYmluZCIsImNhbGwiLCJpbnRlcmNlcHQiLCJrQ2xpZW50cyIsImRlbGV0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-errors.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { UndiciError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nclass MockNotMatchedError extends UndiciError {\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, MockNotMatchedError);\n        this.name = \"MockNotMatchedError\";\n        this.message = message || \"The request does not match any registered mock dispatches\";\n        this.code = \"UND_MOCK_ERR_MOCK_NOT_MATCHED\";\n    }\n}\nmodule.exports = {\n    MockNotMatchedError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxXQUFXLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFaEMsTUFBTUMsNEJBQTRCRjtJQUNoQ0csWUFBYUMsT0FBTyxDQUFFO1FBQ3BCLEtBQUssQ0FBQ0E7UUFDTkMsTUFBTUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFSjtRQUM5QixJQUFJLENBQUNLLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0gsT0FBTyxHQUFHQSxXQUFXO1FBQzFCLElBQUksQ0FBQ0ksSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFDZlI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL21vY2svbW9jay1lcnJvcnMuanM/ODUwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBVbmRpY2lFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuXG5jbGFzcyBNb2NrTm90TWF0Y2hlZEVycm9yIGV4dGVuZHMgVW5kaWNpRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgTW9ja05vdE1hdGNoZWRFcnJvcilcbiAgICB0aGlzLm5hbWUgPSAnTW9ja05vdE1hdGNoZWRFcnJvcidcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdUaGUgcmVxdWVzdCBkb2VzIG5vdCBtYXRjaCBhbnkgcmVnaXN0ZXJlZCBtb2NrIGRpc3BhdGNoZXMnXG4gICAgdGhpcy5jb2RlID0gJ1VORF9NT0NLX0VSUl9NT0NLX05PVF9NQVRDSEVEJ1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBNb2NrTm90TWF0Y2hlZEVycm9yXG59XG4iXSwibmFtZXMiOlsiVW5kaWNpRXJyb3IiLCJyZXF1aXJlIiwiTW9ja05vdE1hdGNoZWRFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJuYW1lIiwiY29kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js":
/*!**********************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-interceptor.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { getResponseData, buildKey, addMockDispatch } = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst { kDispatches, kDispatchKey, kDefaultHeaders, kDefaultTrailers, kContentLength, kMockDispatch } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst { buildURL } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\n/**\n * Defines the scope API for an interceptor reply\n */ class MockScope {\n    constructor(mockDispatch){\n        this[kMockDispatch] = mockDispatch;\n    }\n    /**\n   * Delay a reply by a set amount in ms.\n   */ delay(waitInMs) {\n        if (typeof waitInMs !== \"number\" || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n            throw new InvalidArgumentError(\"waitInMs must be a valid integer > 0\");\n        }\n        this[kMockDispatch].delay = waitInMs;\n        return this;\n    }\n    /**\n   * For a defined reply, never mark as consumed.\n   */ persist() {\n        this[kMockDispatch].persist = true;\n        return this;\n    }\n    /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */ times(repeatTimes) {\n        if (typeof repeatTimes !== \"number\" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n            throw new InvalidArgumentError(\"repeatTimes must be a valid integer > 0\");\n        }\n        this[kMockDispatch].times = repeatTimes;\n        return this;\n    }\n}\n/**\n * Defines an interceptor for a Mock\n */ class MockInterceptor {\n    constructor(opts, mockDispatches){\n        if (typeof opts !== \"object\") {\n            throw new InvalidArgumentError(\"opts must be an object\");\n        }\n        if (typeof opts.path === \"undefined\") {\n            throw new InvalidArgumentError(\"opts.path must be defined\");\n        }\n        if (typeof opts.method === \"undefined\") {\n            opts.method = \"GET\";\n        }\n        // See https://github.com/nodejs/undici/issues/1245\n        // As per RFC 3986, clients are not supposed to send URI\n        // fragments to servers when they retrieve a document,\n        if (typeof opts.path === \"string\") {\n            if (opts.query) {\n                opts.path = buildURL(opts.path, opts.query);\n            } else {\n                // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811\n                const parsedURL = new URL(opts.path, \"data://\");\n                opts.path = parsedURL.pathname + parsedURL.search;\n            }\n        }\n        if (typeof opts.method === \"string\") {\n            opts.method = opts.method.toUpperCase();\n        }\n        this[kDispatchKey] = buildKey(opts);\n        this[kDispatches] = mockDispatches;\n        this[kDefaultHeaders] = {};\n        this[kDefaultTrailers] = {};\n        this[kContentLength] = false;\n    }\n    createMockScopeDispatchData(statusCode, data, responseOptions = {}) {\n        const responseData = getResponseData(data);\n        const contentLength = this[kContentLength] ? {\n            \"content-length\": responseData.length\n        } : {};\n        const headers = {\n            ...this[kDefaultHeaders],\n            ...contentLength,\n            ...responseOptions.headers\n        };\n        const trailers = {\n            ...this[kDefaultTrailers],\n            ...responseOptions.trailers\n        };\n        return {\n            statusCode,\n            data,\n            headers,\n            trailers\n        };\n    }\n    validateReplyParameters(statusCode, data, responseOptions) {\n        if (typeof statusCode === \"undefined\") {\n            throw new InvalidArgumentError(\"statusCode must be defined\");\n        }\n        if (typeof data === \"undefined\") {\n            throw new InvalidArgumentError(\"data must be defined\");\n        }\n        if (typeof responseOptions !== \"object\") {\n            throw new InvalidArgumentError(\"responseOptions must be an object\");\n        }\n    }\n    /**\n   * Mock an undici request with a defined reply.\n   */ reply(replyData) {\n        // Values of reply aren't available right now as they\n        // can only be available when the reply callback is invoked.\n        if (typeof replyData === \"function\") {\n            // We'll first wrap the provided callback in another function,\n            // this function will properly resolve the data from the callback\n            // when invoked.\n            const wrappedDefaultsCallback = (opts)=>{\n                // Our reply options callback contains the parameter for statusCode, data and options.\n                const resolvedData = replyData(opts);\n                // Check if it is in the right format\n                if (typeof resolvedData !== \"object\") {\n                    throw new InvalidArgumentError(\"reply options callback must return an object\");\n                }\n                const { statusCode, data = \"\", responseOptions = {} } = resolvedData;\n                this.validateReplyParameters(statusCode, data, responseOptions);\n                // Since the values can be obtained immediately we return them\n                // from this higher order function that will be resolved later.\n                return {\n                    ...this.createMockScopeDispatchData(statusCode, data, responseOptions)\n                };\n            };\n            // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n            const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);\n            return new MockScope(newMockDispatch);\n        }\n        // We can have either one or three parameters, if we get here,\n        // we should have 1-3 parameters. So we spread the arguments of\n        // this function to obtain the parameters, since replyData will always\n        // just be the statusCode.\n        const [statusCode, data = \"\", responseOptions = {}] = [\n            ...arguments\n        ];\n        this.validateReplyParameters(statusCode, data, responseOptions);\n        // Send in-already provided data like usual\n        const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);\n        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);\n        return new MockScope(newMockDispatch);\n    }\n    /**\n   * Mock an undici request with a defined error.\n   */ replyWithError(error) {\n        if (typeof error === \"undefined\") {\n            throw new InvalidArgumentError(\"error must be defined\");\n        }\n        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], {\n            error\n        });\n        return new MockScope(newMockDispatch);\n    }\n    /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */ defaultReplyHeaders(headers) {\n        if (typeof headers === \"undefined\") {\n            throw new InvalidArgumentError(\"headers must be defined\");\n        }\n        this[kDefaultHeaders] = headers;\n        return this;\n    }\n    /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */ defaultReplyTrailers(trailers) {\n        if (typeof trailers === \"undefined\") {\n            throw new InvalidArgumentError(\"trailers must be defined\");\n        }\n        this[kDefaultTrailers] = trailers;\n        return this;\n    }\n    /**\n   * Set reply content length header for replies on the interceptor\n   */ replyContentLength() {\n        this[kContentLength] = true;\n        return this;\n    }\n}\nmodule.exports.MockInterceptor = MockInterceptor;\nmodule.exports.MockScope = MockScope;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2staW50ZXJjZXB0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLGVBQWUsRUFBRUMsUUFBUSxFQUFFQyxlQUFlLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFDL0QsTUFBTSxFQUNKQyxXQUFXLEVBQ1hDLFlBQVksRUFDWkMsZUFBZSxFQUNmQyxnQkFBZ0IsRUFDaEJDLGNBQWMsRUFDZEMsYUFBYSxFQUNkLEdBQUdOLG1CQUFPQSxDQUFDO0FBQ1osTUFBTSxFQUFFTyxvQkFBb0IsRUFBRSxHQUFHUCxtQkFBT0EsQ0FBQztBQUN6QyxNQUFNLEVBQUVRLFFBQVEsRUFBRSxHQUFHUixtQkFBT0EsQ0FBQztBQUU3Qjs7Q0FFQyxHQUNELE1BQU1TO0lBQ0pDLFlBQWFDLFlBQVksQ0FBRTtRQUN6QixJQUFJLENBQUNMLGNBQWMsR0FBR0s7SUFDeEI7SUFFQTs7R0FFQyxHQUNEQyxNQUFPQyxRQUFRLEVBQUU7UUFDZixJQUFJLE9BQU9BLGFBQWEsWUFBWSxDQUFDQyxPQUFPQyxTQUFTLENBQUNGLGFBQWFBLFlBQVksR0FBRztZQUNoRixNQUFNLElBQUlOLHFCQUFxQjtRQUNqQztRQUVBLElBQUksQ0FBQ0QsY0FBYyxDQUFDTSxLQUFLLEdBQUdDO1FBQzVCLE9BQU8sSUFBSTtJQUNiO0lBRUE7O0dBRUMsR0FDREcsVUFBVztRQUNULElBQUksQ0FBQ1YsY0FBYyxDQUFDVSxPQUFPLEdBQUc7UUFDOUIsT0FBTyxJQUFJO0lBQ2I7SUFFQTs7R0FFQyxHQUNEQyxNQUFPQyxXQUFXLEVBQUU7UUFDbEIsSUFBSSxPQUFPQSxnQkFBZ0IsWUFBWSxDQUFDSixPQUFPQyxTQUFTLENBQUNHLGdCQUFnQkEsZUFBZSxHQUFHO1lBQ3pGLE1BQU0sSUFBSVgscUJBQXFCO1FBQ2pDO1FBRUEsSUFBSSxDQUFDRCxjQUFjLENBQUNXLEtBQUssR0FBR0M7UUFDNUIsT0FBTyxJQUFJO0lBQ2I7QUFDRjtBQUVBOztDQUVDLEdBQ0QsTUFBTUM7SUFDSlQsWUFBYVUsSUFBSSxFQUFFQyxjQUFjLENBQUU7UUFDakMsSUFBSSxPQUFPRCxTQUFTLFVBQVU7WUFDNUIsTUFBTSxJQUFJYixxQkFBcUI7UUFDakM7UUFDQSxJQUFJLE9BQU9hLEtBQUtFLElBQUksS0FBSyxhQUFhO1lBQ3BDLE1BQU0sSUFBSWYscUJBQXFCO1FBQ2pDO1FBQ0EsSUFBSSxPQUFPYSxLQUFLRyxNQUFNLEtBQUssYUFBYTtZQUN0Q0gsS0FBS0csTUFBTSxHQUFHO1FBQ2hCO1FBQ0EsbURBQW1EO1FBQ25ELHdEQUF3RDtRQUN4RCxzREFBc0Q7UUFDdEQsSUFBSSxPQUFPSCxLQUFLRSxJQUFJLEtBQUssVUFBVTtZQUNqQyxJQUFJRixLQUFLSSxLQUFLLEVBQUU7Z0JBQ2RKLEtBQUtFLElBQUksR0FBR2QsU0FBU1ksS0FBS0UsSUFBSSxFQUFFRixLQUFLSSxLQUFLO1lBQzVDLE9BQU87Z0JBQ0wsOEVBQThFO2dCQUM5RSxNQUFNQyxZQUFZLElBQUlDLElBQUlOLEtBQUtFLElBQUksRUFBRTtnQkFDckNGLEtBQUtFLElBQUksR0FBR0csVUFBVUUsUUFBUSxHQUFHRixVQUFVRyxNQUFNO1lBQ25EO1FBQ0Y7UUFDQSxJQUFJLE9BQU9SLEtBQUtHLE1BQU0sS0FBSyxVQUFVO1lBQ25DSCxLQUFLRyxNQUFNLEdBQUdILEtBQUtHLE1BQU0sQ0FBQ00sV0FBVztRQUN2QztRQUVBLElBQUksQ0FBQzNCLGFBQWEsR0FBR0osU0FBU3NCO1FBQzlCLElBQUksQ0FBQ25CLFlBQVksR0FBR29CO1FBQ3BCLElBQUksQ0FBQ2xCLGdCQUFnQixHQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxDQUFDO1FBQzFCLElBQUksQ0FBQ0MsZUFBZSxHQUFHO0lBQ3pCO0lBRUF5Qiw0QkFBNkJDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUU7UUFDbkUsTUFBTUMsZUFBZXJDLGdCQUFnQm1DO1FBQ3JDLE1BQU1HLGdCQUFnQixJQUFJLENBQUM5QixlQUFlLEdBQUc7WUFBRSxrQkFBa0I2QixhQUFhRSxNQUFNO1FBQUMsSUFBSSxDQUFDO1FBQzFGLE1BQU1DLFVBQVU7WUFBRSxHQUFHLElBQUksQ0FBQ2xDLGdCQUFnQjtZQUFFLEdBQUdnQyxhQUFhO1lBQUUsR0FBR0YsZ0JBQWdCSSxPQUFPO1FBQUM7UUFDekYsTUFBTUMsV0FBVztZQUFFLEdBQUcsSUFBSSxDQUFDbEMsaUJBQWlCO1lBQUUsR0FBRzZCLGdCQUFnQkssUUFBUTtRQUFDO1FBRTFFLE9BQU87WUFBRVA7WUFBWUM7WUFBTUs7WUFBU0M7UUFBUztJQUMvQztJQUVBQyx3QkFBeUJSLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxlQUFlLEVBQUU7UUFDMUQsSUFBSSxPQUFPRixlQUFlLGFBQWE7WUFDckMsTUFBTSxJQUFJeEIscUJBQXFCO1FBQ2pDO1FBQ0EsSUFBSSxPQUFPeUIsU0FBUyxhQUFhO1lBQy9CLE1BQU0sSUFBSXpCLHFCQUFxQjtRQUNqQztRQUNBLElBQUksT0FBTzBCLG9CQUFvQixVQUFVO1lBQ3ZDLE1BQU0sSUFBSTFCLHFCQUFxQjtRQUNqQztJQUNGO0lBRUE7O0dBRUMsR0FDRGlDLE1BQU9DLFNBQVMsRUFBRTtRQUNoQixxREFBcUQ7UUFDckQsNERBQTREO1FBQzVELElBQUksT0FBT0EsY0FBYyxZQUFZO1lBQ25DLDhEQUE4RDtZQUM5RCxpRUFBaUU7WUFDakUsZ0JBQWdCO1lBQ2hCLE1BQU1DLDBCQUEwQixDQUFDdEI7Z0JBQy9CLHNGQUFzRjtnQkFDdEYsTUFBTXVCLGVBQWVGLFVBQVVyQjtnQkFFL0IscUNBQXFDO2dCQUNyQyxJQUFJLE9BQU91QixpQkFBaUIsVUFBVTtvQkFDcEMsTUFBTSxJQUFJcEMscUJBQXFCO2dCQUNqQztnQkFFQSxNQUFNLEVBQUV3QixVQUFVLEVBQUVDLE9BQU8sRUFBRSxFQUFFQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsR0FBR1U7Z0JBQ3hELElBQUksQ0FBQ0osdUJBQXVCLENBQUNSLFlBQVlDLE1BQU1DO2dCQUMvQyw4REFBOEQ7Z0JBQzlELCtEQUErRDtnQkFDL0QsT0FBTztvQkFDTCxHQUFHLElBQUksQ0FBQ0gsMkJBQTJCLENBQUNDLFlBQVlDLE1BQU1DLGdCQUFnQjtnQkFDeEU7WUFDRjtZQUVBLCtHQUErRztZQUMvRyxNQUFNVyxrQkFBa0I3QyxnQkFBZ0IsSUFBSSxDQUFDRSxZQUFZLEVBQUUsSUFBSSxDQUFDQyxhQUFhLEVBQUV3QztZQUMvRSxPQUFPLElBQUlqQyxVQUFVbUM7UUFDdkI7UUFFQSw4REFBOEQ7UUFDOUQsK0RBQStEO1FBQy9ELHNFQUFzRTtRQUN0RSwwQkFBMEI7UUFDMUIsTUFBTSxDQUFDYixZQUFZQyxPQUFPLEVBQUUsRUFBRUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEdBQUc7ZUFBSVk7U0FBVTtRQUNwRSxJQUFJLENBQUNOLHVCQUF1QixDQUFDUixZQUFZQyxNQUFNQztRQUUvQywyQ0FBMkM7UUFDM0MsTUFBTWEsZUFBZSxJQUFJLENBQUNoQiwyQkFBMkIsQ0FBQ0MsWUFBWUMsTUFBTUM7UUFDeEUsTUFBTVcsa0JBQWtCN0MsZ0JBQWdCLElBQUksQ0FBQ0UsWUFBWSxFQUFFLElBQUksQ0FBQ0MsYUFBYSxFQUFFNEM7UUFDL0UsT0FBTyxJQUFJckMsVUFBVW1DO0lBQ3ZCO0lBRUE7O0dBRUMsR0FDREcsZUFBZ0JDLEtBQUssRUFBRTtRQUNyQixJQUFJLE9BQU9BLFVBQVUsYUFBYTtZQUNoQyxNQUFNLElBQUl6QyxxQkFBcUI7UUFDakM7UUFFQSxNQUFNcUMsa0JBQWtCN0MsZ0JBQWdCLElBQUksQ0FBQ0UsWUFBWSxFQUFFLElBQUksQ0FBQ0MsYUFBYSxFQUFFO1lBQUU4QztRQUFNO1FBQ3ZGLE9BQU8sSUFBSXZDLFVBQVVtQztJQUN2QjtJQUVBOztHQUVDLEdBQ0RLLG9CQUFxQlosT0FBTyxFQUFFO1FBQzVCLElBQUksT0FBT0EsWUFBWSxhQUFhO1lBQ2xDLE1BQU0sSUFBSTlCLHFCQUFxQjtRQUNqQztRQUVBLElBQUksQ0FBQ0osZ0JBQWdCLEdBQUdrQztRQUN4QixPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0RhLHFCQUFzQlosUUFBUSxFQUFFO1FBQzlCLElBQUksT0FBT0EsYUFBYSxhQUFhO1lBQ25DLE1BQU0sSUFBSS9CLHFCQUFxQjtRQUNqQztRQUVBLElBQUksQ0FBQ0gsaUJBQWlCLEdBQUdrQztRQUN6QixPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0RhLHFCQUFzQjtRQUNwQixJQUFJLENBQUM5QyxlQUFlLEdBQUc7UUFDdkIsT0FBTyxJQUFJO0lBQ2I7QUFDRjtBQUVBK0MsOEJBQThCLEdBQUdqQztBQUNqQ2lDLHdCQUF3QixHQUFHM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2staW50ZXJjZXB0b3IuanM/YmNlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBnZXRSZXNwb25zZURhdGEsIGJ1aWxkS2V5LCBhZGRNb2NrRGlzcGF0Y2ggfSA9IHJlcXVpcmUoJy4vbW9jay11dGlscycpXG5jb25zdCB7XG4gIGtEaXNwYXRjaGVzLFxuICBrRGlzcGF0Y2hLZXksXG4gIGtEZWZhdWx0SGVhZGVycyxcbiAga0RlZmF1bHRUcmFpbGVycyxcbiAga0NvbnRlbnRMZW5ndGgsXG4gIGtNb2NrRGlzcGF0Y2hcbn0gPSByZXF1aXJlKCcuL21vY2stc3ltYm9scycpXG5jb25zdCB7IEludmFsaWRBcmd1bWVudEVycm9yIH0gPSByZXF1aXJlKCcuLi9jb3JlL2Vycm9ycycpXG5jb25zdCB7IGJ1aWxkVVJMIH0gPSByZXF1aXJlKCcuLi9jb3JlL3V0aWwnKVxuXG4vKipcbiAqIERlZmluZXMgdGhlIHNjb3BlIEFQSSBmb3IgYW4gaW50ZXJjZXB0b3IgcmVwbHlcbiAqL1xuY2xhc3MgTW9ja1Njb3BlIHtcbiAgY29uc3RydWN0b3IgKG1vY2tEaXNwYXRjaCkge1xuICAgIHRoaXNba01vY2tEaXNwYXRjaF0gPSBtb2NrRGlzcGF0Y2hcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxheSBhIHJlcGx5IGJ5IGEgc2V0IGFtb3VudCBpbiBtcy5cbiAgICovXG4gIGRlbGF5ICh3YWl0SW5Ncykge1xuICAgIGlmICh0eXBlb2Ygd2FpdEluTXMgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHdhaXRJbk1zKSB8fCB3YWl0SW5NcyA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3dhaXRJbk1zIG11c3QgYmUgYSB2YWxpZCBpbnRlZ2VyID4gMCcpXG4gICAgfVxuXG4gICAgdGhpc1trTW9ja0Rpc3BhdGNoXS5kZWxheSA9IHdhaXRJbk1zXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgYSBkZWZpbmVkIHJlcGx5LCBuZXZlciBtYXJrIGFzIGNvbnN1bWVkLlxuICAgKi9cbiAgcGVyc2lzdCAoKSB7XG4gICAgdGhpc1trTW9ja0Rpc3BhdGNoXS5wZXJzaXN0ID0gdHJ1ZVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQWxsb3cgb25lIHRvIGRlZmluZSBhIHJlcGx5IGZvciBhIHNldCBhbW91bnQgb2YgbWF0Y2hpbmcgcmVxdWVzdHMuXG4gICAqL1xuICB0aW1lcyAocmVwZWF0VGltZXMpIHtcbiAgICBpZiAodHlwZW9mIHJlcGVhdFRpbWVzICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihyZXBlYXRUaW1lcykgfHwgcmVwZWF0VGltZXMgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdyZXBlYXRUaW1lcyBtdXN0IGJlIGEgdmFsaWQgaW50ZWdlciA+IDAnKVxuICAgIH1cblxuICAgIHRoaXNba01vY2tEaXNwYXRjaF0udGltZXMgPSByZXBlYXRUaW1lc1xuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIGFuIGludGVyY2VwdG9yIGZvciBhIE1vY2tcbiAqL1xuY2xhc3MgTW9ja0ludGVyY2VwdG9yIHtcbiAgY29uc3RydWN0b3IgKG9wdHMsIG1vY2tEaXNwYXRjaGVzKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdvcHRzIG11c3QgYmUgYW4gb2JqZWN0JylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRzLnBhdGggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ29wdHMucGF0aCBtdXN0IGJlIGRlZmluZWQnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdHMubWV0aG9kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgb3B0cy5tZXRob2QgPSAnR0VUJ1xuICAgIH1cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy91bmRpY2kvaXNzdWVzLzEyNDVcbiAgICAvLyBBcyBwZXIgUkZDIDM5ODYsIGNsaWVudHMgYXJlIG5vdCBzdXBwb3NlZCB0byBzZW5kIFVSSVxuICAgIC8vIGZyYWdtZW50cyB0byBzZXJ2ZXJzIHdoZW4gdGhleSByZXRyaWV2ZSBhIGRvY3VtZW50LFxuICAgIGlmICh0eXBlb2Ygb3B0cy5wYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKG9wdHMucXVlcnkpIHtcbiAgICAgICAgb3B0cy5wYXRoID0gYnVpbGRVUkwob3B0cy5wYXRoLCBvcHRzLnF1ZXJ5KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWF0Y2hlcyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL3VuZGljaS9ibG9iL21haW4vbGliL2ZldGNoL2luZGV4LmpzI0wxODExXG4gICAgICAgIGNvbnN0IHBhcnNlZFVSTCA9IG5ldyBVUkwob3B0cy5wYXRoLCAnZGF0YTovLycpXG4gICAgICAgIG9wdHMucGF0aCA9IHBhcnNlZFVSTC5wYXRobmFtZSArIHBhcnNlZFVSTC5zZWFyY2hcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRzLm1ldGhvZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdHMubWV0aG9kID0gb3B0cy5tZXRob2QudG9VcHBlckNhc2UoKVxuICAgIH1cblxuICAgIHRoaXNba0Rpc3BhdGNoS2V5XSA9IGJ1aWxkS2V5KG9wdHMpXG4gICAgdGhpc1trRGlzcGF0Y2hlc10gPSBtb2NrRGlzcGF0Y2hlc1xuICAgIHRoaXNba0RlZmF1bHRIZWFkZXJzXSA9IHt9XG4gICAgdGhpc1trRGVmYXVsdFRyYWlsZXJzXSA9IHt9XG4gICAgdGhpc1trQ29udGVudExlbmd0aF0gPSBmYWxzZVxuICB9XG5cbiAgY3JlYXRlTW9ja1Njb3BlRGlzcGF0Y2hEYXRhIChzdGF0dXNDb2RlLCBkYXRhLCByZXNwb25zZU9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGdldFJlc3BvbnNlRGF0YShkYXRhKVxuICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSB0aGlzW2tDb250ZW50TGVuZ3RoXSA/IHsgJ2NvbnRlbnQtbGVuZ3RoJzogcmVzcG9uc2VEYXRhLmxlbmd0aCB9IDoge31cbiAgICBjb25zdCBoZWFkZXJzID0geyAuLi50aGlzW2tEZWZhdWx0SGVhZGVyc10sIC4uLmNvbnRlbnRMZW5ndGgsIC4uLnJlc3BvbnNlT3B0aW9ucy5oZWFkZXJzIH1cbiAgICBjb25zdCB0cmFpbGVycyA9IHsgLi4udGhpc1trRGVmYXVsdFRyYWlsZXJzXSwgLi4ucmVzcG9uc2VPcHRpb25zLnRyYWlsZXJzIH1cblxuICAgIHJldHVybiB7IHN0YXR1c0NvZGUsIGRhdGEsIGhlYWRlcnMsIHRyYWlsZXJzIH1cbiAgfVxuXG4gIHZhbGlkYXRlUmVwbHlQYXJhbWV0ZXJzIChzdGF0dXNDb2RlLCBkYXRhLCByZXNwb25zZU9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHN0YXR1c0NvZGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3N0YXR1c0NvZGUgbXVzdCBiZSBkZWZpbmVkJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdkYXRhIG11c3QgYmUgZGVmaW5lZCcpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2VPcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdyZXNwb25zZU9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNb2NrIGFuIHVuZGljaSByZXF1ZXN0IHdpdGggYSBkZWZpbmVkIHJlcGx5LlxuICAgKi9cbiAgcmVwbHkgKHJlcGx5RGF0YSkge1xuICAgIC8vIFZhbHVlcyBvZiByZXBseSBhcmVuJ3QgYXZhaWxhYmxlIHJpZ2h0IG5vdyBhcyB0aGV5XG4gICAgLy8gY2FuIG9ubHkgYmUgYXZhaWxhYmxlIHdoZW4gdGhlIHJlcGx5IGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgaWYgKHR5cGVvZiByZXBseURhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFdlJ2xsIGZpcnN0IHdyYXAgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIGluIGFub3RoZXIgZnVuY3Rpb24sXG4gICAgICAvLyB0aGlzIGZ1bmN0aW9uIHdpbGwgcHJvcGVybHkgcmVzb2x2ZSB0aGUgZGF0YSBmcm9tIHRoZSBjYWxsYmFja1xuICAgICAgLy8gd2hlbiBpbnZva2VkLlxuICAgICAgY29uc3Qgd3JhcHBlZERlZmF1bHRzQ2FsbGJhY2sgPSAob3B0cykgPT4ge1xuICAgICAgICAvLyBPdXIgcmVwbHkgb3B0aW9ucyBjYWxsYmFjayBjb250YWlucyB0aGUgcGFyYW1ldGVyIGZvciBzdGF0dXNDb2RlLCBkYXRhIGFuZCBvcHRpb25zLlxuICAgICAgICBjb25zdCByZXNvbHZlZERhdGEgPSByZXBseURhdGEob3B0cylcblxuICAgICAgICAvLyBDaGVjayBpZiBpdCBpcyBpbiB0aGUgcmlnaHQgZm9ybWF0XG4gICAgICAgIGlmICh0eXBlb2YgcmVzb2x2ZWREYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigncmVwbHkgb3B0aW9ucyBjYWxsYmFjayBtdXN0IHJldHVybiBhbiBvYmplY3QnKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBzdGF0dXNDb2RlLCBkYXRhID0gJycsIHJlc3BvbnNlT3B0aW9ucyA9IHt9IH0gPSByZXNvbHZlZERhdGFcbiAgICAgICAgdGhpcy52YWxpZGF0ZVJlcGx5UGFyYW1ldGVycyhzdGF0dXNDb2RlLCBkYXRhLCByZXNwb25zZU9wdGlvbnMpXG4gICAgICAgIC8vIFNpbmNlIHRoZSB2YWx1ZXMgY2FuIGJlIG9idGFpbmVkIGltbWVkaWF0ZWx5IHdlIHJldHVybiB0aGVtXG4gICAgICAgIC8vIGZyb20gdGhpcyBoaWdoZXIgb3JkZXIgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHJlc29sdmVkIGxhdGVyLlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnRoaXMuY3JlYXRlTW9ja1Njb3BlRGlzcGF0Y2hEYXRhKHN0YXR1c0NvZGUsIGRhdGEsIHJlc3BvbnNlT3B0aW9ucylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBZGQgdXN1YWwgZGlzcGF0Y2ggZGF0YSwgYnV0IHRoaXMgdGltZSBzZXQgdGhlIGRhdGEgcGFyYW1ldGVyIHRvIGZ1bmN0aW9uIHRoYXQgd2lsbCBldmVudHVhbGx5IHByb3ZpZGUgZGF0YS5cbiAgICAgIGNvbnN0IG5ld01vY2tEaXNwYXRjaCA9IGFkZE1vY2tEaXNwYXRjaCh0aGlzW2tEaXNwYXRjaGVzXSwgdGhpc1trRGlzcGF0Y2hLZXldLCB3cmFwcGVkRGVmYXVsdHNDYWxsYmFjaylcbiAgICAgIHJldHVybiBuZXcgTW9ja1Njb3BlKG5ld01vY2tEaXNwYXRjaClcbiAgICB9XG5cbiAgICAvLyBXZSBjYW4gaGF2ZSBlaXRoZXIgb25lIG9yIHRocmVlIHBhcmFtZXRlcnMsIGlmIHdlIGdldCBoZXJlLFxuICAgIC8vIHdlIHNob3VsZCBoYXZlIDEtMyBwYXJhbWV0ZXJzLiBTbyB3ZSBzcHJlYWQgdGhlIGFyZ3VtZW50cyBvZlxuICAgIC8vIHRoaXMgZnVuY3Rpb24gdG8gb2J0YWluIHRoZSBwYXJhbWV0ZXJzLCBzaW5jZSByZXBseURhdGEgd2lsbCBhbHdheXNcbiAgICAvLyBqdXN0IGJlIHRoZSBzdGF0dXNDb2RlLlxuICAgIGNvbnN0IFtzdGF0dXNDb2RlLCBkYXRhID0gJycsIHJlc3BvbnNlT3B0aW9ucyA9IHt9XSA9IFsuLi5hcmd1bWVudHNdXG4gICAgdGhpcy52YWxpZGF0ZVJlcGx5UGFyYW1ldGVycyhzdGF0dXNDb2RlLCBkYXRhLCByZXNwb25zZU9wdGlvbnMpXG5cbiAgICAvLyBTZW5kIGluLWFscmVhZHkgcHJvdmlkZWQgZGF0YSBsaWtlIHVzdWFsXG4gICAgY29uc3QgZGlzcGF0Y2hEYXRhID0gdGhpcy5jcmVhdGVNb2NrU2NvcGVEaXNwYXRjaERhdGEoc3RhdHVzQ29kZSwgZGF0YSwgcmVzcG9uc2VPcHRpb25zKVxuICAgIGNvbnN0IG5ld01vY2tEaXNwYXRjaCA9IGFkZE1vY2tEaXNwYXRjaCh0aGlzW2tEaXNwYXRjaGVzXSwgdGhpc1trRGlzcGF0Y2hLZXldLCBkaXNwYXRjaERhdGEpXG4gICAgcmV0dXJuIG5ldyBNb2NrU2NvcGUobmV3TW9ja0Rpc3BhdGNoKVxuICB9XG5cbiAgLyoqXG4gICAqIE1vY2sgYW4gdW5kaWNpIHJlcXVlc3Qgd2l0aCBhIGRlZmluZWQgZXJyb3IuXG4gICAqL1xuICByZXBseVdpdGhFcnJvciAoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdlcnJvciBtdXN0IGJlIGRlZmluZWQnKVxuICAgIH1cblxuICAgIGNvbnN0IG5ld01vY2tEaXNwYXRjaCA9IGFkZE1vY2tEaXNwYXRjaCh0aGlzW2tEaXNwYXRjaGVzXSwgdGhpc1trRGlzcGF0Y2hLZXldLCB7IGVycm9yIH0pXG4gICAgcmV0dXJuIG5ldyBNb2NrU2NvcGUobmV3TW9ja0Rpc3BhdGNoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBkZWZhdWx0IHJlcGx5IGhlYWRlcnMgb24gdGhlIGludGVyY2VwdG9yIGZvciBzdWJzZXF1ZW50IHJlcGxpZXNcbiAgICovXG4gIGRlZmF1bHRSZXBseUhlYWRlcnMgKGhlYWRlcnMpIHtcbiAgICBpZiAodHlwZW9mIGhlYWRlcnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2hlYWRlcnMgbXVzdCBiZSBkZWZpbmVkJylcbiAgICB9XG5cbiAgICB0aGlzW2tEZWZhdWx0SGVhZGVyc10gPSBoZWFkZXJzXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZGVmYXVsdCByZXBseSB0cmFpbGVycyBvbiB0aGUgaW50ZXJjZXB0b3IgZm9yIHN1YnNlcXVlbnQgcmVwbGllc1xuICAgKi9cbiAgZGVmYXVsdFJlcGx5VHJhaWxlcnMgKHRyYWlsZXJzKSB7XG4gICAgaWYgKHR5cGVvZiB0cmFpbGVycyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigndHJhaWxlcnMgbXVzdCBiZSBkZWZpbmVkJylcbiAgICB9XG5cbiAgICB0aGlzW2tEZWZhdWx0VHJhaWxlcnNdID0gdHJhaWxlcnNcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCByZXBseSBjb250ZW50IGxlbmd0aCBoZWFkZXIgZm9yIHJlcGxpZXMgb24gdGhlIGludGVyY2VwdG9yXG4gICAqL1xuICByZXBseUNvbnRlbnRMZW5ndGggKCkge1xuICAgIHRoaXNba0NvbnRlbnRMZW5ndGhdID0gdHJ1ZVxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuTW9ja0ludGVyY2VwdG9yID0gTW9ja0ludGVyY2VwdG9yXG5tb2R1bGUuZXhwb3J0cy5Nb2NrU2NvcGUgPSBNb2NrU2NvcGVcbiJdLCJuYW1lcyI6WyJnZXRSZXNwb25zZURhdGEiLCJidWlsZEtleSIsImFkZE1vY2tEaXNwYXRjaCIsInJlcXVpcmUiLCJrRGlzcGF0Y2hlcyIsImtEaXNwYXRjaEtleSIsImtEZWZhdWx0SGVhZGVycyIsImtEZWZhdWx0VHJhaWxlcnMiLCJrQ29udGVudExlbmd0aCIsImtNb2NrRGlzcGF0Y2giLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsImJ1aWxkVVJMIiwiTW9ja1Njb3BlIiwiY29uc3RydWN0b3IiLCJtb2NrRGlzcGF0Y2giLCJkZWxheSIsIndhaXRJbk1zIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwicGVyc2lzdCIsInRpbWVzIiwicmVwZWF0VGltZXMiLCJNb2NrSW50ZXJjZXB0b3IiLCJvcHRzIiwibW9ja0Rpc3BhdGNoZXMiLCJwYXRoIiwibWV0aG9kIiwicXVlcnkiLCJwYXJzZWRVUkwiLCJVUkwiLCJwYXRobmFtZSIsInNlYXJjaCIsInRvVXBwZXJDYXNlIiwiY3JlYXRlTW9ja1Njb3BlRGlzcGF0Y2hEYXRhIiwic3RhdHVzQ29kZSIsImRhdGEiLCJyZXNwb25zZU9wdGlvbnMiLCJyZXNwb25zZURhdGEiLCJjb250ZW50TGVuZ3RoIiwibGVuZ3RoIiwiaGVhZGVycyIsInRyYWlsZXJzIiwidmFsaWRhdGVSZXBseVBhcmFtZXRlcnMiLCJyZXBseSIsInJlcGx5RGF0YSIsIndyYXBwZWREZWZhdWx0c0NhbGxiYWNrIiwicmVzb2x2ZWREYXRhIiwibmV3TW9ja0Rpc3BhdGNoIiwiYXJndW1lbnRzIiwiZGlzcGF0Y2hEYXRhIiwicmVwbHlXaXRoRXJyb3IiLCJlcnJvciIsImRlZmF1bHRSZXBseUhlYWRlcnMiLCJkZWZhdWx0UmVwbHlUcmFpbGVycyIsInJlcGx5Q29udGVudExlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-pool.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-pool.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst Pool = __webpack_require__(/*! ../pool */ \"(ssr)/./node_modules/undici/lib/pool.js\");\nconst { buildMockDispatch } = __webpack_require__(/*! ./mock-utils */ \"(ssr)/./node_modules/undici/lib/mock/mock-utils.js\");\nconst { kDispatches, kMockAgent, kClose, kOriginalClose, kOrigin, kOriginalDispatch, kConnected } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst { MockInterceptor } = __webpack_require__(/*! ./mock-interceptor */ \"(ssr)/./node_modules/undici/lib/mock/mock-interceptor.js\");\nconst Symbols = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\n/**\n * MockPool provides an API that extends the Pool to influence the mockDispatches.\n */ class MockPool extends Pool {\n    constructor(origin, opts){\n        super(origin, opts);\n        if (!opts || !opts.agent || typeof opts.agent.dispatch !== \"function\") {\n            throw new InvalidArgumentError(\"Argument opts.agent must implement Agent\");\n        }\n        this[kMockAgent] = opts.agent;\n        this[kOrigin] = origin;\n        this[kDispatches] = [];\n        this[kConnected] = 1;\n        this[kOriginalDispatch] = this.dispatch;\n        this[kOriginalClose] = this.close.bind(this);\n        this.dispatch = buildMockDispatch.call(this);\n        this.close = this[kClose];\n    }\n    get [Symbols.kConnected]() {\n        return this[kConnected];\n    }\n    /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */ intercept(opts) {\n        return new MockInterceptor(opts, this[kDispatches]);\n    }\n    async [kClose]() {\n        await promisify(this[kOriginalClose])();\n        this[kConnected] = 0;\n        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);\n    }\n}\nmodule.exports = MockPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stcG9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsU0FBUyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1DLE9BQU9ELG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU0sRUFBRUUsaUJBQWlCLEVBQUUsR0FBR0YsbUJBQU9BLENBQUM7QUFDdEMsTUFBTSxFQUNKRyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsTUFBTSxFQUNOQyxjQUFjLEVBQ2RDLE9BQU8sRUFDUEMsaUJBQWlCLEVBQ2pCQyxVQUFVLEVBQ1gsR0FBR1QsbUJBQU9BLENBQUM7QUFDWixNQUFNLEVBQUVVLGVBQWUsRUFBRSxHQUFHVixtQkFBT0EsQ0FBQztBQUNwQyxNQUFNVyxVQUFVWCxtQkFBT0EsQ0FBQztBQUN4QixNQUFNLEVBQUVZLG9CQUFvQixFQUFFLEdBQUdaLG1CQUFPQSxDQUFDO0FBRXpDOztDQUVDLEdBQ0QsTUFBTWEsaUJBQWlCWjtJQUNyQmEsWUFBYUMsTUFBTSxFQUFFQyxJQUFJLENBQUU7UUFDekIsS0FBSyxDQUFDRCxRQUFRQztRQUVkLElBQUksQ0FBQ0EsUUFBUSxDQUFDQSxLQUFLQyxLQUFLLElBQUksT0FBT0QsS0FBS0MsS0FBSyxDQUFDQyxRQUFRLEtBQUssWUFBWTtZQUNyRSxNQUFNLElBQUlOLHFCQUFxQjtRQUNqQztRQUVBLElBQUksQ0FBQ1IsV0FBVyxHQUFHWSxLQUFLQyxLQUFLO1FBQzdCLElBQUksQ0FBQ1YsUUFBUSxHQUFHUTtRQUNoQixJQUFJLENBQUNaLFlBQVksR0FBRyxFQUFFO1FBQ3RCLElBQUksQ0FBQ00sV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0Qsa0JBQWtCLEdBQUcsSUFBSSxDQUFDVSxRQUFRO1FBQ3ZDLElBQUksQ0FBQ1osZUFBZSxHQUFHLElBQUksQ0FBQ2EsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUUzQyxJQUFJLENBQUNGLFFBQVEsR0FBR2hCLGtCQUFrQm1CLElBQUksQ0FBQyxJQUFJO1FBQzNDLElBQUksQ0FBQ0YsS0FBSyxHQUFHLElBQUksQ0FBQ2QsT0FBTztJQUMzQjtJQUVBLElBQUksQ0FBQ00sUUFBUUYsVUFBVSxDQUFDLEdBQUk7UUFDMUIsT0FBTyxJQUFJLENBQUNBLFdBQVc7SUFDekI7SUFFQTs7R0FFQyxHQUNEYSxVQUFXTixJQUFJLEVBQUU7UUFDZixPQUFPLElBQUlOLGdCQUFnQk0sTUFBTSxJQUFJLENBQUNiLFlBQVk7SUFDcEQ7SUFFQSxNQUFNLENBQUNFLE9BQU8sR0FBSTtRQUNoQixNQUFNTixVQUFVLElBQUksQ0FBQ08sZUFBZTtRQUNwQyxJQUFJLENBQUNHLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNMLFdBQVcsQ0FBQ08sUUFBUVksUUFBUSxDQUFDLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUNqQixRQUFRO0lBQ3pEO0FBQ0Y7QUFFQWtCLE9BQU9DLE9BQU8sR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stcG9vbC5qcz80YTYwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IHByb21pc2lmeSB9ID0gcmVxdWlyZSgndXRpbCcpXG5jb25zdCBQb29sID0gcmVxdWlyZSgnLi4vcG9vbCcpXG5jb25zdCB7IGJ1aWxkTW9ja0Rpc3BhdGNoIH0gPSByZXF1aXJlKCcuL21vY2stdXRpbHMnKVxuY29uc3Qge1xuICBrRGlzcGF0Y2hlcyxcbiAga01vY2tBZ2VudCxcbiAga0Nsb3NlLFxuICBrT3JpZ2luYWxDbG9zZSxcbiAga09yaWdpbixcbiAga09yaWdpbmFsRGlzcGF0Y2gsXG4gIGtDb25uZWN0ZWRcbn0gPSByZXF1aXJlKCcuL21vY2stc3ltYm9scycpXG5jb25zdCB7IE1vY2tJbnRlcmNlcHRvciB9ID0gcmVxdWlyZSgnLi9tb2NrLWludGVyY2VwdG9yJylcbmNvbnN0IFN5bWJvbHMgPSByZXF1aXJlKCcuLi9jb3JlL3N5bWJvbHMnKVxuY29uc3QgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9ID0gcmVxdWlyZSgnLi4vY29yZS9lcnJvcnMnKVxuXG4vKipcbiAqIE1vY2tQb29sIHByb3ZpZGVzIGFuIEFQSSB0aGF0IGV4dGVuZHMgdGhlIFBvb2wgdG8gaW5mbHVlbmNlIHRoZSBtb2NrRGlzcGF0Y2hlcy5cbiAqL1xuY2xhc3MgTW9ja1Bvb2wgZXh0ZW5kcyBQb29sIHtcbiAgY29uc3RydWN0b3IgKG9yaWdpbiwgb3B0cykge1xuICAgIHN1cGVyKG9yaWdpbiwgb3B0cylcblxuICAgIGlmICghb3B0cyB8fCAhb3B0cy5hZ2VudCB8fCB0eXBlb2Ygb3B0cy5hZ2VudC5kaXNwYXRjaCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdBcmd1bWVudCBvcHRzLmFnZW50IG11c3QgaW1wbGVtZW50IEFnZW50JylcbiAgICB9XG5cbiAgICB0aGlzW2tNb2NrQWdlbnRdID0gb3B0cy5hZ2VudFxuICAgIHRoaXNba09yaWdpbl0gPSBvcmlnaW5cbiAgICB0aGlzW2tEaXNwYXRjaGVzXSA9IFtdXG4gICAgdGhpc1trQ29ubmVjdGVkXSA9IDFcbiAgICB0aGlzW2tPcmlnaW5hbERpc3BhdGNoXSA9IHRoaXMuZGlzcGF0Y2hcbiAgICB0aGlzW2tPcmlnaW5hbENsb3NlXSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKVxuXG4gICAgdGhpcy5kaXNwYXRjaCA9IGJ1aWxkTW9ja0Rpc3BhdGNoLmNhbGwodGhpcylcbiAgICB0aGlzLmNsb3NlID0gdGhpc1trQ2xvc2VdXG4gIH1cblxuICBnZXQgW1N5bWJvbHMua0Nvbm5lY3RlZF0gKCkge1xuICAgIHJldHVybiB0aGlzW2tDb25uZWN0ZWRdXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB1cCB0aGUgYmFzZSBpbnRlcmNlcHRvciBmb3IgbW9ja2luZyByZXBsaWVzIGZyb20gdW5kaWNpLlxuICAgKi9cbiAgaW50ZXJjZXB0IChvcHRzKSB7XG4gICAgcmV0dXJuIG5ldyBNb2NrSW50ZXJjZXB0b3Iob3B0cywgdGhpc1trRGlzcGF0Y2hlc10pXG4gIH1cblxuICBhc3luYyBba0Nsb3NlXSAoKSB7XG4gICAgYXdhaXQgcHJvbWlzaWZ5KHRoaXNba09yaWdpbmFsQ2xvc2VdKSgpXG4gICAgdGhpc1trQ29ubmVjdGVkXSA9IDBcbiAgICB0aGlzW2tNb2NrQWdlbnRdW1N5bWJvbHMua0NsaWVudHNdLmRlbGV0ZSh0aGlzW2tPcmlnaW5dKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9ja1Bvb2xcbiJdLCJuYW1lcyI6WyJwcm9taXNpZnkiLCJyZXF1aXJlIiwiUG9vbCIsImJ1aWxkTW9ja0Rpc3BhdGNoIiwia0Rpc3BhdGNoZXMiLCJrTW9ja0FnZW50Iiwia0Nsb3NlIiwia09yaWdpbmFsQ2xvc2UiLCJrT3JpZ2luIiwia09yaWdpbmFsRGlzcGF0Y2giLCJrQ29ubmVjdGVkIiwiTW9ja0ludGVyY2VwdG9yIiwiU3ltYm9scyIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiTW9ja1Bvb2wiLCJjb25zdHJ1Y3RvciIsIm9yaWdpbiIsIm9wdHMiLCJhZ2VudCIsImRpc3BhdGNoIiwiY2xvc2UiLCJiaW5kIiwiY2FsbCIsImludGVyY2VwdCIsImtDbGllbnRzIiwiZGVsZXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-symbols.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    kAgent: Symbol(\"agent\"),\n    kOptions: Symbol(\"options\"),\n    kFactory: Symbol(\"factory\"),\n    kDispatches: Symbol(\"dispatches\"),\n    kDispatchKey: Symbol(\"dispatch key\"),\n    kDefaultHeaders: Symbol(\"default headers\"),\n    kDefaultTrailers: Symbol(\"default trailers\"),\n    kContentLength: Symbol(\"content length\"),\n    kMockAgent: Symbol(\"mock agent\"),\n    kMockAgentSet: Symbol(\"mock agent set\"),\n    kMockAgentGet: Symbol(\"mock agent get\"),\n    kMockDispatch: Symbol(\"mock dispatch\"),\n    kClose: Symbol(\"close\"),\n    kOriginalClose: Symbol(\"original agent close\"),\n    kOrigin: Symbol(\"origin\"),\n    kIsMockActive: Symbol(\"is mock active\"),\n    kNetConnect: Symbol(\"net connect\"),\n    kGetNetConnect: Symbol(\"get net connect\"),\n    kConnected: Symbol(\"connected\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsUUFBUUMsT0FBTztJQUNmQyxVQUFVRCxPQUFPO0lBQ2pCRSxVQUFVRixPQUFPO0lBQ2pCRyxhQUFhSCxPQUFPO0lBQ3BCSSxjQUFjSixPQUFPO0lBQ3JCSyxpQkFBaUJMLE9BQU87SUFDeEJNLGtCQUFrQk4sT0FBTztJQUN6Qk8sZ0JBQWdCUCxPQUFPO0lBQ3ZCUSxZQUFZUixPQUFPO0lBQ25CUyxlQUFlVCxPQUFPO0lBQ3RCVSxlQUFlVixPQUFPO0lBQ3RCVyxlQUFlWCxPQUFPO0lBQ3RCWSxRQUFRWixPQUFPO0lBQ2ZhLGdCQUFnQmIsT0FBTztJQUN2QmMsU0FBU2QsT0FBTztJQUNoQmUsZUFBZWYsT0FBTztJQUN0QmdCLGFBQWFoQixPQUFPO0lBQ3BCaUIsZ0JBQWdCakIsT0FBTztJQUN2QmtCLFlBQVlsQixPQUFPO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvbW9jay9tb2NrLXN5bWJvbHMuanM/NWExYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtBZ2VudDogU3ltYm9sKCdhZ2VudCcpLFxuICBrT3B0aW9uczogU3ltYm9sKCdvcHRpb25zJyksXG4gIGtGYWN0b3J5OiBTeW1ib2woJ2ZhY3RvcnknKSxcbiAga0Rpc3BhdGNoZXM6IFN5bWJvbCgnZGlzcGF0Y2hlcycpLFxuICBrRGlzcGF0Y2hLZXk6IFN5bWJvbCgnZGlzcGF0Y2gga2V5JyksXG4gIGtEZWZhdWx0SGVhZGVyczogU3ltYm9sKCdkZWZhdWx0IGhlYWRlcnMnKSxcbiAga0RlZmF1bHRUcmFpbGVyczogU3ltYm9sKCdkZWZhdWx0IHRyYWlsZXJzJyksXG4gIGtDb250ZW50TGVuZ3RoOiBTeW1ib2woJ2NvbnRlbnQgbGVuZ3RoJyksXG4gIGtNb2NrQWdlbnQ6IFN5bWJvbCgnbW9jayBhZ2VudCcpLFxuICBrTW9ja0FnZW50U2V0OiBTeW1ib2woJ21vY2sgYWdlbnQgc2V0JyksXG4gIGtNb2NrQWdlbnRHZXQ6IFN5bWJvbCgnbW9jayBhZ2VudCBnZXQnKSxcbiAga01vY2tEaXNwYXRjaDogU3ltYm9sKCdtb2NrIGRpc3BhdGNoJyksXG4gIGtDbG9zZTogU3ltYm9sKCdjbG9zZScpLFxuICBrT3JpZ2luYWxDbG9zZTogU3ltYm9sKCdvcmlnaW5hbCBhZ2VudCBjbG9zZScpLFxuICBrT3JpZ2luOiBTeW1ib2woJ29yaWdpbicpLFxuICBrSXNNb2NrQWN0aXZlOiBTeW1ib2woJ2lzIG1vY2sgYWN0aXZlJyksXG4gIGtOZXRDb25uZWN0OiBTeW1ib2woJ25ldCBjb25uZWN0JyksXG4gIGtHZXROZXRDb25uZWN0OiBTeW1ib2woJ2dldCBuZXQgY29ubmVjdCcpLFxuICBrQ29ubmVjdGVkOiBTeW1ib2woJ2Nvbm5lY3RlZCcpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtBZ2VudCIsIlN5bWJvbCIsImtPcHRpb25zIiwia0ZhY3RvcnkiLCJrRGlzcGF0Y2hlcyIsImtEaXNwYXRjaEtleSIsImtEZWZhdWx0SGVhZGVycyIsImtEZWZhdWx0VHJhaWxlcnMiLCJrQ29udGVudExlbmd0aCIsImtNb2NrQWdlbnQiLCJrTW9ja0FnZW50U2V0Iiwia01vY2tBZ2VudEdldCIsImtNb2NrRGlzcGF0Y2giLCJrQ2xvc2UiLCJrT3JpZ2luYWxDbG9zZSIsImtPcmlnaW4iLCJrSXNNb2NrQWN0aXZlIiwia05ldENvbm5lY3QiLCJrR2V0TmV0Q29ubmVjdCIsImtDb25uZWN0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/mock-utils.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/mock-utils.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { MockNotMatchedError } = __webpack_require__(/*! ./mock-errors */ \"(ssr)/./node_modules/undici/lib/mock/mock-errors.js\");\nconst { kDispatches, kMockAgent, kOriginalDispatch, kOrigin, kGetNetConnect } = __webpack_require__(/*! ./mock-symbols */ \"(ssr)/./node_modules/undici/lib/mock/mock-symbols.js\");\nconst { buildURL, nop } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { STATUS_CODES } = __webpack_require__(/*! http */ \"http\");\nconst { types: { isPromise } } = __webpack_require__(/*! util */ \"util\");\nfunction matchValue(match, value) {\n    if (typeof match === \"string\") {\n        return match === value;\n    }\n    if (match instanceof RegExp) {\n        return match.test(value);\n    }\n    if (typeof match === \"function\") {\n        return match(value) === true;\n    }\n    return false;\n}\nfunction lowerCaseEntries(headers) {\n    return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue])=>{\n        return [\n            headerName.toLocaleLowerCase(),\n            headerValue\n        ];\n    }));\n}\n/**\n * @param {import('../../index').Headers|string[]|Record<string, string>} headers\n * @param {string} key\n */ function getHeaderByName(headers, key) {\n    if (Array.isArray(headers)) {\n        for(let i = 0; i < headers.length; i += 2){\n            if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {\n                return headers[i + 1];\n            }\n        }\n        return undefined;\n    } else if (typeof headers.get === \"function\") {\n        return headers.get(key);\n    } else {\n        return lowerCaseEntries(headers)[key.toLocaleLowerCase()];\n    }\n}\n/** @param {string[]} headers */ function buildHeadersFromArray(headers) {\n    const clone = headers.slice();\n    const entries = [];\n    for(let index = 0; index < clone.length; index += 2){\n        entries.push([\n            clone[index],\n            clone[index + 1]\n        ]);\n    }\n    return Object.fromEntries(entries);\n}\nfunction matchHeaders(mockDispatch, headers) {\n    if (typeof mockDispatch.headers === \"function\") {\n        if (Array.isArray(headers)) {\n            headers = buildHeadersFromArray(headers);\n        }\n        return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {});\n    }\n    if (typeof mockDispatch.headers === \"undefined\") {\n        return true;\n    }\n    if (typeof headers !== \"object\" || typeof mockDispatch.headers !== \"object\") {\n        return false;\n    }\n    for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)){\n        const headerValue = getHeaderByName(headers, matchHeaderName);\n        if (!matchValue(matchHeaderValue, headerValue)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction safeUrl(path) {\n    if (typeof path !== \"string\") {\n        return path;\n    }\n    const pathSegments = path.split(\"?\");\n    if (pathSegments.length !== 2) {\n        return path;\n    }\n    const qp = new URLSearchParams(pathSegments.pop());\n    qp.sort();\n    return [\n        ...pathSegments,\n        qp.toString()\n    ].join(\"?\");\n}\nfunction matchKey(mockDispatch, { path, method, body, headers }) {\n    const pathMatch = matchValue(mockDispatch.path, path);\n    const methodMatch = matchValue(mockDispatch.method, method);\n    const bodyMatch = typeof mockDispatch.body !== \"undefined\" ? matchValue(mockDispatch.body, body) : true;\n    const headersMatch = matchHeaders(mockDispatch, headers);\n    return pathMatch && methodMatch && bodyMatch && headersMatch;\n}\nfunction getResponseData(data) {\n    if (Buffer.isBuffer(data)) {\n        return data;\n    } else if (typeof data === \"object\") {\n        return JSON.stringify(data);\n    } else {\n        return data.toString();\n    }\n}\nfunction getMockDispatch(mockDispatches, key) {\n    const basePath = key.query ? buildURL(key.path, key.query) : key.path;\n    const resolvedPath = typeof basePath === \"string\" ? safeUrl(basePath) : basePath;\n    // Match path\n    let matchedMockDispatches = mockDispatches.filter(({ consumed })=>!consumed).filter(({ path })=>matchValue(safeUrl(path), resolvedPath));\n    if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);\n    }\n    // Match method\n    matchedMockDispatches = matchedMockDispatches.filter(({ method })=>matchValue(method, key.method));\n    if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);\n    }\n    // Match body\n    matchedMockDispatches = matchedMockDispatches.filter(({ body })=>typeof body !== \"undefined\" ? matchValue(body, key.body) : true);\n    if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);\n    }\n    // Match headers\n    matchedMockDispatches = matchedMockDispatches.filter((mockDispatch)=>matchHeaders(mockDispatch, key.headers));\n    if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === \"object\" ? JSON.stringify(key.headers) : key.headers}'`);\n    }\n    return matchedMockDispatches[0];\n}\nfunction addMockDispatch(mockDispatches, key, data) {\n    const baseData = {\n        timesInvoked: 0,\n        times: 1,\n        persist: false,\n        consumed: false\n    };\n    const replyData = typeof data === \"function\" ? {\n        callback: data\n    } : {\n        ...data\n    };\n    const newMockDispatch = {\n        ...baseData,\n        ...key,\n        pending: true,\n        data: {\n            error: null,\n            ...replyData\n        }\n    };\n    mockDispatches.push(newMockDispatch);\n    return newMockDispatch;\n}\nfunction deleteMockDispatch(mockDispatches, key) {\n    const index = mockDispatches.findIndex((dispatch)=>{\n        if (!dispatch.consumed) {\n            return false;\n        }\n        return matchKey(dispatch, key);\n    });\n    if (index !== -1) {\n        mockDispatches.splice(index, 1);\n    }\n}\nfunction buildKey(opts) {\n    const { path, method, body, headers, query } = opts;\n    return {\n        path,\n        method,\n        body,\n        headers,\n        query\n    };\n}\nfunction generateKeyValues(data) {\n    return Object.entries(data).reduce((keyValuePairs, [key, value])=>[\n            ...keyValuePairs,\n            Buffer.from(`${key}`),\n            Array.isArray(value) ? value.map((x)=>Buffer.from(`${x}`)) : Buffer.from(`${value}`)\n        ], []);\n}\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n * @param {number} statusCode\n */ function getStatusText(statusCode) {\n    return STATUS_CODES[statusCode] || \"unknown\";\n}\nasync function getResponse(body) {\n    const buffers = [];\n    for await (const data of body){\n        buffers.push(data);\n    }\n    return Buffer.concat(buffers).toString(\"utf8\");\n}\n/**\n * Mock dispatch function used to simulate undici dispatches\n */ function mockDispatch(opts, handler) {\n    // Get mock dispatch from built key\n    const key = buildKey(opts);\n    const mockDispatch = getMockDispatch(this[kDispatches], key);\n    mockDispatch.timesInvoked++;\n    // Here's where we resolve a callback if a callback is present for the dispatch data.\n    if (mockDispatch.data.callback) {\n        mockDispatch.data = {\n            ...mockDispatch.data,\n            ...mockDispatch.data.callback(opts)\n        };\n    }\n    // Parse mockDispatch data\n    const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch;\n    const { timesInvoked, times } = mockDispatch;\n    // If it's used up and not persistent, mark as consumed\n    mockDispatch.consumed = !persist && timesInvoked >= times;\n    mockDispatch.pending = timesInvoked < times;\n    // If specified, trigger dispatch error\n    if (error !== null) {\n        deleteMockDispatch(this[kDispatches], key);\n        handler.onError(error);\n        return true;\n    }\n    // Handle the request with a delay if necessary\n    if (typeof delay === \"number\" && delay > 0) {\n        setTimeout(()=>{\n            handleReply(this[kDispatches]);\n        }, delay);\n    } else {\n        handleReply(this[kDispatches]);\n    }\n    function handleReply(mockDispatches, _data = data) {\n        // fetch's HeadersList is a 1D string array\n        const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;\n        const body = typeof _data === \"function\" ? _data({\n            ...opts,\n            headers: optsHeaders\n        }) : _data;\n        // util.types.isPromise is likely needed for jest.\n        if (isPromise(body)) {\n            // If handleReply is asynchronous, throwing an error\n            // in the callback will reject the promise, rather than\n            // synchronously throw the error, which breaks some tests.\n            // Rather, we wait for the callback to resolve if it is a\n            // promise, and then re-run handleReply with the new body.\n            body.then((newData)=>handleReply(mockDispatches, newData));\n            return;\n        }\n        const responseData = getResponseData(body);\n        const responseHeaders = generateKeyValues(headers);\n        const responseTrailers = generateKeyValues(trailers);\n        handler.abort = nop;\n        handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));\n        handler.onData(Buffer.from(responseData));\n        handler.onComplete(responseTrailers);\n        deleteMockDispatch(mockDispatches, key);\n    }\n    function resume() {}\n    return true;\n}\nfunction buildMockDispatch() {\n    const agent = this[kMockAgent];\n    const origin = this[kOrigin];\n    const originalDispatch = this[kOriginalDispatch];\n    return function dispatch(opts, handler) {\n        if (agent.isMockActive) {\n            try {\n                mockDispatch.call(this, opts, handler);\n            } catch (error) {\n                if (error instanceof MockNotMatchedError) {\n                    const netConnect = agent[kGetNetConnect]();\n                    if (netConnect === false) {\n                        throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);\n                    }\n                    if (checkNetConnect(netConnect, origin)) {\n                        originalDispatch.call(this, opts, handler);\n                    } else {\n                        throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);\n                    }\n                } else {\n                    throw error;\n                }\n            }\n        } else {\n            originalDispatch.call(this, opts, handler);\n        }\n    };\n}\nfunction checkNetConnect(netConnect, origin) {\n    const url = new URL(origin);\n    if (netConnect === true) {\n        return true;\n    } else if (Array.isArray(netConnect) && netConnect.some((matcher)=>matchValue(matcher, url.host))) {\n        return true;\n    }\n    return false;\n}\nfunction buildMockOptions(opts) {\n    if (opts) {\n        const { agent, ...mockOptions } = opts;\n        return mockOptions;\n    }\n}\nmodule.exports = {\n    getResponseData,\n    getMockDispatch,\n    addMockDispatch,\n    deleteMockDispatch,\n    buildKey,\n    generateKeyValues,\n    matchValue,\n    getResponse,\n    getStatusText,\n    mockDispatch,\n    buildMockDispatch,\n    checkNetConnect,\n    buildMockOptions,\n    getHeaderByName\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL21vY2stdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLG1CQUFtQixFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ3hDLE1BQU0sRUFDSkMsV0FBVyxFQUNYQyxVQUFVLEVBQ1ZDLGlCQUFpQixFQUNqQkMsT0FBTyxFQUNQQyxjQUFjLEVBQ2YsR0FBR0wsbUJBQU9BLENBQUM7QUFDWixNQUFNLEVBQUVNLFFBQVEsRUFBRUMsR0FBRyxFQUFFLEdBQUdQLG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU0sRUFBRVEsWUFBWSxFQUFFLEdBQUdSLG1CQUFPQSxDQUFDO0FBQ2pDLE1BQU0sRUFDSlMsT0FBTyxFQUNMQyxTQUFTLEVBQ1YsRUFDRixHQUFHVixtQkFBT0EsQ0FBQztBQUVaLFNBQVNXLFdBQVlDLEtBQUssRUFBRUMsS0FBSztJQUMvQixJQUFJLE9BQU9ELFVBQVUsVUFBVTtRQUM3QixPQUFPQSxVQUFVQztJQUNuQjtJQUNBLElBQUlELGlCQUFpQkUsUUFBUTtRQUMzQixPQUFPRixNQUFNRyxJQUFJLENBQUNGO0lBQ3BCO0lBQ0EsSUFBSSxPQUFPRCxVQUFVLFlBQVk7UUFDL0IsT0FBT0EsTUFBTUMsV0FBVztJQUMxQjtJQUNBLE9BQU87QUFDVDtBQUVBLFNBQVNHLGlCQUFrQkMsT0FBTztJQUNoQyxPQUFPQyxPQUFPQyxXQUFXLENBQ3ZCRCxPQUFPRSxPQUFPLENBQUNILFNBQVNJLEdBQUcsQ0FBQyxDQUFDLENBQUNDLFlBQVlDLFlBQVk7UUFDcEQsT0FBTztZQUFDRCxXQUFXRSxpQkFBaUI7WUFBSUQ7U0FBWTtJQUN0RDtBQUVKO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0UsZ0JBQWlCUixPQUFPLEVBQUVTLEdBQUc7SUFDcEMsSUFBSUMsTUFBTUMsT0FBTyxDQUFDWCxVQUFVO1FBQzFCLElBQUssSUFBSVksSUFBSSxHQUFHQSxJQUFJWixRQUFRYSxNQUFNLEVBQUVELEtBQUssRUFBRztZQUMxQyxJQUFJWixPQUFPLENBQUNZLEVBQUUsQ0FBQ0wsaUJBQWlCLE9BQU9FLElBQUlGLGlCQUFpQixJQUFJO2dCQUM5RCxPQUFPUCxPQUFPLENBQUNZLElBQUksRUFBRTtZQUN2QjtRQUNGO1FBRUEsT0FBT0U7SUFDVCxPQUFPLElBQUksT0FBT2QsUUFBUWUsR0FBRyxLQUFLLFlBQVk7UUFDNUMsT0FBT2YsUUFBUWUsR0FBRyxDQUFDTjtJQUNyQixPQUFPO1FBQ0wsT0FBT1YsaUJBQWlCQyxRQUFRLENBQUNTLElBQUlGLGlCQUFpQixHQUFHO0lBQzNEO0FBQ0Y7QUFFQSw4QkFBOEIsR0FDOUIsU0FBU1Msc0JBQXVCaEIsT0FBTztJQUNyQyxNQUFNaUIsUUFBUWpCLFFBQVFrQixLQUFLO0lBQzNCLE1BQU1mLFVBQVUsRUFBRTtJQUNsQixJQUFLLElBQUlnQixRQUFRLEdBQUdBLFFBQVFGLE1BQU1KLE1BQU0sRUFBRU0sU0FBUyxFQUFHO1FBQ3BEaEIsUUFBUWlCLElBQUksQ0FBQztZQUFDSCxLQUFLLENBQUNFLE1BQU07WUFBRUYsS0FBSyxDQUFDRSxRQUFRLEVBQUU7U0FBQztJQUMvQztJQUNBLE9BQU9sQixPQUFPQyxXQUFXLENBQUNDO0FBQzVCO0FBRUEsU0FBU2tCLGFBQWNDLFlBQVksRUFBRXRCLE9BQU87SUFDMUMsSUFBSSxPQUFPc0IsYUFBYXRCLE9BQU8sS0FBSyxZQUFZO1FBQzlDLElBQUlVLE1BQU1DLE9BQU8sQ0FBQ1gsVUFBVTtZQUMxQkEsVUFBVWdCLHNCQUFzQmhCO1FBQ2xDO1FBQ0EsT0FBT3NCLGFBQWF0QixPQUFPLENBQUNBLFVBQVVELGlCQUFpQkMsV0FBVyxDQUFDO0lBQ3JFO0lBQ0EsSUFBSSxPQUFPc0IsYUFBYXRCLE9BQU8sS0FBSyxhQUFhO1FBQy9DLE9BQU87SUFDVDtJQUNBLElBQUksT0FBT0EsWUFBWSxZQUFZLE9BQU9zQixhQUFhdEIsT0FBTyxLQUFLLFVBQVU7UUFDM0UsT0FBTztJQUNUO0lBRUEsS0FBSyxNQUFNLENBQUN1QixpQkFBaUJDLGlCQUFpQixJQUFJdkIsT0FBT0UsT0FBTyxDQUFDbUIsYUFBYXRCLE9BQU8sRUFBRztRQUN0RixNQUFNTSxjQUFjRSxnQkFBZ0JSLFNBQVN1QjtRQUU3QyxJQUFJLENBQUM3QixXQUFXOEIsa0JBQWtCbEIsY0FBYztZQUM5QyxPQUFPO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUVBLFNBQVNtQixRQUFTQyxJQUFJO0lBQ3BCLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzVCLE9BQU9BO0lBQ1Q7SUFFQSxNQUFNQyxlQUFlRCxLQUFLRSxLQUFLLENBQUM7SUFFaEMsSUFBSUQsYUFBYWQsTUFBTSxLQUFLLEdBQUc7UUFDN0IsT0FBT2E7SUFDVDtJQUVBLE1BQU1HLEtBQUssSUFBSUMsZ0JBQWdCSCxhQUFhSSxHQUFHO0lBQy9DRixHQUFHRyxJQUFJO0lBQ1AsT0FBTztXQUFJTDtRQUFjRSxHQUFHSSxRQUFRO0tBQUcsQ0FBQ0MsSUFBSSxDQUFDO0FBQy9DO0FBRUEsU0FBU0MsU0FBVWIsWUFBWSxFQUFFLEVBQUVJLElBQUksRUFBRVUsTUFBTSxFQUFFQyxJQUFJLEVBQUVyQyxPQUFPLEVBQUU7SUFDOUQsTUFBTXNDLFlBQVk1QyxXQUFXNEIsYUFBYUksSUFBSSxFQUFFQTtJQUNoRCxNQUFNYSxjQUFjN0MsV0FBVzRCLGFBQWFjLE1BQU0sRUFBRUE7SUFDcEQsTUFBTUksWUFBWSxPQUFPbEIsYUFBYWUsSUFBSSxLQUFLLGNBQWMzQyxXQUFXNEIsYUFBYWUsSUFBSSxFQUFFQSxRQUFRO0lBQ25HLE1BQU1JLGVBQWVwQixhQUFhQyxjQUFjdEI7SUFDaEQsT0FBT3NDLGFBQWFDLGVBQWVDLGFBQWFDO0FBQ2xEO0FBRUEsU0FBU0MsZ0JBQWlCQyxJQUFJO0lBQzVCLElBQUlDLE9BQU9DLFFBQVEsQ0FBQ0YsT0FBTztRQUN6QixPQUFPQTtJQUNULE9BQU8sSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDbkMsT0FBT0csS0FBS0MsU0FBUyxDQUFDSjtJQUN4QixPQUFPO1FBQ0wsT0FBT0EsS0FBS1YsUUFBUTtJQUN0QjtBQUNGO0FBRUEsU0FBU2UsZ0JBQWlCQyxjQUFjLEVBQUV4QyxHQUFHO0lBQzNDLE1BQU15QyxXQUFXekMsSUFBSTBDLEtBQUssR0FBRzlELFNBQVNvQixJQUFJaUIsSUFBSSxFQUFFakIsSUFBSTBDLEtBQUssSUFBSTFDLElBQUlpQixJQUFJO0lBQ3JFLE1BQU0wQixlQUFlLE9BQU9GLGFBQWEsV0FBV3pCLFFBQVF5QixZQUFZQTtJQUV4RSxhQUFhO0lBQ2IsSUFBSUcsd0JBQXdCSixlQUFlSyxNQUFNLENBQUMsQ0FBQyxFQUFFQyxRQUFRLEVBQUUsR0FBSyxDQUFDQSxVQUFVRCxNQUFNLENBQUMsQ0FBQyxFQUFFNUIsSUFBSSxFQUFFLEdBQUtoQyxXQUFXK0IsUUFBUUMsT0FBTzBCO0lBQzlILElBQUlDLHNCQUFzQnhDLE1BQU0sS0FBSyxHQUFHO1FBQ3RDLE1BQU0sSUFBSS9CLG9CQUFvQixDQUFDLG9DQUFvQyxFQUFFc0UsYUFBYSxDQUFDLENBQUM7SUFDdEY7SUFFQSxlQUFlO0lBQ2ZDLHdCQUF3QkEsc0JBQXNCQyxNQUFNLENBQUMsQ0FBQyxFQUFFbEIsTUFBTSxFQUFFLEdBQUsxQyxXQUFXMEMsUUFBUTNCLElBQUkyQixNQUFNO0lBQ2xHLElBQUlpQixzQkFBc0J4QyxNQUFNLEtBQUssR0FBRztRQUN0QyxNQUFNLElBQUkvQixvQkFBb0IsQ0FBQyxzQ0FBc0MsRUFBRTJCLElBQUkyQixNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3RGO0lBRUEsYUFBYTtJQUNiaUIsd0JBQXdCQSxzQkFBc0JDLE1BQU0sQ0FBQyxDQUFDLEVBQUVqQixJQUFJLEVBQUUsR0FBSyxPQUFPQSxTQUFTLGNBQWMzQyxXQUFXMkMsTUFBTTVCLElBQUk0QixJQUFJLElBQUk7SUFDOUgsSUFBSWdCLHNCQUFzQnhDLE1BQU0sS0FBSyxHQUFHO1FBQ3RDLE1BQU0sSUFBSS9CLG9CQUFvQixDQUFDLG9DQUFvQyxFQUFFMkIsSUFBSTRCLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEY7SUFFQSxnQkFBZ0I7SUFDaEJnQix3QkFBd0JBLHNCQUFzQkMsTUFBTSxDQUFDLENBQUNoQyxlQUFpQkQsYUFBYUMsY0FBY2IsSUFBSVQsT0FBTztJQUM3RyxJQUFJcUQsc0JBQXNCeEMsTUFBTSxLQUFLLEdBQUc7UUFDdEMsTUFBTSxJQUFJL0Isb0JBQW9CLENBQUMsdUNBQXVDLEVBQUUsT0FBTzJCLElBQUlULE9BQU8sS0FBSyxXQUFXOEMsS0FBS0MsU0FBUyxDQUFDdEMsSUFBSVQsT0FBTyxJQUFJUyxJQUFJVCxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3hKO0lBRUEsT0FBT3FELHFCQUFxQixDQUFDLEVBQUU7QUFDakM7QUFFQSxTQUFTRyxnQkFBaUJQLGNBQWMsRUFBRXhDLEdBQUcsRUFBRWtDLElBQUk7SUFDakQsTUFBTWMsV0FBVztRQUFFQyxjQUFjO1FBQUdDLE9BQU87UUFBR0MsU0FBUztRQUFPTCxVQUFVO0lBQU07SUFDOUUsTUFBTU0sWUFBWSxPQUFPbEIsU0FBUyxhQUFhO1FBQUVtQixVQUFVbkI7SUFBSyxJQUFJO1FBQUUsR0FBR0EsSUFBSTtJQUFDO0lBQzlFLE1BQU1vQixrQkFBa0I7UUFBRSxHQUFHTixRQUFRO1FBQUUsR0FBR2hELEdBQUc7UUFBRXVELFNBQVM7UUFBTXJCLE1BQU07WUFBRXNCLE9BQU87WUFBTSxHQUFHSixTQUFTO1FBQUM7SUFBRTtJQUNsR1osZUFBZTdCLElBQUksQ0FBQzJDO0lBQ3BCLE9BQU9BO0FBQ1Q7QUFFQSxTQUFTRyxtQkFBb0JqQixjQUFjLEVBQUV4QyxHQUFHO0lBQzlDLE1BQU1VLFFBQVE4QixlQUFla0IsU0FBUyxDQUFDQyxDQUFBQTtRQUNyQyxJQUFJLENBQUNBLFNBQVNiLFFBQVEsRUFBRTtZQUN0QixPQUFPO1FBQ1Q7UUFDQSxPQUFPcEIsU0FBU2lDLFVBQVUzRDtJQUM1QjtJQUNBLElBQUlVLFVBQVUsQ0FBQyxHQUFHO1FBQ2hCOEIsZUFBZW9CLE1BQU0sQ0FBQ2xELE9BQU87SUFDL0I7QUFDRjtBQUVBLFNBQVNtRCxTQUFVQyxJQUFJO0lBQ3JCLE1BQU0sRUFBRTdDLElBQUksRUFBRVUsTUFBTSxFQUFFQyxJQUFJLEVBQUVyQyxPQUFPLEVBQUVtRCxLQUFLLEVBQUUsR0FBR29CO0lBQy9DLE9BQU87UUFDTDdDO1FBQ0FVO1FBQ0FDO1FBQ0FyQztRQUNBbUQ7SUFDRjtBQUNGO0FBRUEsU0FBU3FCLGtCQUFtQjdCLElBQUk7SUFDOUIsT0FBTzFDLE9BQU9FLE9BQU8sQ0FBQ3dDLE1BQU04QixNQUFNLENBQUMsQ0FBQ0MsZUFBZSxDQUFDakUsS0FBS2IsTUFBTSxHQUFLO2VBQy9EOEU7WUFDSDlCLE9BQU8rQixJQUFJLENBQUMsQ0FBQyxFQUFFbEUsSUFBSSxDQUFDO1lBQ3BCQyxNQUFNQyxPQUFPLENBQUNmLFNBQVNBLE1BQU1RLEdBQUcsQ0FBQ3dFLENBQUFBLElBQUtoQyxPQUFPK0IsSUFBSSxDQUFDLENBQUMsRUFBRUMsRUFBRSxDQUFDLEtBQUtoQyxPQUFPK0IsSUFBSSxDQUFDLENBQUMsRUFBRS9FLE1BQU0sQ0FBQztTQUNwRixFQUFFLEVBQUU7QUFDUDtBQUVBOzs7Q0FHQyxHQUNELFNBQVNpRixjQUFlQyxVQUFVO0lBQ2hDLE9BQU92RixZQUFZLENBQUN1RixXQUFXLElBQUk7QUFDckM7QUFFQSxlQUFlQyxZQUFhMUMsSUFBSTtJQUM5QixNQUFNMkMsVUFBVSxFQUFFO0lBQ2xCLFdBQVcsTUFBTXJDLFFBQVFOLEtBQU07UUFDN0IyQyxRQUFRNUQsSUFBSSxDQUFDdUI7SUFDZjtJQUNBLE9BQU9DLE9BQU9xQyxNQUFNLENBQUNELFNBQVMvQyxRQUFRLENBQUM7QUFDekM7QUFFQTs7Q0FFQyxHQUNELFNBQVNYLGFBQWNpRCxJQUFJLEVBQUVXLE9BQU87SUFDbEMsbUNBQW1DO0lBQ25DLE1BQU16RSxNQUFNNkQsU0FBU0M7SUFDckIsTUFBTWpELGVBQWUwQixnQkFBZ0IsSUFBSSxDQUFDaEUsWUFBWSxFQUFFeUI7SUFFeERhLGFBQWFvQyxZQUFZO0lBRXpCLHFGQUFxRjtJQUNyRixJQUFJcEMsYUFBYXFCLElBQUksQ0FBQ21CLFFBQVEsRUFBRTtRQUM5QnhDLGFBQWFxQixJQUFJLEdBQUc7WUFBRSxHQUFHckIsYUFBYXFCLElBQUk7WUFBRSxHQUFHckIsYUFBYXFCLElBQUksQ0FBQ21CLFFBQVEsQ0FBQ1MsS0FBSztRQUFDO0lBQ2xGO0lBRUEsMEJBQTBCO0lBQzFCLE1BQU0sRUFBRTVCLE1BQU0sRUFBRW1DLFVBQVUsRUFBRW5DLElBQUksRUFBRTNDLE9BQU8sRUFBRW1GLFFBQVEsRUFBRWxCLEtBQUssRUFBRSxFQUFFbUIsS0FBSyxFQUFFeEIsT0FBTyxFQUFFLEdBQUd0QztJQUNqRixNQUFNLEVBQUVvQyxZQUFZLEVBQUVDLEtBQUssRUFBRSxHQUFHckM7SUFFaEMsdURBQXVEO0lBQ3ZEQSxhQUFhaUMsUUFBUSxHQUFHLENBQUNLLFdBQVdGLGdCQUFnQkM7SUFDcERyQyxhQUFhMEMsT0FBTyxHQUFHTixlQUFlQztJQUV0Qyx1Q0FBdUM7SUFDdkMsSUFBSU0sVUFBVSxNQUFNO1FBQ2xCQyxtQkFBbUIsSUFBSSxDQUFDbEYsWUFBWSxFQUFFeUI7UUFDdEN5RSxRQUFRRyxPQUFPLENBQUNwQjtRQUNoQixPQUFPO0lBQ1Q7SUFFQSwrQ0FBK0M7SUFDL0MsSUFBSSxPQUFPbUIsVUFBVSxZQUFZQSxRQUFRLEdBQUc7UUFDMUNFLFdBQVc7WUFDVEMsWUFBWSxJQUFJLENBQUN2RyxZQUFZO1FBQy9CLEdBQUdvRztJQUNMLE9BQU87UUFDTEcsWUFBWSxJQUFJLENBQUN2RyxZQUFZO0lBQy9CO0lBRUEsU0FBU3VHLFlBQWF0QyxjQUFjLEVBQUV1QyxRQUFRN0MsSUFBSTtRQUNoRCwyQ0FBMkM7UUFDM0MsTUFBTThDLGNBQWMvRSxNQUFNQyxPQUFPLENBQUM0RCxLQUFLdkUsT0FBTyxJQUMxQ2dCLHNCQUFzQnVELEtBQUt2RSxPQUFPLElBQ2xDdUUsS0FBS3ZFLE9BQU87UUFDaEIsTUFBTXFDLE9BQU8sT0FBT21ELFVBQVUsYUFDMUJBLE1BQU07WUFBRSxHQUFHakIsSUFBSTtZQUFFdkUsU0FBU3lGO1FBQVksS0FDdENEO1FBRUosa0RBQWtEO1FBQ2xELElBQUkvRixVQUFVNEMsT0FBTztZQUNuQixvREFBb0Q7WUFDcEQsdURBQXVEO1lBQ3ZELDBEQUEwRDtZQUMxRCx5REFBeUQ7WUFDekQsMERBQTBEO1lBQzFEQSxLQUFLcUQsSUFBSSxDQUFDLENBQUNDLFVBQVlKLFlBQVl0QyxnQkFBZ0IwQztZQUNuRDtRQUNGO1FBRUEsTUFBTUMsZUFBZWxELGdCQUFnQkw7UUFDckMsTUFBTXdELGtCQUFrQnJCLGtCQUFrQnhFO1FBQzFDLE1BQU04RixtQkFBbUJ0QixrQkFBa0JXO1FBRTNDRCxRQUFRYSxLQUFLLEdBQUd6RztRQUNoQjRGLFFBQVFjLFNBQVMsQ0FBQ2xCLFlBQVllLGlCQUFpQkksUUFBUXBCLGNBQWNDO1FBQ3JFSSxRQUFRZ0IsTUFBTSxDQUFDdEQsT0FBTytCLElBQUksQ0FBQ2lCO1FBQzNCVixRQUFRaUIsVUFBVSxDQUFDTDtRQUNuQjVCLG1CQUFtQmpCLGdCQUFnQnhDO0lBQ3JDO0lBRUEsU0FBU3dGLFVBQVc7SUFFcEIsT0FBTztBQUNUO0FBRUEsU0FBU0c7SUFDUCxNQUFNQyxRQUFRLElBQUksQ0FBQ3BILFdBQVc7SUFDOUIsTUFBTXFILFNBQVMsSUFBSSxDQUFDbkgsUUFBUTtJQUM1QixNQUFNb0gsbUJBQW1CLElBQUksQ0FBQ3JILGtCQUFrQjtJQUVoRCxPQUFPLFNBQVNrRixTQUFVRyxJQUFJLEVBQUVXLE9BQU87UUFDckMsSUFBSW1CLE1BQU1HLFlBQVksRUFBRTtZQUN0QixJQUFJO2dCQUNGbEYsYUFBYW1GLElBQUksQ0FBQyxJQUFJLEVBQUVsQyxNQUFNVztZQUNoQyxFQUFFLE9BQU9qQixPQUFPO2dCQUNkLElBQUlBLGlCQUFpQm5GLHFCQUFxQjtvQkFDeEMsTUFBTTRILGFBQWFMLEtBQUssQ0FBQ2pILGVBQWU7b0JBQ3hDLElBQUlzSCxlQUFlLE9BQU87d0JBQ3hCLE1BQU0sSUFBSTVILG9CQUFvQixDQUFDLEVBQUVtRixNQUFNMEMsT0FBTyxDQUFDLCtCQUErQixFQUFFTCxPQUFPLHVDQUF1QyxDQUFDO29CQUNqSTtvQkFDQSxJQUFJTSxnQkFBZ0JGLFlBQVlKLFNBQVM7d0JBQ3ZDQyxpQkFBaUJFLElBQUksQ0FBQyxJQUFJLEVBQUVsQyxNQUFNVztvQkFDcEMsT0FBTzt3QkFDTCxNQUFNLElBQUlwRyxvQkFBb0IsQ0FBQyxFQUFFbUYsTUFBTTBDLE9BQU8sQ0FBQywrQkFBK0IsRUFBRUwsT0FBTyw2REFBNkQsQ0FBQztvQkFDdko7Z0JBQ0YsT0FBTztvQkFDTCxNQUFNckM7Z0JBQ1I7WUFDRjtRQUNGLE9BQU87WUFDTHNDLGlCQUFpQkUsSUFBSSxDQUFDLElBQUksRUFBRWxDLE1BQU1XO1FBQ3BDO0lBQ0Y7QUFDRjtBQUVBLFNBQVMwQixnQkFBaUJGLFVBQVUsRUFBRUosTUFBTTtJQUMxQyxNQUFNTyxNQUFNLElBQUlDLElBQUlSO0lBQ3BCLElBQUlJLGVBQWUsTUFBTTtRQUN2QixPQUFPO0lBQ1QsT0FBTyxJQUFJaEcsTUFBTUMsT0FBTyxDQUFDK0YsZUFBZUEsV0FBV0ssSUFBSSxDQUFDLENBQUNDLFVBQVl0SCxXQUFXc0gsU0FBU0gsSUFBSUksSUFBSSxJQUFJO1FBQ25HLE9BQU87SUFDVDtJQUNBLE9BQU87QUFDVDtBQUVBLFNBQVNDLGlCQUFrQjNDLElBQUk7SUFDN0IsSUFBSUEsTUFBTTtRQUNSLE1BQU0sRUFBRThCLEtBQUssRUFBRSxHQUFHYyxhQUFhLEdBQUc1QztRQUNsQyxPQUFPNEM7SUFDVDtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUNmM0U7SUFDQU07SUFDQVE7SUFDQVU7SUFDQUk7SUFDQUU7SUFDQTlFO0lBQ0FxRjtJQUNBRjtJQUNBdkQ7SUFDQThFO0lBQ0FRO0lBQ0FNO0lBQ0ExRztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvbW9jay9tb2NrLXV0aWxzLmpzP2U5YTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgTW9ja05vdE1hdGNoZWRFcnJvciB9ID0gcmVxdWlyZSgnLi9tb2NrLWVycm9ycycpXG5jb25zdCB7XG4gIGtEaXNwYXRjaGVzLFxuICBrTW9ja0FnZW50LFxuICBrT3JpZ2luYWxEaXNwYXRjaCxcbiAga09yaWdpbixcbiAga0dldE5ldENvbm5lY3Rcbn0gPSByZXF1aXJlKCcuL21vY2stc3ltYm9scycpXG5jb25zdCB7IGJ1aWxkVVJMLCBub3AgfSA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbCcpXG5jb25zdCB7IFNUQVRVU19DT0RFUyB9ID0gcmVxdWlyZSgnaHR0cCcpXG5jb25zdCB7XG4gIHR5cGVzOiB7XG4gICAgaXNQcm9taXNlXG4gIH1cbn0gPSByZXF1aXJlKCd1dGlsJylcblxuZnVuY3Rpb24gbWF0Y2hWYWx1ZSAobWF0Y2gsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG1hdGNoID09PSB2YWx1ZVxuICB9XG4gIGlmIChtYXRjaCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBtYXRjaC50ZXN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgbWF0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF0Y2godmFsdWUpID09PSB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGxvd2VyQ2FzZUVudHJpZXMgKGhlYWRlcnMpIHtcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyhoZWFkZXJzKS5tYXAoKFtoZWFkZXJOYW1lLCBoZWFkZXJWYWx1ZV0pID0+IHtcbiAgICAgIHJldHVybiBbaGVhZGVyTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLCBoZWFkZXJWYWx1ZV1cbiAgICB9KVxuICApXG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL2luZGV4JykuSGVhZGVyc3xzdHJpbmdbXXxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSBoZWFkZXJzXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKi9cbmZ1bmN0aW9uIGdldEhlYWRlckJ5TmFtZSAoaGVhZGVycywga2V5KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBpZiAoaGVhZGVyc1tpXS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBrZXkudG9Mb2NhbGVMb3dlckNhc2UoKSkge1xuICAgICAgICByZXR1cm4gaGVhZGVyc1tpICsgMV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH0gZWxzZSBpZiAodHlwZW9mIGhlYWRlcnMuZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGhlYWRlcnMuZ2V0KGtleSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbG93ZXJDYXNlRW50cmllcyhoZWFkZXJzKVtrZXkudG9Mb2NhbGVMb3dlckNhc2UoKV1cbiAgfVxufVxuXG4vKiogQHBhcmFtIHtzdHJpbmdbXX0gaGVhZGVycyAqL1xuZnVuY3Rpb24gYnVpbGRIZWFkZXJzRnJvbUFycmF5IChoZWFkZXJzKSB7IC8vIGZldGNoIEhlYWRlcnNMaXN0XG4gIGNvbnN0IGNsb25lID0gaGVhZGVycy5zbGljZSgpXG4gIGNvbnN0IGVudHJpZXMgPSBbXVxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY2xvbmUubGVuZ3RoOyBpbmRleCArPSAyKSB7XG4gICAgZW50cmllcy5wdXNoKFtjbG9uZVtpbmRleF0sIGNsb25lW2luZGV4ICsgMV1dKVxuICB9XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoZW50cmllcylcbn1cblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJzIChtb2NrRGlzcGF0Y2gsIGhlYWRlcnMpIHtcbiAgaWYgKHR5cGVvZiBtb2NrRGlzcGF0Y2guaGVhZGVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7IC8vIGZldGNoIEhlYWRlcnNMaXN0XG4gICAgICBoZWFkZXJzID0gYnVpbGRIZWFkZXJzRnJvbUFycmF5KGhlYWRlcnMpXG4gICAgfVxuICAgIHJldHVybiBtb2NrRGlzcGF0Y2guaGVhZGVycyhoZWFkZXJzID8gbG93ZXJDYXNlRW50cmllcyhoZWFkZXJzKSA6IHt9KVxuICB9XG4gIGlmICh0eXBlb2YgbW9ja0Rpc3BhdGNoLmhlYWRlcnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAodHlwZW9mIGhlYWRlcnMgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBtb2NrRGlzcGF0Y2guaGVhZGVycyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGZvciAoY29uc3QgW21hdGNoSGVhZGVyTmFtZSwgbWF0Y2hIZWFkZXJWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobW9ja0Rpc3BhdGNoLmhlYWRlcnMpKSB7XG4gICAgY29uc3QgaGVhZGVyVmFsdWUgPSBnZXRIZWFkZXJCeU5hbWUoaGVhZGVycywgbWF0Y2hIZWFkZXJOYW1lKVxuXG4gICAgaWYgKCFtYXRjaFZhbHVlKG1hdGNoSGVhZGVyVmFsdWUsIGhlYWRlclZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHNhZmVVcmwgKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXRoXG4gIH1cblxuICBjb25zdCBwYXRoU2VnbWVudHMgPSBwYXRoLnNwbGl0KCc/JylcblxuICBpZiAocGF0aFNlZ21lbnRzLmxlbmd0aCAhPT0gMikge1xuICAgIHJldHVybiBwYXRoXG4gIH1cblxuICBjb25zdCBxcCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGF0aFNlZ21lbnRzLnBvcCgpKVxuICBxcC5zb3J0KClcbiAgcmV0dXJuIFsuLi5wYXRoU2VnbWVudHMsIHFwLnRvU3RyaW5nKCldLmpvaW4oJz8nKVxufVxuXG5mdW5jdGlvbiBtYXRjaEtleSAobW9ja0Rpc3BhdGNoLCB7IHBhdGgsIG1ldGhvZCwgYm9keSwgaGVhZGVycyB9KSB7XG4gIGNvbnN0IHBhdGhNYXRjaCA9IG1hdGNoVmFsdWUobW9ja0Rpc3BhdGNoLnBhdGgsIHBhdGgpXG4gIGNvbnN0IG1ldGhvZE1hdGNoID0gbWF0Y2hWYWx1ZShtb2NrRGlzcGF0Y2gubWV0aG9kLCBtZXRob2QpXG4gIGNvbnN0IGJvZHlNYXRjaCA9IHR5cGVvZiBtb2NrRGlzcGF0Y2guYm9keSAhPT0gJ3VuZGVmaW5lZCcgPyBtYXRjaFZhbHVlKG1vY2tEaXNwYXRjaC5ib2R5LCBib2R5KSA6IHRydWVcbiAgY29uc3QgaGVhZGVyc01hdGNoID0gbWF0Y2hIZWFkZXJzKG1vY2tEaXNwYXRjaCwgaGVhZGVycylcbiAgcmV0dXJuIHBhdGhNYXRjaCAmJiBtZXRob2RNYXRjaCAmJiBib2R5TWF0Y2ggJiYgaGVhZGVyc01hdGNoXG59XG5cbmZ1bmN0aW9uIGdldFJlc3BvbnNlRGF0YSAoZGF0YSkge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgcmV0dXJuIGRhdGFcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGF0YS50b1N0cmluZygpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TW9ja0Rpc3BhdGNoIChtb2NrRGlzcGF0Y2hlcywga2V5KSB7XG4gIGNvbnN0IGJhc2VQYXRoID0ga2V5LnF1ZXJ5ID8gYnVpbGRVUkwoa2V5LnBhdGgsIGtleS5xdWVyeSkgOiBrZXkucGF0aFxuICBjb25zdCByZXNvbHZlZFBhdGggPSB0eXBlb2YgYmFzZVBhdGggPT09ICdzdHJpbmcnID8gc2FmZVVybChiYXNlUGF0aCkgOiBiYXNlUGF0aFxuXG4gIC8vIE1hdGNoIHBhdGhcbiAgbGV0IG1hdGNoZWRNb2NrRGlzcGF0Y2hlcyA9IG1vY2tEaXNwYXRjaGVzLmZpbHRlcigoeyBjb25zdW1lZCB9KSA9PiAhY29uc3VtZWQpLmZpbHRlcigoeyBwYXRoIH0pID0+IG1hdGNoVmFsdWUoc2FmZVVybChwYXRoKSwgcmVzb2x2ZWRQYXRoKSlcbiAgaWYgKG1hdGNoZWRNb2NrRGlzcGF0Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgTW9ja05vdE1hdGNoZWRFcnJvcihgTW9jayBkaXNwYXRjaCBub3QgbWF0Y2hlZCBmb3IgcGF0aCAnJHtyZXNvbHZlZFBhdGh9J2ApXG4gIH1cblxuICAvLyBNYXRjaCBtZXRob2RcbiAgbWF0Y2hlZE1vY2tEaXNwYXRjaGVzID0gbWF0Y2hlZE1vY2tEaXNwYXRjaGVzLmZpbHRlcigoeyBtZXRob2QgfSkgPT4gbWF0Y2hWYWx1ZShtZXRob2QsIGtleS5tZXRob2QpKVxuICBpZiAobWF0Y2hlZE1vY2tEaXNwYXRjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBNb2NrTm90TWF0Y2hlZEVycm9yKGBNb2NrIGRpc3BhdGNoIG5vdCBtYXRjaGVkIGZvciBtZXRob2QgJyR7a2V5Lm1ldGhvZH0nYClcbiAgfVxuXG4gIC8vIE1hdGNoIGJvZHlcbiAgbWF0Y2hlZE1vY2tEaXNwYXRjaGVzID0gbWF0Y2hlZE1vY2tEaXNwYXRjaGVzLmZpbHRlcigoeyBib2R5IH0pID0+IHR5cGVvZiBib2R5ICE9PSAndW5kZWZpbmVkJyA/IG1hdGNoVmFsdWUoYm9keSwga2V5LmJvZHkpIDogdHJ1ZSlcbiAgaWYgKG1hdGNoZWRNb2NrRGlzcGF0Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgTW9ja05vdE1hdGNoZWRFcnJvcihgTW9jayBkaXNwYXRjaCBub3QgbWF0Y2hlZCBmb3IgYm9keSAnJHtrZXkuYm9keX0nYClcbiAgfVxuXG4gIC8vIE1hdGNoIGhlYWRlcnNcbiAgbWF0Y2hlZE1vY2tEaXNwYXRjaGVzID0gbWF0Y2hlZE1vY2tEaXNwYXRjaGVzLmZpbHRlcigobW9ja0Rpc3BhdGNoKSA9PiBtYXRjaEhlYWRlcnMobW9ja0Rpc3BhdGNoLCBrZXkuaGVhZGVycykpXG4gIGlmIChtYXRjaGVkTW9ja0Rpc3BhdGNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IE1vY2tOb3RNYXRjaGVkRXJyb3IoYE1vY2sgZGlzcGF0Y2ggbm90IG1hdGNoZWQgZm9yIGhlYWRlcnMgJyR7dHlwZW9mIGtleS5oZWFkZXJzID09PSAnb2JqZWN0JyA/IEpTT04uc3RyaW5naWZ5KGtleS5oZWFkZXJzKSA6IGtleS5oZWFkZXJzfSdgKVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZWRNb2NrRGlzcGF0Y2hlc1swXVxufVxuXG5mdW5jdGlvbiBhZGRNb2NrRGlzcGF0Y2ggKG1vY2tEaXNwYXRjaGVzLCBrZXksIGRhdGEpIHtcbiAgY29uc3QgYmFzZURhdGEgPSB7IHRpbWVzSW52b2tlZDogMCwgdGltZXM6IDEsIHBlcnNpc3Q6IGZhbHNlLCBjb25zdW1lZDogZmFsc2UgfVxuICBjb25zdCByZXBseURhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJyA/IHsgY2FsbGJhY2s6IGRhdGEgfSA6IHsgLi4uZGF0YSB9XG4gIGNvbnN0IG5ld01vY2tEaXNwYXRjaCA9IHsgLi4uYmFzZURhdGEsIC4uLmtleSwgcGVuZGluZzogdHJ1ZSwgZGF0YTogeyBlcnJvcjogbnVsbCwgLi4ucmVwbHlEYXRhIH0gfVxuICBtb2NrRGlzcGF0Y2hlcy5wdXNoKG5ld01vY2tEaXNwYXRjaClcbiAgcmV0dXJuIG5ld01vY2tEaXNwYXRjaFxufVxuXG5mdW5jdGlvbiBkZWxldGVNb2NrRGlzcGF0Y2ggKG1vY2tEaXNwYXRjaGVzLCBrZXkpIHtcbiAgY29uc3QgaW5kZXggPSBtb2NrRGlzcGF0Y2hlcy5maW5kSW5kZXgoZGlzcGF0Y2ggPT4ge1xuICAgIGlmICghZGlzcGF0Y2guY29uc3VtZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hLZXkoZGlzcGF0Y2gsIGtleSlcbiAgfSlcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIG1vY2tEaXNwYXRjaGVzLnNwbGljZShpbmRleCwgMSlcbiAgfVxufVxuXG5mdW5jdGlvbiBidWlsZEtleSAob3B0cykge1xuICBjb25zdCB7IHBhdGgsIG1ldGhvZCwgYm9keSwgaGVhZGVycywgcXVlcnkgfSA9IG9wdHNcbiAgcmV0dXJuIHtcbiAgICBwYXRoLFxuICAgIG1ldGhvZCxcbiAgICBib2R5LFxuICAgIGhlYWRlcnMsXG4gICAgcXVlcnlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUtleVZhbHVlcyAoZGF0YSkge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKChrZXlWYWx1ZVBhaXJzLCBba2V5LCB2YWx1ZV0pID0+IFtcbiAgICAuLi5rZXlWYWx1ZVBhaXJzLFxuICAgIEJ1ZmZlci5mcm9tKGAke2tleX1gKSxcbiAgICBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh4ID0+IEJ1ZmZlci5mcm9tKGAke3h9YCkpIDogQnVmZmVyLmZyb20oYCR7dmFsdWV9YClcbiAgXSwgW10pXG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL1N0YXR1c1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c0NvZGVcbiAqL1xuZnVuY3Rpb24gZ2V0U3RhdHVzVGV4dCAoc3RhdHVzQ29kZSkge1xuICByZXR1cm4gU1RBVFVTX0NPREVTW3N0YXR1c0NvZGVdIHx8ICd1bmtub3duJ1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRSZXNwb25zZSAoYm9keSkge1xuICBjb25zdCBidWZmZXJzID0gW11cbiAgZm9yIGF3YWl0IChjb25zdCBkYXRhIG9mIGJvZHkpIHtcbiAgICBidWZmZXJzLnB1c2goZGF0YSlcbiAgfVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChidWZmZXJzKS50b1N0cmluZygndXRmOCcpXG59XG5cbi8qKlxuICogTW9jayBkaXNwYXRjaCBmdW5jdGlvbiB1c2VkIHRvIHNpbXVsYXRlIHVuZGljaSBkaXNwYXRjaGVzXG4gKi9cbmZ1bmN0aW9uIG1vY2tEaXNwYXRjaCAob3B0cywgaGFuZGxlcikge1xuICAvLyBHZXQgbW9jayBkaXNwYXRjaCBmcm9tIGJ1aWx0IGtleVxuICBjb25zdCBrZXkgPSBidWlsZEtleShvcHRzKVxuICBjb25zdCBtb2NrRGlzcGF0Y2ggPSBnZXRNb2NrRGlzcGF0Y2godGhpc1trRGlzcGF0Y2hlc10sIGtleSlcblxuICBtb2NrRGlzcGF0Y2gudGltZXNJbnZva2VkKytcblxuICAvLyBIZXJlJ3Mgd2hlcmUgd2UgcmVzb2x2ZSBhIGNhbGxiYWNrIGlmIGEgY2FsbGJhY2sgaXMgcHJlc2VudCBmb3IgdGhlIGRpc3BhdGNoIGRhdGEuXG4gIGlmIChtb2NrRGlzcGF0Y2guZGF0YS5jYWxsYmFjaykge1xuICAgIG1vY2tEaXNwYXRjaC5kYXRhID0geyAuLi5tb2NrRGlzcGF0Y2guZGF0YSwgLi4ubW9ja0Rpc3BhdGNoLmRhdGEuY2FsbGJhY2sob3B0cykgfVxuICB9XG5cbiAgLy8gUGFyc2UgbW9ja0Rpc3BhdGNoIGRhdGFcbiAgY29uc3QgeyBkYXRhOiB7IHN0YXR1c0NvZGUsIGRhdGEsIGhlYWRlcnMsIHRyYWlsZXJzLCBlcnJvciB9LCBkZWxheSwgcGVyc2lzdCB9ID0gbW9ja0Rpc3BhdGNoXG4gIGNvbnN0IHsgdGltZXNJbnZva2VkLCB0aW1lcyB9ID0gbW9ja0Rpc3BhdGNoXG5cbiAgLy8gSWYgaXQncyB1c2VkIHVwIGFuZCBub3QgcGVyc2lzdGVudCwgbWFyayBhcyBjb25zdW1lZFxuICBtb2NrRGlzcGF0Y2guY29uc3VtZWQgPSAhcGVyc2lzdCAmJiB0aW1lc0ludm9rZWQgPj0gdGltZXNcbiAgbW9ja0Rpc3BhdGNoLnBlbmRpbmcgPSB0aW1lc0ludm9rZWQgPCB0aW1lc1xuXG4gIC8vIElmIHNwZWNpZmllZCwgdHJpZ2dlciBkaXNwYXRjaCBlcnJvclxuICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICBkZWxldGVNb2NrRGlzcGF0Y2godGhpc1trRGlzcGF0Y2hlc10sIGtleSlcbiAgICBoYW5kbGVyLm9uRXJyb3IoZXJyb3IpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIEhhbmRsZSB0aGUgcmVxdWVzdCB3aXRoIGEgZGVsYXkgaWYgbmVjZXNzYXJ5XG4gIGlmICh0eXBlb2YgZGVsYXkgPT09ICdudW1iZXInICYmIGRlbGF5ID4gMCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaGFuZGxlUmVwbHkodGhpc1trRGlzcGF0Y2hlc10pXG4gICAgfSwgZGVsYXkpXG4gIH0gZWxzZSB7XG4gICAgaGFuZGxlUmVwbHkodGhpc1trRGlzcGF0Y2hlc10pXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVSZXBseSAobW9ja0Rpc3BhdGNoZXMsIF9kYXRhID0gZGF0YSkge1xuICAgIC8vIGZldGNoJ3MgSGVhZGVyc0xpc3QgaXMgYSAxRCBzdHJpbmcgYXJyYXlcbiAgICBjb25zdCBvcHRzSGVhZGVycyA9IEFycmF5LmlzQXJyYXkob3B0cy5oZWFkZXJzKVxuICAgICAgPyBidWlsZEhlYWRlcnNGcm9tQXJyYXkob3B0cy5oZWFkZXJzKVxuICAgICAgOiBvcHRzLmhlYWRlcnNcbiAgICBjb25zdCBib2R5ID0gdHlwZW9mIF9kYXRhID09PSAnZnVuY3Rpb24nXG4gICAgICA/IF9kYXRhKHsgLi4ub3B0cywgaGVhZGVyczogb3B0c0hlYWRlcnMgfSlcbiAgICAgIDogX2RhdGFcblxuICAgIC8vIHV0aWwudHlwZXMuaXNQcm9taXNlIGlzIGxpa2VseSBuZWVkZWQgZm9yIGplc3QuXG4gICAgaWYgKGlzUHJvbWlzZShib2R5KSkge1xuICAgICAgLy8gSWYgaGFuZGxlUmVwbHkgaXMgYXN5bmNocm9ub3VzLCB0aHJvd2luZyBhbiBlcnJvclxuICAgICAgLy8gaW4gdGhlIGNhbGxiYWNrIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLCByYXRoZXIgdGhhblxuICAgICAgLy8gc3luY2hyb25vdXNseSB0aHJvdyB0aGUgZXJyb3IsIHdoaWNoIGJyZWFrcyBzb21lIHRlc3RzLlxuICAgICAgLy8gUmF0aGVyLCB3ZSB3YWl0IGZvciB0aGUgY2FsbGJhY2sgdG8gcmVzb2x2ZSBpZiBpdCBpcyBhXG4gICAgICAvLyBwcm9taXNlLCBhbmQgdGhlbiByZS1ydW4gaGFuZGxlUmVwbHkgd2l0aCB0aGUgbmV3IGJvZHkuXG4gICAgICBib2R5LnRoZW4oKG5ld0RhdGEpID0+IGhhbmRsZVJlcGx5KG1vY2tEaXNwYXRjaGVzLCBuZXdEYXRhKSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGdldFJlc3BvbnNlRGF0YShib2R5KVxuICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IGdlbmVyYXRlS2V5VmFsdWVzKGhlYWRlcnMpXG4gICAgY29uc3QgcmVzcG9uc2VUcmFpbGVycyA9IGdlbmVyYXRlS2V5VmFsdWVzKHRyYWlsZXJzKVxuXG4gICAgaGFuZGxlci5hYm9ydCA9IG5vcFxuICAgIGhhbmRsZXIub25IZWFkZXJzKHN0YXR1c0NvZGUsIHJlc3BvbnNlSGVhZGVycywgcmVzdW1lLCBnZXRTdGF0dXNUZXh0KHN0YXR1c0NvZGUpKVxuICAgIGhhbmRsZXIub25EYXRhKEJ1ZmZlci5mcm9tKHJlc3BvbnNlRGF0YSkpXG4gICAgaGFuZGxlci5vbkNvbXBsZXRlKHJlc3BvbnNlVHJhaWxlcnMpXG4gICAgZGVsZXRlTW9ja0Rpc3BhdGNoKG1vY2tEaXNwYXRjaGVzLCBrZXkpXG4gIH1cblxuICBmdW5jdGlvbiByZXN1bWUgKCkge31cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBidWlsZE1vY2tEaXNwYXRjaCAoKSB7XG4gIGNvbnN0IGFnZW50ID0gdGhpc1trTW9ja0FnZW50XVxuICBjb25zdCBvcmlnaW4gPSB0aGlzW2tPcmlnaW5dXG4gIGNvbnN0IG9yaWdpbmFsRGlzcGF0Y2ggPSB0aGlzW2tPcmlnaW5hbERpc3BhdGNoXVxuXG4gIHJldHVybiBmdW5jdGlvbiBkaXNwYXRjaCAob3B0cywgaGFuZGxlcikge1xuICAgIGlmIChhZ2VudC5pc01vY2tBY3RpdmUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG1vY2tEaXNwYXRjaC5jYWxsKHRoaXMsIG9wdHMsIGhhbmRsZXIpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBNb2NrTm90TWF0Y2hlZEVycm9yKSB7XG4gICAgICAgICAgY29uc3QgbmV0Q29ubmVjdCA9IGFnZW50W2tHZXROZXRDb25uZWN0XSgpXG4gICAgICAgICAgaWYgKG5ldENvbm5lY3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW9ja05vdE1hdGNoZWRFcnJvcihgJHtlcnJvci5tZXNzYWdlfTogc3Vic2VxdWVudCByZXF1ZXN0IHRvIG9yaWdpbiAke29yaWdpbn0gd2FzIG5vdCBhbGxvd2VkIChuZXQuY29ubmVjdCBkaXNhYmxlZClgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hlY2tOZXRDb25uZWN0KG5ldENvbm5lY3QsIG9yaWdpbikpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsRGlzcGF0Y2guY2FsbCh0aGlzLCBvcHRzLCBoYW5kbGVyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW9ja05vdE1hdGNoZWRFcnJvcihgJHtlcnJvci5tZXNzYWdlfTogc3Vic2VxdWVudCByZXF1ZXN0IHRvIG9yaWdpbiAke29yaWdpbn0gd2FzIG5vdCBhbGxvd2VkIChuZXQuY29ubmVjdCBpcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBvcmlnaW4pYClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvcmlnaW5hbERpc3BhdGNoLmNhbGwodGhpcywgb3B0cywgaGFuZGxlcilcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tOZXRDb25uZWN0IChuZXRDb25uZWN0LCBvcmlnaW4pIHtcbiAgY29uc3QgdXJsID0gbmV3IFVSTChvcmlnaW4pXG4gIGlmIChuZXRDb25uZWN0ID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG5ldENvbm5lY3QpICYmIG5ldENvbm5lY3Quc29tZSgobWF0Y2hlcikgPT4gbWF0Y2hWYWx1ZShtYXRjaGVyLCB1cmwuaG9zdCkpKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYnVpbGRNb2NrT3B0aW9ucyAob3B0cykge1xuICBpZiAob3B0cykge1xuICAgIGNvbnN0IHsgYWdlbnQsIC4uLm1vY2tPcHRpb25zIH0gPSBvcHRzXG4gICAgcmV0dXJuIG1vY2tPcHRpb25zXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldFJlc3BvbnNlRGF0YSxcbiAgZ2V0TW9ja0Rpc3BhdGNoLFxuICBhZGRNb2NrRGlzcGF0Y2gsXG4gIGRlbGV0ZU1vY2tEaXNwYXRjaCxcbiAgYnVpbGRLZXksXG4gIGdlbmVyYXRlS2V5VmFsdWVzLFxuICBtYXRjaFZhbHVlLFxuICBnZXRSZXNwb25zZSxcbiAgZ2V0U3RhdHVzVGV4dCxcbiAgbW9ja0Rpc3BhdGNoLFxuICBidWlsZE1vY2tEaXNwYXRjaCxcbiAgY2hlY2tOZXRDb25uZWN0LFxuICBidWlsZE1vY2tPcHRpb25zLFxuICBnZXRIZWFkZXJCeU5hbWVcbn1cbiJdLCJuYW1lcyI6WyJNb2NrTm90TWF0Y2hlZEVycm9yIiwicmVxdWlyZSIsImtEaXNwYXRjaGVzIiwia01vY2tBZ2VudCIsImtPcmlnaW5hbERpc3BhdGNoIiwia09yaWdpbiIsImtHZXROZXRDb25uZWN0IiwiYnVpbGRVUkwiLCJub3AiLCJTVEFUVVNfQ09ERVMiLCJ0eXBlcyIsImlzUHJvbWlzZSIsIm1hdGNoVmFsdWUiLCJtYXRjaCIsInZhbHVlIiwiUmVnRXhwIiwidGVzdCIsImxvd2VyQ2FzZUVudHJpZXMiLCJoZWFkZXJzIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwibWFwIiwiaGVhZGVyTmFtZSIsImhlYWRlclZhbHVlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJnZXRIZWFkZXJCeU5hbWUiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZ2V0IiwiYnVpbGRIZWFkZXJzRnJvbUFycmF5IiwiY2xvbmUiLCJzbGljZSIsImluZGV4IiwicHVzaCIsIm1hdGNoSGVhZGVycyIsIm1vY2tEaXNwYXRjaCIsIm1hdGNoSGVhZGVyTmFtZSIsIm1hdGNoSGVhZGVyVmFsdWUiLCJzYWZlVXJsIiwicGF0aCIsInBhdGhTZWdtZW50cyIsInNwbGl0IiwicXAiLCJVUkxTZWFyY2hQYXJhbXMiLCJwb3AiLCJzb3J0IiwidG9TdHJpbmciLCJqb2luIiwibWF0Y2hLZXkiLCJtZXRob2QiLCJib2R5IiwicGF0aE1hdGNoIiwibWV0aG9kTWF0Y2giLCJib2R5TWF0Y2giLCJoZWFkZXJzTWF0Y2giLCJnZXRSZXNwb25zZURhdGEiLCJkYXRhIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0TW9ja0Rpc3BhdGNoIiwibW9ja0Rpc3BhdGNoZXMiLCJiYXNlUGF0aCIsInF1ZXJ5IiwicmVzb2x2ZWRQYXRoIiwibWF0Y2hlZE1vY2tEaXNwYXRjaGVzIiwiZmlsdGVyIiwiY29uc3VtZWQiLCJhZGRNb2NrRGlzcGF0Y2giLCJiYXNlRGF0YSIsInRpbWVzSW52b2tlZCIsInRpbWVzIiwicGVyc2lzdCIsInJlcGx5RGF0YSIsImNhbGxiYWNrIiwibmV3TW9ja0Rpc3BhdGNoIiwicGVuZGluZyIsImVycm9yIiwiZGVsZXRlTW9ja0Rpc3BhdGNoIiwiZmluZEluZGV4IiwiZGlzcGF0Y2giLCJzcGxpY2UiLCJidWlsZEtleSIsIm9wdHMiLCJnZW5lcmF0ZUtleVZhbHVlcyIsInJlZHVjZSIsImtleVZhbHVlUGFpcnMiLCJmcm9tIiwieCIsImdldFN0YXR1c1RleHQiLCJzdGF0dXNDb2RlIiwiZ2V0UmVzcG9uc2UiLCJidWZmZXJzIiwiY29uY2F0IiwiaGFuZGxlciIsInRyYWlsZXJzIiwiZGVsYXkiLCJvbkVycm9yIiwic2V0VGltZW91dCIsImhhbmRsZVJlcGx5IiwiX2RhdGEiLCJvcHRzSGVhZGVycyIsInRoZW4iLCJuZXdEYXRhIiwicmVzcG9uc2VEYXRhIiwicmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUcmFpbGVycyIsImFib3J0Iiwib25IZWFkZXJzIiwicmVzdW1lIiwib25EYXRhIiwib25Db21wbGV0ZSIsImJ1aWxkTW9ja0Rpc3BhdGNoIiwiYWdlbnQiLCJvcmlnaW4iLCJvcmlnaW5hbERpc3BhdGNoIiwiaXNNb2NrQWN0aXZlIiwiY2FsbCIsIm5ldENvbm5lY3QiLCJtZXNzYWdlIiwiY2hlY2tOZXRDb25uZWN0IiwidXJsIiwiVVJMIiwic29tZSIsIm1hdGNoZXIiLCJob3N0IiwiYnVpbGRNb2NrT3B0aW9ucyIsIm1vY2tPcHRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/mock-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js":
/*!************************************************************************!*\
  !*** ./node_modules/undici/lib/mock/pending-interceptors-formatter.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Transform } = __webpack_require__(/*! stream */ \"stream\");\nconst { Console } = __webpack_require__(/*! console */ \"console\");\n/**\n * Gets the output of `console.table(…)` as a string.\n */ module.exports = class PendingInterceptorsFormatter {\n    constructor({ disableColors } = {}){\n        this.transform = new Transform({\n            transform (chunk, _enc, cb) {\n                cb(null, chunk);\n            }\n        });\n        this.logger = new Console({\n            stdout: this.transform,\n            inspectOptions: {\n                colors: !disableColors && !process.env.CI\n            }\n        });\n    }\n    format(pendingInterceptors) {\n        const withPrettyHeaders = pendingInterceptors.map(({ method, path, data: { statusCode }, persist, times, timesInvoked, origin })=>({\n                Method: method,\n                Origin: origin,\n                Path: path,\n                \"Status code\": statusCode,\n                Persistent: persist ? \"✅\" : \"❌\",\n                Invocations: timesInvoked,\n                Remaining: persist ? Infinity : times - timesInvoked\n            }));\n        this.logger.table(withPrettyHeaders);\n        return this.transform.read().toString();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL3BlbmRpbmctaW50ZXJjZXB0b3JzLWZvcm1hdHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsU0FBUyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdELG1CQUFPQSxDQUFDO0FBRTVCOztDQUVDLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRyxNQUFNQztJQUNyQkMsWUFBYSxFQUFFQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBRTtRQUNuQyxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJUixVQUFVO1lBQzdCUSxXQUFXQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsRUFBRTtnQkFDeEJBLEdBQUcsTUFBTUY7WUFDWDtRQUNGO1FBRUEsSUFBSSxDQUFDRyxNQUFNLEdBQUcsSUFBSVYsUUFBUTtZQUN4QlcsUUFBUSxJQUFJLENBQUNMLFNBQVM7WUFDdEJNLGdCQUFnQjtnQkFDZEMsUUFBUSxDQUFDUixpQkFBaUIsQ0FBQ1MsUUFBUUMsR0FBRyxDQUFDQyxFQUFFO1lBQzNDO1FBQ0Y7SUFDRjtJQUVBQyxPQUFRQyxtQkFBbUIsRUFBRTtRQUMzQixNQUFNQyxvQkFBb0JELG9CQUFvQkUsR0FBRyxDQUMvQyxDQUFDLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsWUFBWSxFQUFFQyxNQUFNLEVBQUUsR0FBTTtnQkFDakZDLFFBQVFSO2dCQUNSUyxRQUFRRjtnQkFDUkcsTUFBTVQ7Z0JBQ04sZUFBZUU7Z0JBQ2ZRLFlBQVlQLFVBQVUsTUFBTTtnQkFDNUJRLGFBQWFOO2dCQUNiTyxXQUFXVCxVQUFVVSxXQUFXVCxRQUFRQztZQUMxQztRQUVGLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQzBCLEtBQUssQ0FBQ2pCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDYixTQUFTLENBQUMrQixJQUFJLEdBQUdDLFFBQVE7SUFDdkM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL21vY2svcGVuZGluZy1pbnRlcmNlcHRvcnMtZm9ybWF0dGVyLmpzPzUwYjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgVHJhbnNmb3JtIH0gPSByZXF1aXJlKCdzdHJlYW0nKVxuY29uc3QgeyBDb25zb2xlIH0gPSByZXF1aXJlKCdjb25zb2xlJylcblxuLyoqXG4gKiBHZXRzIHRoZSBvdXRwdXQgb2YgYGNvbnNvbGUudGFibGUo4oCmKWAgYXMgYSBzdHJpbmcuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUGVuZGluZ0ludGVyY2VwdG9yc0Zvcm1hdHRlciB7XG4gIGNvbnN0cnVjdG9yICh7IGRpc2FibGVDb2xvcnMgfSA9IHt9KSB7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHtcbiAgICAgIHRyYW5zZm9ybSAoY2h1bmssIF9lbmMsIGNiKSB7XG4gICAgICAgIGNiKG51bGwsIGNodW5rKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmxvZ2dlciA9IG5ldyBDb25zb2xlKHtcbiAgICAgIHN0ZG91dDogdGhpcy50cmFuc2Zvcm0sXG4gICAgICBpbnNwZWN0T3B0aW9uczoge1xuICAgICAgICBjb2xvcnM6ICFkaXNhYmxlQ29sb3JzICYmICFwcm9jZXNzLmVudi5DSVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmb3JtYXQgKHBlbmRpbmdJbnRlcmNlcHRvcnMpIHtcbiAgICBjb25zdCB3aXRoUHJldHR5SGVhZGVycyA9IHBlbmRpbmdJbnRlcmNlcHRvcnMubWFwKFxuICAgICAgKHsgbWV0aG9kLCBwYXRoLCBkYXRhOiB7IHN0YXR1c0NvZGUgfSwgcGVyc2lzdCwgdGltZXMsIHRpbWVzSW52b2tlZCwgb3JpZ2luIH0pID0+ICh7XG4gICAgICAgIE1ldGhvZDogbWV0aG9kLFxuICAgICAgICBPcmlnaW46IG9yaWdpbixcbiAgICAgICAgUGF0aDogcGF0aCxcbiAgICAgICAgJ1N0YXR1cyBjb2RlJzogc3RhdHVzQ29kZSxcbiAgICAgICAgUGVyc2lzdGVudDogcGVyc2lzdCA/ICfinIUnIDogJ+KdjCcsXG4gICAgICAgIEludm9jYXRpb25zOiB0aW1lc0ludm9rZWQsXG4gICAgICAgIFJlbWFpbmluZzogcGVyc2lzdCA/IEluZmluaXR5IDogdGltZXMgLSB0aW1lc0ludm9rZWRcbiAgICAgIH0pKVxuXG4gICAgdGhpcy5sb2dnZXIudGFibGUod2l0aFByZXR0eUhlYWRlcnMpXG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnJlYWQoKS50b1N0cmluZygpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJUcmFuc2Zvcm0iLCJyZXF1aXJlIiwiQ29uc29sZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJQZW5kaW5nSW50ZXJjZXB0b3JzRm9ybWF0dGVyIiwiY29uc3RydWN0b3IiLCJkaXNhYmxlQ29sb3JzIiwidHJhbnNmb3JtIiwiY2h1bmsiLCJfZW5jIiwiY2IiLCJsb2dnZXIiLCJzdGRvdXQiLCJpbnNwZWN0T3B0aW9ucyIsImNvbG9ycyIsInByb2Nlc3MiLCJlbnYiLCJDSSIsImZvcm1hdCIsInBlbmRpbmdJbnRlcmNlcHRvcnMiLCJ3aXRoUHJldHR5SGVhZGVycyIsIm1hcCIsIm1ldGhvZCIsInBhdGgiLCJkYXRhIiwic3RhdHVzQ29kZSIsInBlcnNpc3QiLCJ0aW1lcyIsInRpbWVzSW52b2tlZCIsIm9yaWdpbiIsIk1ldGhvZCIsIk9yaWdpbiIsIlBhdGgiLCJQZXJzaXN0ZW50IiwiSW52b2NhdGlvbnMiLCJSZW1haW5pbmciLCJJbmZpbml0eSIsInRhYmxlIiwicmVhZCIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/pending-interceptors-formatter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/mock/pluralizer.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/mock/pluralizer.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst singulars = {\n    pronoun: \"it\",\n    is: \"is\",\n    was: \"was\",\n    this: \"this\"\n};\nconst plurals = {\n    pronoun: \"they\",\n    is: \"are\",\n    was: \"were\",\n    this: \"these\"\n};\nmodule.exports = class Pluralizer {\n    constructor(singular, plural){\n        this.singular = singular;\n        this.plural = plural;\n    }\n    pluralize(count) {\n        const one = count === 1;\n        const keys = one ? singulars : plurals;\n        const noun = one ? this.singular : this.plural;\n        return {\n            ...keys,\n            count,\n            noun\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9tb2NrL3BsdXJhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxZQUFZO0lBQ2hCQyxTQUFTO0lBQ1RDLElBQUk7SUFDSkMsS0FBSztJQUNMQyxNQUFNO0FBQ1I7QUFFQSxNQUFNQyxVQUFVO0lBQ2RKLFNBQVM7SUFDVEMsSUFBSTtJQUNKQyxLQUFLO0lBQ0xDLE1BQU07QUFDUjtBQUVBRSxPQUFPQyxPQUFPLEdBQUcsTUFBTUM7SUFDckJDLFlBQWFDLFFBQVEsRUFBRUMsTUFBTSxDQUFFO1FBQzdCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBR0E7SUFDaEI7SUFFQUMsVUFBV0MsS0FBSyxFQUFFO1FBQ2hCLE1BQU1DLE1BQU1ELFVBQVU7UUFDdEIsTUFBTUUsT0FBT0QsTUFBTWQsWUFBWUs7UUFDL0IsTUFBTVcsT0FBT0YsTUFBTSxJQUFJLENBQUNKLFFBQVEsR0FBRyxJQUFJLENBQUNDLE1BQU07UUFDOUMsT0FBTztZQUFFLEdBQUdJLElBQUk7WUFBRUY7WUFBT0c7UUFBSztJQUNoQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvbW9jay9wbHVyYWxpemVyLmpzP2M3YTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHNpbmd1bGFycyA9IHtcbiAgcHJvbm91bjogJ2l0JyxcbiAgaXM6ICdpcycsXG4gIHdhczogJ3dhcycsXG4gIHRoaXM6ICd0aGlzJ1xufVxuXG5jb25zdCBwbHVyYWxzID0ge1xuICBwcm9ub3VuOiAndGhleScsXG4gIGlzOiAnYXJlJyxcbiAgd2FzOiAnd2VyZScsXG4gIHRoaXM6ICd0aGVzZSdcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBQbHVyYWxpemVyIHtcbiAgY29uc3RydWN0b3IgKHNpbmd1bGFyLCBwbHVyYWwpIHtcbiAgICB0aGlzLnNpbmd1bGFyID0gc2luZ3VsYXJcbiAgICB0aGlzLnBsdXJhbCA9IHBsdXJhbFxuICB9XG5cbiAgcGx1cmFsaXplIChjb3VudCkge1xuICAgIGNvbnN0IG9uZSA9IGNvdW50ID09PSAxXG4gICAgY29uc3Qga2V5cyA9IG9uZSA/IHNpbmd1bGFycyA6IHBsdXJhbHNcbiAgICBjb25zdCBub3VuID0gb25lID8gdGhpcy5zaW5ndWxhciA6IHRoaXMucGx1cmFsXG4gICAgcmV0dXJuIHsgLi4ua2V5cywgY291bnQsIG5vdW4gfVxuICB9XG59XG4iXSwibmFtZXMiOlsic2luZ3VsYXJzIiwicHJvbm91biIsImlzIiwid2FzIiwidGhpcyIsInBsdXJhbHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiUGx1cmFsaXplciIsImNvbnN0cnVjdG9yIiwic2luZ3VsYXIiLCJwbHVyYWwiLCJwbHVyYWxpemUiLCJjb3VudCIsIm9uZSIsImtleXMiLCJub3VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/mock/pluralizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/node/fixed-queue.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/node/fixed-queue.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("/* eslint-disable */ \n// Extracted from node/lib/internal/fixed_queue.js\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\nconst kSize = 2048;\nconst kMask = kSize - 1;\n// The FixedQueue is implemented as a singly-linked list of fixed-size\n// circular buffers. It looks something like this:\n//\n//  head                                                       tail\n//    |                                                          |\n//    v                                                          v\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\n// +-----------+               +-----------+                  +-----------+\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |       bottom --> |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |    ...    |               |    ...    |                  |    ...    |\n// |   item    |               |   item    |                  |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |  [empty]  | <-- top       |   item    |                  |   item    |\n// |  [empty]  |               |   item    |                  |   item    |\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\n// +-----------+               +-----------+                  +-----------+\n//\n// Or, if there is only one circular buffer, it looks something\n// like either of these:\n//\n//  head   tail                                 head   tail\n//    |     |                                     |     |\n//    v     v                                     v     v\n// +-----------+                               +-----------+\n// |  [null]   |                               |  [null]   |\n// +-----------+                               +-----------+\n// |  [empty]  |                               |   item    |\n// |  [empty]  |                               |   item    |\n// |   item    | <-- bottom            top --> |  [empty]  |\n// |   item    |                               |  [empty]  |\n// |  [empty]  | <-- top            bottom --> |   item    |\n// |  [empty]  |                               |   item    |\n// +-----------+                               +-----------+\n//\n// Adding a value means moving `top` forward by one, removing means\n// moving `bottom` forward by one. After reaching the end, the queue\n// wraps around.\n//\n// When `top === bottom` the current queue is empty and when\n// `top + 1 === bottom` it's full. This wastes a single space of storage\n// but allows much quicker checks.\nclass FixedCircularBuffer {\n    constructor(){\n        this.bottom = 0;\n        this.top = 0;\n        this.list = new Array(kSize);\n        this.next = null;\n    }\n    isEmpty() {\n        return this.top === this.bottom;\n    }\n    isFull() {\n        return (this.top + 1 & kMask) === this.bottom;\n    }\n    push(data) {\n        this.list[this.top] = data;\n        this.top = this.top + 1 & kMask;\n    }\n    shift() {\n        const nextItem = this.list[this.bottom];\n        if (nextItem === undefined) return null;\n        this.list[this.bottom] = undefined;\n        this.bottom = this.bottom + 1 & kMask;\n        return nextItem;\n    }\n}\nmodule.exports = class FixedQueue {\n    constructor(){\n        this.head = this.tail = new FixedCircularBuffer();\n    }\n    isEmpty() {\n        return this.head.isEmpty();\n    }\n    push(data) {\n        if (this.head.isFull()) {\n            // Head is full: Creates a new queue, sets the old queue's `.next` to it,\n            // and sets it as the new main queue.\n            this.head = this.head.next = new FixedCircularBuffer();\n        }\n        this.head.push(data);\n    }\n    shift() {\n        const tail = this.tail;\n        const next = tail.shift();\n        if (tail.isEmpty() && tail.next !== null) {\n            // If there is another queue, it forms the new tail.\n            this.tail = tail.next;\n        }\n        return next;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/node/fixed-queue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/pool-base.js":
/*!**********************************************!*\
  !*** ./node_modules/undici/lib/pool-base.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher-base.js\");\nconst FixedQueue = __webpack_require__(/*! ./node/fixed-queue */ \"(ssr)/./node_modules/undici/lib/node/fixed-queue.js\");\nconst { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = __webpack_require__(/*! ./core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst PoolStats = __webpack_require__(/*! ./pool-stats */ \"(ssr)/./node_modules/undici/lib/pool-stats.js\");\nconst kClients = Symbol(\"clients\");\nconst kNeedDrain = Symbol(\"needDrain\");\nconst kQueue = Symbol(\"queue\");\nconst kClosedResolve = Symbol(\"closed resolve\");\nconst kOnDrain = Symbol(\"onDrain\");\nconst kOnConnect = Symbol(\"onConnect\");\nconst kOnDisconnect = Symbol(\"onDisconnect\");\nconst kOnConnectionError = Symbol(\"onConnectionError\");\nconst kGetDispatcher = Symbol(\"get dispatcher\");\nconst kAddClient = Symbol(\"add client\");\nconst kRemoveClient = Symbol(\"remove client\");\nconst kStats = Symbol(\"stats\");\nclass PoolBase extends DispatcherBase {\n    constructor(){\n        super();\n        this[kQueue] = new FixedQueue();\n        this[kClients] = [];\n        this[kQueued] = 0;\n        const pool = this;\n        this[kOnDrain] = function onDrain(origin, targets) {\n            const queue = pool[kQueue];\n            let needDrain = false;\n            while(!needDrain){\n                const item = queue.shift();\n                if (!item) {\n                    break;\n                }\n                pool[kQueued]--;\n                needDrain = !this.dispatch(item.opts, item.handler);\n            }\n            this[kNeedDrain] = needDrain;\n            if (!this[kNeedDrain] && pool[kNeedDrain]) {\n                pool[kNeedDrain] = false;\n                pool.emit(\"drain\", origin, [\n                    pool,\n                    ...targets\n                ]);\n            }\n            if (pool[kClosedResolve] && queue.isEmpty()) {\n                Promise.all(pool[kClients].map((c)=>c.close())).then(pool[kClosedResolve]);\n            }\n        };\n        this[kOnConnect] = (origin, targets)=>{\n            pool.emit(\"connect\", origin, [\n                pool,\n                ...targets\n            ]);\n        };\n        this[kOnDisconnect] = (origin, targets, err)=>{\n            pool.emit(\"disconnect\", origin, [\n                pool,\n                ...targets\n            ], err);\n        };\n        this[kOnConnectionError] = (origin, targets, err)=>{\n            pool.emit(\"connectionError\", origin, [\n                pool,\n                ...targets\n            ], err);\n        };\n        this[kStats] = new PoolStats(this);\n    }\n    get [kBusy]() {\n        return this[kNeedDrain];\n    }\n    get [kConnected]() {\n        return this[kClients].filter((client)=>client[kConnected]).length;\n    }\n    get [kFree]() {\n        return this[kClients].filter((client)=>client[kConnected] && !client[kNeedDrain]).length;\n    }\n    get [kPending]() {\n        let ret = this[kQueued];\n        for (const { [kPending]: pending } of this[kClients]){\n            ret += pending;\n        }\n        return ret;\n    }\n    get [kRunning]() {\n        let ret = 0;\n        for (const { [kRunning]: running } of this[kClients]){\n            ret += running;\n        }\n        return ret;\n    }\n    get [kSize]() {\n        let ret = this[kQueued];\n        for (const { [kSize]: size } of this[kClients]){\n            ret += size;\n        }\n        return ret;\n    }\n    get stats() {\n        return this[kStats];\n    }\n    async [kClose]() {\n        if (this[kQueue].isEmpty()) {\n            return Promise.all(this[kClients].map((c)=>c.close()));\n        } else {\n            return new Promise((resolve)=>{\n                this[kClosedResolve] = resolve;\n            });\n        }\n    }\n    async [kDestroy](err) {\n        while(true){\n            const item = this[kQueue].shift();\n            if (!item) {\n                break;\n            }\n            item.handler.onError(err);\n        }\n        return Promise.all(this[kClients].map((c)=>c.destroy(err)));\n    }\n    [kDispatch](opts, handler) {\n        const dispatcher = this[kGetDispatcher]();\n        if (!dispatcher) {\n            this[kNeedDrain] = true;\n            this[kQueue].push({\n                opts,\n                handler\n            });\n            this[kQueued]++;\n        } else if (!dispatcher.dispatch(opts, handler)) {\n            dispatcher[kNeedDrain] = true;\n            this[kNeedDrain] = !this[kGetDispatcher]();\n        }\n        return !this[kNeedDrain];\n    }\n    [kAddClient](client) {\n        client.on(\"drain\", this[kOnDrain]).on(\"connect\", this[kOnConnect]).on(\"disconnect\", this[kOnDisconnect]).on(\"connectionError\", this[kOnConnectionError]);\n        this[kClients].push(client);\n        if (this[kNeedDrain]) {\n            process.nextTick(()=>{\n                if (this[kNeedDrain]) {\n                    this[kOnDrain](client[kUrl], [\n                        this,\n                        client\n                    ]);\n                }\n            });\n        }\n        return this;\n    }\n    [kRemoveClient](client) {\n        client.close(()=>{\n            const idx = this[kClients].indexOf(client);\n            if (idx !== -1) {\n                this[kClients].splice(idx, 1);\n            }\n        });\n        this[kNeedDrain] = this[kClients].some((dispatcher)=>!dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n    }\n}\nmodule.exports = {\n    PoolBase,\n    kClients,\n    kNeedDrain,\n    kAddClient,\n    kRemoveClient,\n    kGetDispatcher\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/pool-base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/pool-stats.js":
/*!***********************************************!*\
  !*** ./node_modules/undici/lib/pool-stats.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = __webpack_require__(/*! ./core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst kPool = Symbol(\"pool\");\nclass PoolStats {\n    constructor(pool){\n        this[kPool] = pool;\n    }\n    get connected() {\n        return this[kPool][kConnected];\n    }\n    get free() {\n        return this[kPool][kFree];\n    }\n    get pending() {\n        return this[kPool][kPending];\n    }\n    get queued() {\n        return this[kPool][kQueued];\n    }\n    get running() {\n        return this[kPool][kRunning];\n    }\n    get size() {\n        return this[kPool][kSize];\n    }\n}\nmodule.exports = PoolStats;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9wb29sLXN0YXRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUMxRSxNQUFNQyxRQUFRQyxPQUFPO0FBRXJCLE1BQU1DO0lBQ0pDLFlBQWFDLElBQUksQ0FBRTtRQUNqQixJQUFJLENBQUNKLE1BQU0sR0FBR0k7SUFDaEI7SUFFQSxJQUFJQyxZQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUNMLE1BQU0sQ0FBQ04sV0FBVztJQUNoQztJQUVBLElBQUlZLE9BQVE7UUFDVixPQUFPLElBQUksQ0FBQ04sTUFBTSxDQUFDUCxNQUFNO0lBQzNCO0lBRUEsSUFBSWMsVUFBVztRQUNiLE9BQU8sSUFBSSxDQUFDUCxNQUFNLENBQUNMLFNBQVM7SUFDOUI7SUFFQSxJQUFJYSxTQUFVO1FBQ1osT0FBTyxJQUFJLENBQUNSLE1BQU0sQ0FBQ0osUUFBUTtJQUM3QjtJQUVBLElBQUlhLFVBQVc7UUFDYixPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDSCxTQUFTO0lBQzlCO0lBRUEsSUFBSWEsT0FBUTtRQUNWLE9BQU8sSUFBSSxDQUFDVixNQUFNLENBQUNGLE1BQU07SUFDM0I7QUFDRjtBQUVBYSxPQUFPQyxPQUFPLEdBQUdWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvcG9vbC1zdGF0cy5qcz8wZTFiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsga0ZyZWUsIGtDb25uZWN0ZWQsIGtQZW5kaW5nLCBrUXVldWVkLCBrUnVubmluZywga1NpemUgfSA9IHJlcXVpcmUoJy4vY29yZS9zeW1ib2xzJylcbmNvbnN0IGtQb29sID0gU3ltYm9sKCdwb29sJylcblxuY2xhc3MgUG9vbFN0YXRzIHtcbiAgY29uc3RydWN0b3IgKHBvb2wpIHtcbiAgICB0aGlzW2tQb29sXSA9IHBvb2xcbiAgfVxuXG4gIGdldCBjb25uZWN0ZWQgKCkge1xuICAgIHJldHVybiB0aGlzW2tQb29sXVtrQ29ubmVjdGVkXVxuICB9XG5cbiAgZ2V0IGZyZWUgKCkge1xuICAgIHJldHVybiB0aGlzW2tQb29sXVtrRnJlZV1cbiAgfVxuXG4gIGdldCBwZW5kaW5nICgpIHtcbiAgICByZXR1cm4gdGhpc1trUG9vbF1ba1BlbmRpbmddXG4gIH1cblxuICBnZXQgcXVldWVkICgpIHtcbiAgICByZXR1cm4gdGhpc1trUG9vbF1ba1F1ZXVlZF1cbiAgfVxuXG4gIGdldCBydW5uaW5nICgpIHtcbiAgICByZXR1cm4gdGhpc1trUG9vbF1ba1J1bm5pbmddXG4gIH1cblxuICBnZXQgc2l6ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXNba1Bvb2xdW2tTaXplXVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9vbFN0YXRzXG4iXSwibmFtZXMiOlsia0ZyZWUiLCJrQ29ubmVjdGVkIiwia1BlbmRpbmciLCJrUXVldWVkIiwia1J1bm5pbmciLCJrU2l6ZSIsInJlcXVpcmUiLCJrUG9vbCIsIlN5bWJvbCIsIlBvb2xTdGF0cyIsImNvbnN0cnVjdG9yIiwicG9vbCIsImNvbm5lY3RlZCIsImZyZWUiLCJwZW5kaW5nIiwicXVldWVkIiwicnVubmluZyIsInNpemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/pool-stats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/pool.js":
/*!*****************************************!*\
  !*** ./node_modules/undici/lib/pool.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { PoolBase, kClients, kNeedDrain, kAddClient, kGetDispatcher } = __webpack_require__(/*! ./pool-base */ \"(ssr)/./node_modules/undici/lib/pool-base.js\");\nconst Client = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/undici/lib/client.js\");\nconst { InvalidArgumentError } = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst util = __webpack_require__(/*! ./core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { kUrl, kInterceptors } = __webpack_require__(/*! ./core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst buildConnector = __webpack_require__(/*! ./core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst kOptions = Symbol(\"options\");\nconst kConnections = Symbol(\"connections\");\nconst kFactory = Symbol(\"factory\");\nfunction defaultFactory(origin, opts) {\n    return new Client(origin, opts);\n}\nclass Pool extends PoolBase {\n    constructor(origin, { connections, factory = defaultFactory, connect, connectTimeout, tls, maxCachedSessions, socketPath, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, ...options } = {}){\n        super();\n        if (connections != null && (!Number.isFinite(connections) || connections < 0)) {\n            throw new InvalidArgumentError(\"invalid connections\");\n        }\n        if (typeof factory !== \"function\") {\n            throw new InvalidArgumentError(\"factory must be a function.\");\n        }\n        if (connect != null && typeof connect !== \"function\" && typeof connect !== \"object\") {\n            throw new InvalidArgumentError(\"connect must be a function or an object\");\n        }\n        if (typeof connect !== \"function\") {\n            connect = buildConnector({\n                ...tls,\n                maxCachedSessions,\n                allowH2,\n                socketPath,\n                timeout: connectTimeout == null ? 10e3 : connectTimeout,\n                ...util.nodeHasAutoSelectFamily && autoSelectFamily ? {\n                    autoSelectFamily,\n                    autoSelectFamilyAttemptTimeout\n                } : undefined,\n                ...connect\n            });\n        }\n        this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];\n        this[kConnections] = connections || null;\n        this[kUrl] = util.parseOrigin(origin);\n        this[kOptions] = {\n            ...util.deepClone(options),\n            connect,\n            allowH2\n        };\n        this[kOptions].interceptors = options.interceptors ? {\n            ...options.interceptors\n        } : undefined;\n        this[kFactory] = factory;\n    }\n    [kGetDispatcher]() {\n        let dispatcher = this[kClients].find((dispatcher)=>!dispatcher[kNeedDrain]);\n        if (dispatcher) {\n            return dispatcher;\n        }\n        if (!this[kConnections] || this[kClients].length < this[kConnections]) {\n            dispatcher = this[kFactory](this[kUrl], this[kOptions]);\n            this[kAddClient](dispatcher);\n        }\n        return dispatcher;\n    }\n}\nmodule.exports = Pool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi9wb29sLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUNKQSxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxVQUFVLEVBQ1ZDLGNBQWMsRUFDZixHQUFHQyxtQkFBT0EsQ0FBQztBQUNaLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU0sRUFDSkUsb0JBQW9CLEVBQ3JCLEdBQUdGLG1CQUFPQSxDQUFDO0FBQ1osTUFBTUcsT0FBT0gsbUJBQU9BLENBQUM7QUFDckIsTUFBTSxFQUFFSSxJQUFJLEVBQUVDLGFBQWEsRUFBRSxHQUFHTCxtQkFBT0EsQ0FBQztBQUN4QyxNQUFNTSxpQkFBaUJOLG1CQUFPQSxDQUFDO0FBRS9CLE1BQU1PLFdBQVdDLE9BQU87QUFDeEIsTUFBTUMsZUFBZUQsT0FBTztBQUM1QixNQUFNRSxXQUFXRixPQUFPO0FBRXhCLFNBQVNHLGVBQWdCQyxNQUFNLEVBQUVDLElBQUk7SUFDbkMsT0FBTyxJQUFJWixPQUFPVyxRQUFRQztBQUM1QjtBQUVBLE1BQU1DLGFBQWFuQjtJQUNqQm9CLFlBQWFILE1BQU0sRUFBRSxFQUNuQkksV0FBVyxFQUNYQyxVQUFVTixjQUFjLEVBQ3hCTyxPQUFPLEVBQ1BDLGNBQWMsRUFDZEMsR0FBRyxFQUNIQyxpQkFBaUIsRUFDakJDLFVBQVUsRUFDVkMsZ0JBQWdCLEVBQ2hCQyw4QkFBOEIsRUFDOUJDLE9BQU8sRUFDUCxHQUFHQyxTQUNKLEdBQUcsQ0FBQyxDQUFDLENBQUU7UUFDTixLQUFLO1FBRUwsSUFBSVYsZUFBZSxRQUFTLEVBQUNXLE9BQU9DLFFBQVEsQ0FBQ1osZ0JBQWdCQSxjQUFjLElBQUk7WUFDN0UsTUFBTSxJQUFJZCxxQkFBcUI7UUFDakM7UUFFQSxJQUFJLE9BQU9lLFlBQVksWUFBWTtZQUNqQyxNQUFNLElBQUlmLHFCQUFxQjtRQUNqQztRQUVBLElBQUlnQixXQUFXLFFBQVEsT0FBT0EsWUFBWSxjQUFjLE9BQU9BLFlBQVksVUFBVTtZQUNuRixNQUFNLElBQUloQixxQkFBcUI7UUFDakM7UUFFQSxJQUFJLE9BQU9nQixZQUFZLFlBQVk7WUFDakNBLFVBQVVaLGVBQWU7Z0JBQ3ZCLEdBQUdjLEdBQUc7Z0JBQ05DO2dCQUNBSTtnQkFDQUg7Z0JBQ0FPLFNBQVNWLGtCQUFrQixPQUFPLE9BQU9BO2dCQUN6QyxHQUFJaEIsS0FBSzJCLHVCQUF1QixJQUFJUCxtQkFBbUI7b0JBQUVBO29CQUFrQkM7Z0JBQStCLElBQUlPLFNBQVM7Z0JBQ3ZILEdBQUdiLE9BQU87WUFDWjtRQUNGO1FBRUEsSUFBSSxDQUFDYixjQUFjLEdBQUdxQixRQUFRTSxZQUFZLElBQUlOLFFBQVFNLFlBQVksQ0FBQ2xCLElBQUksSUFBSW1CLE1BQU1DLE9BQU8sQ0FBQ1IsUUFBUU0sWUFBWSxDQUFDbEIsSUFBSSxJQUM5R1ksUUFBUU0sWUFBWSxDQUFDbEIsSUFBSSxHQUN6QixFQUFFO1FBQ04sSUFBSSxDQUFDTCxhQUFhLEdBQUdPLGVBQWU7UUFDcEMsSUFBSSxDQUFDWixLQUFLLEdBQUdELEtBQUtnQyxXQUFXLENBQUN2QjtRQUM5QixJQUFJLENBQUNMLFNBQVMsR0FBRztZQUFFLEdBQUdKLEtBQUtpQyxTQUFTLENBQUNWLFFBQVE7WUFBRVI7WUFBU087UUFBUTtRQUNoRSxJQUFJLENBQUNsQixTQUFTLENBQUN5QixZQUFZLEdBQUdOLFFBQVFNLFlBQVksR0FDOUM7WUFBRSxHQUFHTixRQUFRTSxZQUFZO1FBQUMsSUFDMUJEO1FBQ0osSUFBSSxDQUFDckIsU0FBUyxHQUFHTztJQUNuQjtJQUVBLENBQUNsQixlQUFlLEdBQUk7UUFDbEIsSUFBSXNDLGFBQWEsSUFBSSxDQUFDekMsU0FBUyxDQUFDMEMsSUFBSSxDQUFDRCxDQUFBQSxhQUFjLENBQUNBLFVBQVUsQ0FBQ3hDLFdBQVc7UUFFMUUsSUFBSXdDLFlBQVk7WUFDZCxPQUFPQTtRQUNUO1FBRUEsSUFBSSxDQUFDLElBQUksQ0FBQzVCLGFBQWEsSUFBSSxJQUFJLENBQUNiLFNBQVMsQ0FBQzJDLE1BQU0sR0FBRyxJQUFJLENBQUM5QixhQUFhLEVBQUU7WUFDckU0QixhQUFhLElBQUksQ0FBQzNCLFNBQVMsQ0FBQyxJQUFJLENBQUNOLEtBQUssRUFBRSxJQUFJLENBQUNHLFNBQVM7WUFDdEQsSUFBSSxDQUFDVCxXQUFXLENBQUN1QztRQUNuQjtRQUVBLE9BQU9BO0lBQ1Q7QUFDRjtBQUVBRyxPQUFPQyxPQUFPLEdBQUczQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWUtdmlldy8uL25vZGVfbW9kdWxlcy91bmRpY2kvbGliL3Bvb2wuanM/OGNlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qge1xuICBQb29sQmFzZSxcbiAga0NsaWVudHMsXG4gIGtOZWVkRHJhaW4sXG4gIGtBZGRDbGllbnQsXG4gIGtHZXREaXNwYXRjaGVyXG59ID0gcmVxdWlyZSgnLi9wb29sLWJhc2UnKVxuY29uc3QgQ2xpZW50ID0gcmVxdWlyZSgnLi9jbGllbnQnKVxuY29uc3Qge1xuICBJbnZhbGlkQXJndW1lbnRFcnJvclxufSA9IHJlcXVpcmUoJy4vY29yZS9lcnJvcnMnKVxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4vY29yZS91dGlsJylcbmNvbnN0IHsga1VybCwga0ludGVyY2VwdG9ycyB9ID0gcmVxdWlyZSgnLi9jb3JlL3N5bWJvbHMnKVxuY29uc3QgYnVpbGRDb25uZWN0b3IgPSByZXF1aXJlKCcuL2NvcmUvY29ubmVjdCcpXG5cbmNvbnN0IGtPcHRpb25zID0gU3ltYm9sKCdvcHRpb25zJylcbmNvbnN0IGtDb25uZWN0aW9ucyA9IFN5bWJvbCgnY29ubmVjdGlvbnMnKVxuY29uc3Qga0ZhY3RvcnkgPSBTeW1ib2woJ2ZhY3RvcnknKVxuXG5mdW5jdGlvbiBkZWZhdWx0RmFjdG9yeSAob3JpZ2luLCBvcHRzKSB7XG4gIHJldHVybiBuZXcgQ2xpZW50KG9yaWdpbiwgb3B0cylcbn1cblxuY2xhc3MgUG9vbCBleHRlbmRzIFBvb2xCYXNlIHtcbiAgY29uc3RydWN0b3IgKG9yaWdpbiwge1xuICAgIGNvbm5lY3Rpb25zLFxuICAgIGZhY3RvcnkgPSBkZWZhdWx0RmFjdG9yeSxcbiAgICBjb25uZWN0LFxuICAgIGNvbm5lY3RUaW1lb3V0LFxuICAgIHRscyxcbiAgICBtYXhDYWNoZWRTZXNzaW9ucyxcbiAgICBzb2NrZXRQYXRoLFxuICAgIGF1dG9TZWxlY3RGYW1pbHksXG4gICAgYXV0b1NlbGVjdEZhbWlseUF0dGVtcHRUaW1lb3V0LFxuICAgIGFsbG93SDIsXG4gICAgLi4ub3B0aW9uc1xuICB9ID0ge30pIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAoY29ubmVjdGlvbnMgIT0gbnVsbCAmJiAoIU51bWJlci5pc0Zpbml0ZShjb25uZWN0aW9ucykgfHwgY29ubmVjdGlvbnMgPCAwKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdpbnZhbGlkIGNvbm5lY3Rpb25zJylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZhY3RvcnkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignZmFjdG9yeSBtdXN0IGJlIGEgZnVuY3Rpb24uJylcbiAgICB9XG5cbiAgICBpZiAoY29ubmVjdCAhPSBudWxsICYmIHR5cGVvZiBjb25uZWN0ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBjb25uZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdjb25uZWN0IG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QnKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29ubmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29ubmVjdCA9IGJ1aWxkQ29ubmVjdG9yKHtcbiAgICAgICAgLi4udGxzLFxuICAgICAgICBtYXhDYWNoZWRTZXNzaW9ucyxcbiAgICAgICAgYWxsb3dIMixcbiAgICAgICAgc29ja2V0UGF0aCxcbiAgICAgICAgdGltZW91dDogY29ubmVjdFRpbWVvdXQgPT0gbnVsbCA/IDEwZTMgOiBjb25uZWN0VGltZW91dCxcbiAgICAgICAgLi4uKHV0aWwubm9kZUhhc0F1dG9TZWxlY3RGYW1pbHkgJiYgYXV0b1NlbGVjdEZhbWlseSA/IHsgYXV0b1NlbGVjdEZhbWlseSwgYXV0b1NlbGVjdEZhbWlseUF0dGVtcHRUaW1lb3V0IH0gOiB1bmRlZmluZWQpLFxuICAgICAgICAuLi5jb25uZWN0XG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXNba0ludGVyY2VwdG9yc10gPSBvcHRpb25zLmludGVyY2VwdG9ycyAmJiBvcHRpb25zLmludGVyY2VwdG9ycy5Qb29sICYmIEFycmF5LmlzQXJyYXkob3B0aW9ucy5pbnRlcmNlcHRvcnMuUG9vbClcbiAgICAgID8gb3B0aW9ucy5pbnRlcmNlcHRvcnMuUG9vbFxuICAgICAgOiBbXVxuICAgIHRoaXNba0Nvbm5lY3Rpb25zXSA9IGNvbm5lY3Rpb25zIHx8IG51bGxcbiAgICB0aGlzW2tVcmxdID0gdXRpbC5wYXJzZU9yaWdpbihvcmlnaW4pXG4gICAgdGhpc1trT3B0aW9uc10gPSB7IC4uLnV0aWwuZGVlcENsb25lKG9wdGlvbnMpLCBjb25uZWN0LCBhbGxvd0gyIH1cbiAgICB0aGlzW2tPcHRpb25zXS5pbnRlcmNlcHRvcnMgPSBvcHRpb25zLmludGVyY2VwdG9yc1xuICAgICAgPyB7IC4uLm9wdGlvbnMuaW50ZXJjZXB0b3JzIH1cbiAgICAgIDogdW5kZWZpbmVkXG4gICAgdGhpc1trRmFjdG9yeV0gPSBmYWN0b3J5XG4gIH1cblxuICBba0dldERpc3BhdGNoZXJdICgpIHtcbiAgICBsZXQgZGlzcGF0Y2hlciA9IHRoaXNba0NsaWVudHNdLmZpbmQoZGlzcGF0Y2hlciA9PiAhZGlzcGF0Y2hlcltrTmVlZERyYWluXSlcblxuICAgIGlmIChkaXNwYXRjaGVyKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hlclxuICAgIH1cblxuICAgIGlmICghdGhpc1trQ29ubmVjdGlvbnNdIHx8IHRoaXNba0NsaWVudHNdLmxlbmd0aCA8IHRoaXNba0Nvbm5lY3Rpb25zXSkge1xuICAgICAgZGlzcGF0Y2hlciA9IHRoaXNba0ZhY3RvcnldKHRoaXNba1VybF0sIHRoaXNba09wdGlvbnNdKVxuICAgICAgdGhpc1trQWRkQ2xpZW50XShkaXNwYXRjaGVyKVxuICAgIH1cblxuICAgIHJldHVybiBkaXNwYXRjaGVyXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb29sXG4iXSwibmFtZXMiOlsiUG9vbEJhc2UiLCJrQ2xpZW50cyIsImtOZWVkRHJhaW4iLCJrQWRkQ2xpZW50Iiwia0dldERpc3BhdGNoZXIiLCJyZXF1aXJlIiwiQ2xpZW50IiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJ1dGlsIiwia1VybCIsImtJbnRlcmNlcHRvcnMiLCJidWlsZENvbm5lY3RvciIsImtPcHRpb25zIiwiU3ltYm9sIiwia0Nvbm5lY3Rpb25zIiwia0ZhY3RvcnkiLCJkZWZhdWx0RmFjdG9yeSIsIm9yaWdpbiIsIm9wdHMiLCJQb29sIiwiY29uc3RydWN0b3IiLCJjb25uZWN0aW9ucyIsImZhY3RvcnkiLCJjb25uZWN0IiwiY29ubmVjdFRpbWVvdXQiLCJ0bHMiLCJtYXhDYWNoZWRTZXNzaW9ucyIsInNvY2tldFBhdGgiLCJhdXRvU2VsZWN0RmFtaWx5IiwiYXV0b1NlbGVjdEZhbWlseUF0dGVtcHRUaW1lb3V0IiwiYWxsb3dIMiIsIm9wdGlvbnMiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsInRpbWVvdXQiLCJub2RlSGFzQXV0b1NlbGVjdEZhbWlseSIsInVuZGVmaW5lZCIsImludGVyY2VwdG9ycyIsIkFycmF5IiwiaXNBcnJheSIsInBhcnNlT3JpZ2luIiwiZGVlcENsb25lIiwiZGlzcGF0Y2hlciIsImZpbmQiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/proxy-agent.js":
/*!************************************************!*\
  !*** ./node_modules/undici/lib/proxy-agent.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { kProxy, kClose, kDestroy, kInterceptors } = __webpack_require__(/*! ./core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst Agent = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/undici/lib/agent.js\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/undici/lib/pool.js\");\nconst DispatcherBase = __webpack_require__(/*! ./dispatcher-base */ \"(ssr)/./node_modules/undici/lib/dispatcher-base.js\");\nconst { InvalidArgumentError, RequestAbortedError } = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/undici/lib/core/errors.js\");\nconst buildConnector = __webpack_require__(/*! ./core/connect */ \"(ssr)/./node_modules/undici/lib/core/connect.js\");\nconst kAgent = Symbol(\"proxy agent\");\nconst kClient = Symbol(\"proxy client\");\nconst kProxyHeaders = Symbol(\"proxy headers\");\nconst kRequestTls = Symbol(\"request tls settings\");\nconst kProxyTls = Symbol(\"proxy tls settings\");\nconst kConnectEndpoint = Symbol(\"connect endpoint function\");\nfunction defaultProtocolPort(protocol) {\n    return protocol === \"https:\" ? 443 : 80;\n}\nfunction buildProxyOptions(opts) {\n    if (typeof opts === \"string\") {\n        opts = {\n            uri: opts\n        };\n    }\n    if (!opts || !opts.uri) {\n        throw new InvalidArgumentError(\"Proxy opts.uri is mandatory\");\n    }\n    return {\n        uri: opts.uri,\n        protocol: opts.protocol || \"https\"\n    };\n}\nfunction defaultFactory(origin, opts) {\n    return new Pool(origin, opts);\n}\nclass ProxyAgent extends DispatcherBase {\n    constructor(opts){\n        super(opts);\n        this[kProxy] = buildProxyOptions(opts);\n        this[kAgent] = new Agent(opts);\n        this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];\n        if (typeof opts === \"string\") {\n            opts = {\n                uri: opts\n            };\n        }\n        if (!opts || !opts.uri) {\n            throw new InvalidArgumentError(\"Proxy opts.uri is mandatory\");\n        }\n        const { clientFactory = defaultFactory } = opts;\n        if (typeof clientFactory !== \"function\") {\n            throw new InvalidArgumentError(\"Proxy opts.clientFactory must be a function.\");\n        }\n        this[kRequestTls] = opts.requestTls;\n        this[kProxyTls] = opts.proxyTls;\n        this[kProxyHeaders] = opts.headers || {};\n        if (opts.auth && opts.token) {\n            throw new InvalidArgumentError(\"opts.auth cannot be used in combination with opts.token\");\n        } else if (opts.auth) {\n            /* @deprecated in favour of opts.token */ this[kProxyHeaders][\"proxy-authorization\"] = `Basic ${opts.auth}`;\n        } else if (opts.token) {\n            this[kProxyHeaders][\"proxy-authorization\"] = opts.token;\n        }\n        const resolvedUrl = new URL(opts.uri);\n        const { origin, port, host } = resolvedUrl;\n        const connect = buildConnector({\n            ...opts.proxyTls\n        });\n        this[kConnectEndpoint] = buildConnector({\n            ...opts.requestTls\n        });\n        this[kClient] = clientFactory(resolvedUrl, {\n            connect\n        });\n        this[kAgent] = new Agent({\n            ...opts,\n            connect: async (opts, callback)=>{\n                let requestedHost = opts.host;\n                if (!opts.port) {\n                    requestedHost += `:${defaultProtocolPort(opts.protocol)}`;\n                }\n                try {\n                    const { socket, statusCode } = await this[kClient].connect({\n                        origin,\n                        port,\n                        path: requestedHost,\n                        signal: opts.signal,\n                        headers: {\n                            ...this[kProxyHeaders],\n                            host\n                        }\n                    });\n                    if (statusCode !== 200) {\n                        socket.on(\"error\", ()=>{}).destroy();\n                        callback(new RequestAbortedError(\"Proxy response !== 200 when HTTP Tunneling\"));\n                    }\n                    if (opts.protocol !== \"https:\") {\n                        callback(null, socket);\n                        return;\n                    }\n                    let servername;\n                    if (this[kRequestTls]) {\n                        servername = this[kRequestTls].servername;\n                    } else {\n                        servername = opts.servername;\n                    }\n                    this[kConnectEndpoint]({\n                        ...opts,\n                        servername,\n                        httpSocket: socket\n                    }, callback);\n                } catch (err) {\n                    callback(err);\n                }\n            }\n        });\n    }\n    dispatch(opts, handler) {\n        const { host } = new URL(opts.origin);\n        const headers = buildHeaders(opts.headers);\n        throwIfProxyAuthIsSent(headers);\n        return this[kAgent].dispatch({\n            ...opts,\n            headers: {\n                ...headers,\n                host\n            }\n        }, handler);\n    }\n    async [kClose]() {\n        await this[kAgent].close();\n        await this[kClient].close();\n    }\n    async [kDestroy]() {\n        await this[kAgent].destroy();\n        await this[kClient].destroy();\n    }\n}\n/**\n * @param {string[] | Record<string, string>} headers\n * @returns {Record<string, string>}\n */ function buildHeaders(headers) {\n    // When using undici.fetch, the headers list is stored\n    // as an array.\n    if (Array.isArray(headers)) {\n        /** @type {Record<string, string>} */ const headersPair = {};\n        for(let i = 0; i < headers.length; i += 2){\n            headersPair[headers[i]] = headers[i + 1];\n        }\n        return headersPair;\n    }\n    return headers;\n}\n/**\n * @param {Record<string, string>} headers\n *\n * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers\n * Nevertheless, it was changed and to avoid a security vulnerability by end users\n * this check was created.\n * It should be removed in the next major version for performance reasons\n */ function throwIfProxyAuthIsSent(headers) {\n    const existProxyAuth = headers && Object.keys(headers).find((key)=>key.toLowerCase() === \"proxy-authorization\");\n    if (existProxyAuth) {\n        throw new InvalidArgumentError(\"Proxy-Authorization should be sent in ProxyAgent constructor\");\n    }\n}\nmodule.exports = ProxyAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/proxy-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/timers.js":
/*!*******************************************!*\
  !*** ./node_modules/undici/lib/timers.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
eval("\nlet fastNow = Date.now();\nlet fastNowTimeout;\nconst fastTimers = [];\nfunction onTimeout() {\n    fastNow = Date.now();\n    let len = fastTimers.length;\n    let idx = 0;\n    while(idx < len){\n        const timer = fastTimers[idx];\n        if (timer.state === 0) {\n            timer.state = fastNow + timer.delay;\n        } else if (timer.state > 0 && fastNow >= timer.state) {\n            timer.state = -1;\n            timer.callback(timer.opaque);\n        }\n        if (timer.state === -1) {\n            timer.state = -2;\n            if (idx !== len - 1) {\n                fastTimers[idx] = fastTimers.pop();\n            } else {\n                fastTimers.pop();\n            }\n            len -= 1;\n        } else {\n            idx += 1;\n        }\n    }\n    if (fastTimers.length > 0) {\n        refreshTimeout();\n    }\n}\nfunction refreshTimeout() {\n    if (fastNowTimeout && fastNowTimeout.refresh) {\n        fastNowTimeout.refresh();\n    } else {\n        clearTimeout(fastNowTimeout);\n        fastNowTimeout = setTimeout(onTimeout, 1e3);\n        if (fastNowTimeout.unref) {\n            fastNowTimeout.unref();\n        }\n    }\n}\nclass Timeout {\n    constructor(callback, delay, opaque){\n        this.callback = callback;\n        this.delay = delay;\n        this.opaque = opaque;\n        //  -2 not in timer list\n        //  -1 in timer list but inactive\n        //   0 in timer list waiting for time\n        // > 0 in timer list waiting for time to expire\n        this.state = -2;\n        this.refresh();\n    }\n    refresh() {\n        if (this.state === -2) {\n            fastTimers.push(this);\n            if (!fastNowTimeout || fastTimers.length === 1) {\n                refreshTimeout();\n            }\n        }\n        this.state = 0;\n    }\n    clear() {\n        this.state = -1;\n    }\n}\nmodule.exports = {\n    setTimeout (callback, delay, opaque) {\n        return delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);\n    },\n    clearTimeout (timeout) {\n        if (timeout instanceof Timeout) {\n            timeout.clear();\n        } else {\n            clearTimeout(timeout);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi90aW1lcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUFVQyxLQUFLQyxHQUFHO0FBQ3RCLElBQUlDO0FBRUosTUFBTUMsYUFBYSxFQUFFO0FBRXJCLFNBQVNDO0lBQ1BMLFVBQVVDLEtBQUtDLEdBQUc7SUFFbEIsSUFBSUksTUFBTUYsV0FBV0csTUFBTTtJQUMzQixJQUFJQyxNQUFNO0lBQ1YsTUFBT0EsTUFBTUYsSUFBSztRQUNoQixNQUFNRyxRQUFRTCxVQUFVLENBQUNJLElBQUk7UUFFN0IsSUFBSUMsTUFBTUMsS0FBSyxLQUFLLEdBQUc7WUFDckJELE1BQU1DLEtBQUssR0FBR1YsVUFBVVMsTUFBTUUsS0FBSztRQUNyQyxPQUFPLElBQUlGLE1BQU1DLEtBQUssR0FBRyxLQUFLVixXQUFXUyxNQUFNQyxLQUFLLEVBQUU7WUFDcERELE1BQU1DLEtBQUssR0FBRyxDQUFDO1lBQ2ZELE1BQU1HLFFBQVEsQ0FBQ0gsTUFBTUksTUFBTTtRQUM3QjtRQUVBLElBQUlKLE1BQU1DLEtBQUssS0FBSyxDQUFDLEdBQUc7WUFDdEJELE1BQU1DLEtBQUssR0FBRyxDQUFDO1lBQ2YsSUFBSUYsUUFBUUYsTUFBTSxHQUFHO2dCQUNuQkYsVUFBVSxDQUFDSSxJQUFJLEdBQUdKLFdBQVdVLEdBQUc7WUFDbEMsT0FBTztnQkFDTFYsV0FBV1UsR0FBRztZQUNoQjtZQUNBUixPQUFPO1FBQ1QsT0FBTztZQUNMRSxPQUFPO1FBQ1Q7SUFDRjtJQUVBLElBQUlKLFdBQVdHLE1BQU0sR0FBRyxHQUFHO1FBQ3pCUTtJQUNGO0FBQ0Y7QUFFQSxTQUFTQTtJQUNQLElBQUlaLGtCQUFrQkEsZUFBZWEsT0FBTyxFQUFFO1FBQzVDYixlQUFlYSxPQUFPO0lBQ3hCLE9BQU87UUFDTEMsYUFBYWQ7UUFDYkEsaUJBQWlCZSxXQUFXYixXQUFXO1FBQ3ZDLElBQUlGLGVBQWVnQixLQUFLLEVBQUU7WUFDeEJoQixlQUFlZ0IsS0FBSztRQUN0QjtJQUNGO0FBQ0Y7QUFFQSxNQUFNQztJQUNKQyxZQUFhVCxRQUFRLEVBQUVELEtBQUssRUFBRUUsTUFBTSxDQUFFO1FBQ3BDLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNELEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNFLE1BQU0sR0FBR0E7UUFFZCx3QkFBd0I7UUFDeEIsaUNBQWlDO1FBQ2pDLHFDQUFxQztRQUNyQywrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDSCxLQUFLLEdBQUcsQ0FBQztRQUVkLElBQUksQ0FBQ00sT0FBTztJQUNkO0lBRUFBLFVBQVc7UUFDVCxJQUFJLElBQUksQ0FBQ04sS0FBSyxLQUFLLENBQUMsR0FBRztZQUNyQk4sV0FBV2tCLElBQUksQ0FBQyxJQUFJO1lBQ3BCLElBQUksQ0FBQ25CLGtCQUFrQkMsV0FBV0csTUFBTSxLQUFLLEdBQUc7Z0JBQzlDUTtZQUNGO1FBQ0Y7UUFFQSxJQUFJLENBQUNMLEtBQUssR0FBRztJQUNmO0lBRUFhLFFBQVM7UUFDUCxJQUFJLENBQUNiLEtBQUssR0FBRyxDQUFDO0lBQ2hCO0FBQ0Y7QUFFQWMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZQLFlBQVlOLFFBQVEsRUFBRUQsS0FBSyxFQUFFRSxNQUFNO1FBQ2pDLE9BQU9GLFFBQVEsTUFDWE8sV0FBV04sVUFBVUQsT0FBT0UsVUFDNUIsSUFBSU8sUUFBUVIsVUFBVUQsT0FBT0U7SUFDbkM7SUFDQUksY0FBY1MsT0FBTztRQUNuQixJQUFJQSxtQkFBbUJOLFNBQVM7WUFDOUJNLFFBQVFILEtBQUs7UUFDZixPQUFPO1lBQ0xOLGFBQWFTO1FBQ2Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvdGltZXJzLmpzP2Q3MGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBmYXN0Tm93ID0gRGF0ZS5ub3coKVxubGV0IGZhc3ROb3dUaW1lb3V0XG5cbmNvbnN0IGZhc3RUaW1lcnMgPSBbXVxuXG5mdW5jdGlvbiBvblRpbWVvdXQgKCkge1xuICBmYXN0Tm93ID0gRGF0ZS5ub3coKVxuXG4gIGxldCBsZW4gPSBmYXN0VGltZXJzLmxlbmd0aFxuICBsZXQgaWR4ID0gMFxuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgY29uc3QgdGltZXIgPSBmYXN0VGltZXJzW2lkeF1cblxuICAgIGlmICh0aW1lci5zdGF0ZSA9PT0gMCkge1xuICAgICAgdGltZXIuc3RhdGUgPSBmYXN0Tm93ICsgdGltZXIuZGVsYXlcbiAgICB9IGVsc2UgaWYgKHRpbWVyLnN0YXRlID4gMCAmJiBmYXN0Tm93ID49IHRpbWVyLnN0YXRlKSB7XG4gICAgICB0aW1lci5zdGF0ZSA9IC0xXG4gICAgICB0aW1lci5jYWxsYmFjayh0aW1lci5vcGFxdWUpXG4gICAgfVxuXG4gICAgaWYgKHRpbWVyLnN0YXRlID09PSAtMSkge1xuICAgICAgdGltZXIuc3RhdGUgPSAtMlxuICAgICAgaWYgKGlkeCAhPT0gbGVuIC0gMSkge1xuICAgICAgICBmYXN0VGltZXJzW2lkeF0gPSBmYXN0VGltZXJzLnBvcCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmYXN0VGltZXJzLnBvcCgpXG4gICAgICB9XG4gICAgICBsZW4gLT0gMVxuICAgIH0gZWxzZSB7XG4gICAgICBpZHggKz0gMVxuICAgIH1cbiAgfVxuXG4gIGlmIChmYXN0VGltZXJzLmxlbmd0aCA+IDApIHtcbiAgICByZWZyZXNoVGltZW91dCgpXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVmcmVzaFRpbWVvdXQgKCkge1xuICBpZiAoZmFzdE5vd1RpbWVvdXQgJiYgZmFzdE5vd1RpbWVvdXQucmVmcmVzaCkge1xuICAgIGZhc3ROb3dUaW1lb3V0LnJlZnJlc2goKVxuICB9IGVsc2Uge1xuICAgIGNsZWFyVGltZW91dChmYXN0Tm93VGltZW91dClcbiAgICBmYXN0Tm93VGltZW91dCA9IHNldFRpbWVvdXQob25UaW1lb3V0LCAxZTMpXG4gICAgaWYgKGZhc3ROb3dUaW1lb3V0LnVucmVmKSB7XG4gICAgICBmYXN0Tm93VGltZW91dC51bnJlZigpXG4gICAgfVxuICB9XG59XG5cbmNsYXNzIFRpbWVvdXQge1xuICBjb25zdHJ1Y3RvciAoY2FsbGJhY2ssIGRlbGF5LCBvcGFxdWUpIHtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLmRlbGF5ID0gZGVsYXlcbiAgICB0aGlzLm9wYXF1ZSA9IG9wYXF1ZVxuXG4gICAgLy8gIC0yIG5vdCBpbiB0aW1lciBsaXN0XG4gICAgLy8gIC0xIGluIHRpbWVyIGxpc3QgYnV0IGluYWN0aXZlXG4gICAgLy8gICAwIGluIHRpbWVyIGxpc3Qgd2FpdGluZyBmb3IgdGltZVxuICAgIC8vID4gMCBpbiB0aW1lciBsaXN0IHdhaXRpbmcgZm9yIHRpbWUgdG8gZXhwaXJlXG4gICAgdGhpcy5zdGF0ZSA9IC0yXG5cbiAgICB0aGlzLnJlZnJlc2goKVxuICB9XG5cbiAgcmVmcmVzaCAoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IC0yKSB7XG4gICAgICBmYXN0VGltZXJzLnB1c2godGhpcylcbiAgICAgIGlmICghZmFzdE5vd1RpbWVvdXQgfHwgZmFzdFRpbWVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVmcmVzaFRpbWVvdXQoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSAwXG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IC0xXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldFRpbWVvdXQgKGNhbGxiYWNrLCBkZWxheSwgb3BhcXVlKSB7XG4gICAgcmV0dXJuIGRlbGF5IDwgMWUzXG4gICAgICA/IHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5LCBvcGFxdWUpXG4gICAgICA6IG5ldyBUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSwgb3BhcXVlKVxuICB9LFxuICBjbGVhclRpbWVvdXQgKHRpbWVvdXQpIHtcbiAgICBpZiAodGltZW91dCBpbnN0YW5jZW9mIFRpbWVvdXQpIHtcbiAgICAgIHRpbWVvdXQuY2xlYXIoKVxuICAgIH0gZWxzZSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmYXN0Tm93IiwiRGF0ZSIsIm5vdyIsImZhc3ROb3dUaW1lb3V0IiwiZmFzdFRpbWVycyIsIm9uVGltZW91dCIsImxlbiIsImxlbmd0aCIsImlkeCIsInRpbWVyIiwic3RhdGUiLCJkZWxheSIsImNhbGxiYWNrIiwib3BhcXVlIiwicG9wIiwicmVmcmVzaFRpbWVvdXQiLCJyZWZyZXNoIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInVucmVmIiwiVGltZW91dCIsImNvbnN0cnVjdG9yIiwicHVzaCIsImNsZWFyIiwibW9kdWxlIiwiZXhwb3J0cyIsInRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/timers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/websocket/connection.js":
/*!*********************************************************!*\
  !*** ./node_modules/undici/lib/websocket/connection.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst diagnosticsChannel = __webpack_require__(/*! diagnostics_channel */ \"diagnostics_channel\");\nconst { uid, states } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/websocket/constants.js\");\nconst { kReadyState, kSentClose, kByteParser, kReceivedClose } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/websocket/symbols.js\");\nconst { fireEvent, failWebsocketConnection } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/websocket/util.js\");\nconst { CloseEvent } = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/undici/lib/websocket/events.js\");\nconst { makeRequest } = __webpack_require__(/*! ../fetch/request */ \"(ssr)/./node_modules/undici/lib/fetch/request.js\");\nconst { fetching } = __webpack_require__(/*! ../fetch/index */ \"(ssr)/./node_modules/undici/lib/fetch/index.js\");\nconst { Headers } = __webpack_require__(/*! ../fetch/headers */ \"(ssr)/./node_modules/undici/lib/fetch/headers.js\");\nconst { getGlobalDispatcher } = __webpack_require__(/*! ../global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst { kHeadersList } = __webpack_require__(/*! ../core/symbols */ \"(ssr)/./node_modules/undici/lib/core/symbols.js\");\nconst channels = {};\nchannels.open = diagnosticsChannel.channel(\"undici:websocket:open\");\nchannels.close = diagnosticsChannel.channel(\"undici:websocket:close\");\nchannels.socketError = diagnosticsChannel.channel(\"undici:websocket:socket_error\");\n/** @type {import('crypto')} */ let crypto;\ntry {\n    crypto = __webpack_require__(/*! crypto */ \"crypto\");\n} catch  {}\n/**\n * @see https://websockets.spec.whatwg.org/#concept-websocket-establish\n * @param {URL} url\n * @param {string|string[]} protocols\n * @param {import('./websocket').WebSocket} ws\n * @param {(response: any) => void} onEstablish\n * @param {Partial<import('../../types/websocket').WebSocketInit>} options\n */ function establishWebSocketConnection(url, protocols, ws, onEstablish, options) {\n    // 1. Let requestURL be a copy of url, with its scheme set to \"http\", if url’s\n    //    scheme is \"ws\", and to \"https\" otherwise.\n    const requestURL = url;\n    requestURL.protocol = url.protocol === \"ws:\" ? \"http:\" : \"https:\";\n    // 2. Let request be a new request, whose URL is requestURL, client is client,\n    //    service-workers mode is \"none\", referrer is \"no-referrer\", mode is\n    //    \"websocket\", credentials mode is \"include\", cache mode is \"no-store\" ,\n    //    and redirect mode is \"error\".\n    const request = makeRequest({\n        urlList: [\n            requestURL\n        ],\n        serviceWorkers: \"none\",\n        referrer: \"no-referrer\",\n        mode: \"websocket\",\n        credentials: \"include\",\n        cache: \"no-store\",\n        redirect: \"error\"\n    });\n    // Note: undici extension, allow setting custom headers.\n    if (options.headers) {\n        const headersList = new Headers(options.headers)[kHeadersList];\n        request.headersList = headersList;\n    }\n    // 3. Append (`Upgrade`, `websocket`) to request’s header list.\n    // 4. Append (`Connection`, `Upgrade`) to request’s header list.\n    // Note: both of these are handled by undici currently.\n    // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397\n    // 5. Let keyValue be a nonce consisting of a randomly selected\n    //    16-byte value that has been forgiving-base64-encoded and\n    //    isomorphic encoded.\n    const keyValue = crypto.randomBytes(16).toString(\"base64\");\n    // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s\n    //    header list.\n    request.headersList.append(\"sec-websocket-key\", keyValue);\n    // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s\n    //    header list.\n    request.headersList.append(\"sec-websocket-version\", \"13\");\n    // 8. For each protocol in protocols, combine\n    //    (`Sec-WebSocket-Protocol`, protocol) in request’s header\n    //    list.\n    for (const protocol of protocols){\n        request.headersList.append(\"sec-websocket-protocol\", protocol);\n    }\n    // 9. Let permessageDeflate be a user-agent defined\n    //    \"permessage-deflate\" extension header value.\n    // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673\n    // TODO: enable once permessage-deflate is supported\n    const permessageDeflate = \"\" // 'permessage-deflate; 15'\n    ;\n    // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to\n    //     request’s header list.\n    // request.headersList.append('sec-websocket-extensions', permessageDeflate)\n    // 11. Fetch request with useParallelQueue set to true, and\n    //     processResponse given response being these steps:\n    const controller = fetching({\n        request,\n        useParallelQueue: true,\n        dispatcher: options.dispatcher ?? getGlobalDispatcher(),\n        processResponse (response) {\n            // 1. If response is a network error or its status is not 101,\n            //    fail the WebSocket connection.\n            if (response.type === \"error\" || response.status !== 101) {\n                failWebsocketConnection(ws, \"Received network error or non-101 status code.\");\n                return;\n            }\n            // 2. If protocols is not the empty list and extracting header\n            //    list values given `Sec-WebSocket-Protocol` and response’s\n            //    header list results in null, failure, or the empty byte\n            //    sequence, then fail the WebSocket connection.\n            if (protocols.length !== 0 && !response.headersList.get(\"Sec-WebSocket-Protocol\")) {\n                failWebsocketConnection(ws, \"Server did not respond with sent protocols.\");\n                return;\n            }\n            // 3. Follow the requirements stated step 2 to step 6, inclusive,\n            //    of the last set of steps in section 4.1 of The WebSocket\n            //    Protocol to validate response. This either results in fail\n            //    the WebSocket connection or the WebSocket connection is\n            //    established.\n            // 2. If the response lacks an |Upgrade| header field or the |Upgrade|\n            //    header field contains a value that is not an ASCII case-\n            //    insensitive match for the value \"websocket\", the client MUST\n            //    _Fail the WebSocket Connection_.\n            if (response.headersList.get(\"Upgrade\")?.toLowerCase() !== \"websocket\") {\n                failWebsocketConnection(ws, 'Server did not set Upgrade header to \"websocket\".');\n                return;\n            }\n            // 3. If the response lacks a |Connection| header field or the\n            //    |Connection| header field doesn't contain a token that is an\n            //    ASCII case-insensitive match for the value \"Upgrade\", the client\n            //    MUST _Fail the WebSocket Connection_.\n            if (response.headersList.get(\"Connection\")?.toLowerCase() !== \"upgrade\") {\n                failWebsocketConnection(ws, 'Server did not set Connection header to \"upgrade\".');\n                return;\n            }\n            // 4. If the response lacks a |Sec-WebSocket-Accept| header field or\n            //    the |Sec-WebSocket-Accept| contains a value other than the\n            //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-\n            //    Key| (as a string, not base64-decoded) with the string \"258EAFA5-\n            //    E914-47DA-95CA-C5AB0DC85B11\" but ignoring any leading and\n            //    trailing whitespace, the client MUST _Fail the WebSocket\n            //    Connection_.\n            const secWSAccept = response.headersList.get(\"Sec-WebSocket-Accept\");\n            const digest = crypto.createHash(\"sha1\").update(keyValue + uid).digest(\"base64\");\n            if (secWSAccept !== digest) {\n                failWebsocketConnection(ws, \"Incorrect hash received in Sec-WebSocket-Accept header.\");\n                return;\n            }\n            // 5. If the response includes a |Sec-WebSocket-Extensions| header\n            //    field and this header field indicates the use of an extension\n            //    that was not present in the client's handshake (the server has\n            //    indicated an extension not requested by the client), the client\n            //    MUST _Fail the WebSocket Connection_.  (The parsing of this\n            //    header field to determine which extensions are requested is\n            //    discussed in Section 9.1.)\n            const secExtension = response.headersList.get(\"Sec-WebSocket-Extensions\");\n            if (secExtension !== null && secExtension !== permessageDeflate) {\n                failWebsocketConnection(ws, \"Received different permessage-deflate than the one set.\");\n                return;\n            }\n            // 6. If the response includes a |Sec-WebSocket-Protocol| header field\n            //    and this header field indicates the use of a subprotocol that was\n            //    not present in the client's handshake (the server has indicated a\n            //    subprotocol not requested by the client), the client MUST _Fail\n            //    the WebSocket Connection_.\n            const secProtocol = response.headersList.get(\"Sec-WebSocket-Protocol\");\n            if (secProtocol !== null && secProtocol !== request.headersList.get(\"Sec-WebSocket-Protocol\")) {\n                failWebsocketConnection(ws, \"Protocol was not set in the opening handshake.\");\n                return;\n            }\n            response.socket.on(\"data\", onSocketData);\n            response.socket.on(\"close\", onSocketClose);\n            response.socket.on(\"error\", onSocketError);\n            if (channels.open.hasSubscribers) {\n                channels.open.publish({\n                    address: response.socket.address(),\n                    protocol: secProtocol,\n                    extensions: secExtension\n                });\n            }\n            onEstablish(response);\n        }\n    });\n    return controller;\n}\n/**\n * @param {Buffer} chunk\n */ function onSocketData(chunk) {\n    if (!this.ws[kByteParser].write(chunk)) {\n        this.pause();\n    }\n}\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4\n */ function onSocketClose() {\n    const { ws } = this;\n    // If the TCP connection was closed after the\n    // WebSocket closing handshake was completed, the WebSocket connection\n    // is said to have been closed _cleanly_.\n    const wasClean = ws[kSentClose] && ws[kReceivedClose];\n    let code = 1005;\n    let reason = \"\";\n    const result = ws[kByteParser].closingInfo;\n    if (result) {\n        code = result.code ?? 1005;\n        reason = result.reason;\n    } else if (!ws[kSentClose]) {\n        // If _The WebSocket\n        // Connection is Closed_ and no Close control frame was received by the\n        // endpoint (such as could occur if the underlying transport connection\n        // is lost), _The WebSocket Connection Close Code_ is considered to be\n        // 1006.\n        code = 1006;\n    }\n    // 1. Change the ready state to CLOSED (3).\n    ws[kReadyState] = states.CLOSED;\n    // 2. If the user agent was required to fail the WebSocket\n    //    connection, or if the WebSocket connection was closed\n    //    after being flagged as full, fire an event named error\n    //    at the WebSocket object.\n    // TODO\n    // 3. Fire an event named close at the WebSocket object,\n    //    using CloseEvent, with the wasClean attribute\n    //    initialized to true if the connection closed cleanly\n    //    and false otherwise, the code attribute initialized to\n    //    the WebSocket connection close code, and the reason\n    //    attribute initialized to the result of applying UTF-8\n    //    decode without BOM to the WebSocket connection close\n    //    reason.\n    fireEvent(\"close\", ws, CloseEvent, {\n        wasClean,\n        code,\n        reason\n    });\n    if (channels.close.hasSubscribers) {\n        channels.close.publish({\n            websocket: ws,\n            code,\n            reason\n        });\n    }\n}\nfunction onSocketError(error) {\n    const { ws } = this;\n    ws[kReadyState] = states.CLOSING;\n    if (channels.socketError.hasSubscribers) {\n        channels.socketError.publish(error);\n    }\n    this.destroy();\n}\nmodule.exports = {\n    establishWebSocketConnection\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/websocket/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/websocket/constants.js":
/*!********************************************************!*\
  !*** ./node_modules/undici/lib/websocket/constants.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\n// This is a Globally Unique Identifier unique used\n// to validate that the endpoint accepts websocket\n// connections.\n// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3\nconst uid = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n/** @type {PropertyDescriptor} */ const staticPropertyDescriptors = {\n    enumerable: true,\n    writable: false,\n    configurable: false\n};\nconst states = {\n    CONNECTING: 0,\n    OPEN: 1,\n    CLOSING: 2,\n    CLOSED: 3\n};\nconst opcodes = {\n    CONTINUATION: 0x0,\n    TEXT: 0x1,\n    BINARY: 0x2,\n    CLOSE: 0x8,\n    PING: 0x9,\n    PONG: 0xA\n};\nconst maxUnsigned16Bit = 2 ** 16 - 1 // 65535\n;\nconst parserStates = {\n    INFO: 0,\n    PAYLOADLENGTH_16: 2,\n    PAYLOADLENGTH_64: 3,\n    READ_DATA: 4\n};\nconst emptyBuffer = Buffer.allocUnsafe(0);\nmodule.exports = {\n    uid,\n    staticPropertyDescriptors,\n    states,\n    opcodes,\n    maxUnsigned16Bit,\n    parserStates,\n    emptyBuffer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWJzb2NrZXQvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsbURBQW1EO0FBQ25ELGtEQUFrRDtBQUNsRCxlQUFlO0FBQ2YsOERBQThEO0FBQzlELE1BQU1BLE1BQU07QUFFWiwrQkFBK0IsR0FDL0IsTUFBTUMsNEJBQTRCO0lBQ2hDQyxZQUFZO0lBQ1pDLFVBQVU7SUFDVkMsY0FBYztBQUNoQjtBQUVBLE1BQU1DLFNBQVM7SUFDYkMsWUFBWTtJQUNaQyxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsUUFBUTtBQUNWO0FBRUEsTUFBTUMsVUFBVTtJQUNkQyxjQUFjO0lBQ2RDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLE1BQU07SUFDTkMsTUFBTTtBQUNSO0FBRUEsTUFBTUMsbUJBQW1CLEtBQUssS0FBSyxFQUFFLFFBQVE7O0FBRTdDLE1BQU1DLGVBQWU7SUFDbkJDLE1BQU07SUFDTkMsa0JBQWtCO0lBQ2xCQyxrQkFBa0I7SUFDbEJDLFdBQVc7QUFDYjtBQUVBLE1BQU1DLGNBQWNDLE9BQU9DLFdBQVcsQ0FBQztBQUV2Q0MsT0FBT0MsT0FBTyxHQUFHO0lBQ2YzQjtJQUNBQztJQUNBSTtJQUNBSztJQUNBTztJQUNBQztJQUNBSztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvd2Vic29ja2V0L2NvbnN0YW50cy5qcz9iNzYyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vLyBUaGlzIGlzIGEgR2xvYmFsbHkgVW5pcXVlIElkZW50aWZpZXIgdW5pcXVlIHVzZWRcbi8vIHRvIHZhbGlkYXRlIHRoYXQgdGhlIGVuZHBvaW50IGFjY2VwdHMgd2Vic29ja2V0XG4vLyBjb25uZWN0aW9ucy5cbi8vIFNlZSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNjQ1NS5odG1sI3NlY3Rpb24tMS4zXG5jb25zdCB1aWQgPSAnMjU4RUFGQTUtRTkxNC00N0RBLTk1Q0EtQzVBQjBEQzg1QjExJ1xuXG4vKiogQHR5cGUge1Byb3BlcnR5RGVzY3JpcHRvcn0gKi9cbmNvbnN0IHN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMgPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHdyaXRhYmxlOiBmYWxzZSxcbiAgY29uZmlndXJhYmxlOiBmYWxzZVxufVxuXG5jb25zdCBzdGF0ZXMgPSB7XG4gIENPTk5FQ1RJTkc6IDAsXG4gIE9QRU46IDEsXG4gIENMT1NJTkc6IDIsXG4gIENMT1NFRDogM1xufVxuXG5jb25zdCBvcGNvZGVzID0ge1xuICBDT05USU5VQVRJT046IDB4MCxcbiAgVEVYVDogMHgxLFxuICBCSU5BUlk6IDB4MixcbiAgQ0xPU0U6IDB4OCxcbiAgUElORzogMHg5LFxuICBQT05HOiAweEFcbn1cblxuY29uc3QgbWF4VW5zaWduZWQxNkJpdCA9IDIgKiogMTYgLSAxIC8vIDY1NTM1XG5cbmNvbnN0IHBhcnNlclN0YXRlcyA9IHtcbiAgSU5GTzogMCxcbiAgUEFZTE9BRExFTkdUSF8xNjogMixcbiAgUEFZTE9BRExFTkdUSF82NDogMyxcbiAgUkVBRF9EQVRBOiA0XG59XG5cbmNvbnN0IGVtcHR5QnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB1aWQsXG4gIHN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMsXG4gIHN0YXRlcyxcbiAgb3Bjb2RlcyxcbiAgbWF4VW5zaWduZWQxNkJpdCxcbiAgcGFyc2VyU3RhdGVzLFxuICBlbXB0eUJ1ZmZlclxufVxuIl0sIm5hbWVzIjpbInVpZCIsInN0YXRpY1Byb3BlcnR5RGVzY3JpcHRvcnMiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzdGF0ZXMiLCJDT05ORUNUSU5HIiwiT1BFTiIsIkNMT1NJTkciLCJDTE9TRUQiLCJvcGNvZGVzIiwiQ09OVElOVUFUSU9OIiwiVEVYVCIsIkJJTkFSWSIsIkNMT1NFIiwiUElORyIsIlBPTkciLCJtYXhVbnNpZ25lZDE2Qml0IiwicGFyc2VyU3RhdGVzIiwiSU5GTyIsIlBBWUxPQURMRU5HVEhfMTYiLCJQQVlMT0FETEVOR1RIXzY0IiwiUkVBRF9EQVRBIiwiZW1wdHlCdWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/websocket/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/websocket/events.js":
/*!*****************************************************!*\
  !*** ./node_modules/undici/lib/websocket/events.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { kEnumerableProperty } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { MessagePort } = __webpack_require__(/*! worker_threads */ \"worker_threads\");\n/**\n * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent\n */ class MessageEvent extends Event {\n    #eventInit;\n    constructor(type, eventInitDict = {}){\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"MessageEvent constructor\"\n        });\n        type = webidl.converters.DOMString(type);\n        eventInitDict = webidl.converters.MessageEventInit(eventInitDict);\n        super(type, eventInitDict);\n        this.#eventInit = eventInitDict;\n    }\n    get data() {\n        webidl.brandCheck(this, MessageEvent);\n        return this.#eventInit.data;\n    }\n    get origin() {\n        webidl.brandCheck(this, MessageEvent);\n        return this.#eventInit.origin;\n    }\n    get lastEventId() {\n        webidl.brandCheck(this, MessageEvent);\n        return this.#eventInit.lastEventId;\n    }\n    get source() {\n        webidl.brandCheck(this, MessageEvent);\n        return this.#eventInit.source;\n    }\n    get ports() {\n        webidl.brandCheck(this, MessageEvent);\n        if (!Object.isFrozen(this.#eventInit.ports)) {\n            Object.freeze(this.#eventInit.ports);\n        }\n        return this.#eventInit.ports;\n    }\n    initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = \"\", lastEventId = \"\", source = null, ports = []) {\n        webidl.brandCheck(this, MessageEvent);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"MessageEvent.initMessageEvent\"\n        });\n        return new MessageEvent(type, {\n            bubbles,\n            cancelable,\n            data,\n            origin,\n            lastEventId,\n            source,\n            ports\n        });\n    }\n}\n/**\n * @see https://websockets.spec.whatwg.org/#the-closeevent-interface\n */ class CloseEvent extends Event {\n    #eventInit;\n    constructor(type, eventInitDict = {}){\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"CloseEvent constructor\"\n        });\n        type = webidl.converters.DOMString(type);\n        eventInitDict = webidl.converters.CloseEventInit(eventInitDict);\n        super(type, eventInitDict);\n        this.#eventInit = eventInitDict;\n    }\n    get wasClean() {\n        webidl.brandCheck(this, CloseEvent);\n        return this.#eventInit.wasClean;\n    }\n    get code() {\n        webidl.brandCheck(this, CloseEvent);\n        return this.#eventInit.code;\n    }\n    get reason() {\n        webidl.brandCheck(this, CloseEvent);\n        return this.#eventInit.reason;\n    }\n}\n// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface\nclass ErrorEvent extends Event {\n    #eventInit;\n    constructor(type, eventInitDict){\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"ErrorEvent constructor\"\n        });\n        super(type, eventInitDict);\n        type = webidl.converters.DOMString(type);\n        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});\n        this.#eventInit = eventInitDict;\n    }\n    get message() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.message;\n    }\n    get filename() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.filename;\n    }\n    get lineno() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.lineno;\n    }\n    get colno() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.colno;\n    }\n    get error() {\n        webidl.brandCheck(this, ErrorEvent);\n        return this.#eventInit.error;\n    }\n}\nObject.defineProperties(MessageEvent.prototype, {\n    [Symbol.toStringTag]: {\n        value: \"MessageEvent\",\n        configurable: true\n    },\n    data: kEnumerableProperty,\n    origin: kEnumerableProperty,\n    lastEventId: kEnumerableProperty,\n    source: kEnumerableProperty,\n    ports: kEnumerableProperty,\n    initMessageEvent: kEnumerableProperty\n});\nObject.defineProperties(CloseEvent.prototype, {\n    [Symbol.toStringTag]: {\n        value: \"CloseEvent\",\n        configurable: true\n    },\n    reason: kEnumerableProperty,\n    code: kEnumerableProperty,\n    wasClean: kEnumerableProperty\n});\nObject.defineProperties(ErrorEvent.prototype, {\n    [Symbol.toStringTag]: {\n        value: \"ErrorEvent\",\n        configurable: true\n    },\n    message: kEnumerableProperty,\n    filename: kEnumerableProperty,\n    lineno: kEnumerableProperty,\n    colno: kEnumerableProperty,\n    error: kEnumerableProperty\n});\nwebidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);\nwebidl.converters[\"sequence<MessagePort>\"] = webidl.sequenceConverter(webidl.converters.MessagePort);\nconst eventInit = [\n    {\n        key: \"bubbles\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    },\n    {\n        key: \"cancelable\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    },\n    {\n        key: \"composed\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    }\n];\nwebidl.converters.MessageEventInit = webidl.dictionaryConverter([\n    ...eventInit,\n    {\n        key: \"data\",\n        converter: webidl.converters.any,\n        defaultValue: null\n    },\n    {\n        key: \"origin\",\n        converter: webidl.converters.USVString,\n        defaultValue: \"\"\n    },\n    {\n        key: \"lastEventId\",\n        converter: webidl.converters.DOMString,\n        defaultValue: \"\"\n    },\n    {\n        key: \"source\",\n        // Node doesn't implement WindowProxy or ServiceWorker, so the only\n        // valid value for source is a MessagePort.\n        converter: webidl.nullableConverter(webidl.converters.MessagePort),\n        defaultValue: null\n    },\n    {\n        key: \"ports\",\n        converter: webidl.converters[\"sequence<MessagePort>\"],\n        get defaultValue () {\n            return [];\n        }\n    }\n]);\nwebidl.converters.CloseEventInit = webidl.dictionaryConverter([\n    ...eventInit,\n    {\n        key: \"wasClean\",\n        converter: webidl.converters.boolean,\n        defaultValue: false\n    },\n    {\n        key: \"code\",\n        converter: webidl.converters[\"unsigned short\"],\n        defaultValue: 0\n    },\n    {\n        key: \"reason\",\n        converter: webidl.converters.USVString,\n        defaultValue: \"\"\n    }\n]);\nwebidl.converters.ErrorEventInit = webidl.dictionaryConverter([\n    ...eventInit,\n    {\n        key: \"message\",\n        converter: webidl.converters.DOMString,\n        defaultValue: \"\"\n    },\n    {\n        key: \"filename\",\n        converter: webidl.converters.USVString,\n        defaultValue: \"\"\n    },\n    {\n        key: \"lineno\",\n        converter: webidl.converters[\"unsigned long\"],\n        defaultValue: 0\n    },\n    {\n        key: \"colno\",\n        converter: webidl.converters[\"unsigned long\"],\n        defaultValue: 0\n    },\n    {\n        key: \"error\",\n        converter: webidl.converters.any\n    }\n]);\nmodule.exports = {\n    MessageEvent,\n    CloseEvent,\n    ErrorEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/websocket/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/websocket/frame.js":
/*!****************************************************!*\
  !*** ./node_modules/undici/lib/websocket/frame.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { maxUnsigned16Bit } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/websocket/constants.js\");\n/** @type {import('crypto')} */ let crypto;\ntry {\n    crypto = __webpack_require__(/*! crypto */ \"crypto\");\n} catch  {}\nclass WebsocketFrameSend {\n    /**\n   * @param {Buffer|undefined} data\n   */ constructor(data){\n        this.frameData = data;\n        this.maskKey = crypto.randomBytes(4);\n    }\n    createFrame(opcode) {\n        const bodyLength = this.frameData?.byteLength ?? 0;\n        /** @type {number} */ let payloadLength = bodyLength // 0-125\n        ;\n        let offset = 6;\n        if (bodyLength > maxUnsigned16Bit) {\n            offset += 8 // payload length is next 8 bytes\n            ;\n            payloadLength = 127;\n        } else if (bodyLength > 125) {\n            offset += 2 // payload length is next 2 bytes\n            ;\n            payloadLength = 126;\n        }\n        const buffer = Buffer.allocUnsafe(bodyLength + offset);\n        // Clear first 2 bytes, everything else is overwritten\n        buffer[0] = buffer[1] = 0;\n        buffer[0] |= 0x80 // FIN\n        ;\n        buffer[0] = (buffer[0] & 0xF0) + opcode // opcode\n        ;\n        /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */ buffer[offset - 4] = this.maskKey[0];\n        buffer[offset - 3] = this.maskKey[1];\n        buffer[offset - 2] = this.maskKey[2];\n        buffer[offset - 1] = this.maskKey[3];\n        buffer[1] = payloadLength;\n        if (payloadLength === 126) {\n            buffer.writeUInt16BE(bodyLength, 2);\n        } else if (payloadLength === 127) {\n            // Clear extended payload length\n            buffer[2] = buffer[3] = 0;\n            buffer.writeUIntBE(bodyLength, 4, 6);\n        }\n        buffer[1] |= 0x80 // MASK\n        ;\n        // mask body\n        for(let i = 0; i < bodyLength; i++){\n            buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];\n        }\n        return buffer;\n    }\n}\nmodule.exports = {\n    WebsocketFrameSend\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWJzb2NrZXQvZnJhbWUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLGdCQUFnQixFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRXJDLDZCQUE2QixHQUM3QixJQUFJQztBQUNKLElBQUk7SUFDRkEsU0FBU0QsbUJBQU9BLENBQUM7QUFDbkIsRUFBRSxPQUFNLENBRVI7QUFFQSxNQUFNRTtJQUNKOztHQUVDLEdBQ0RDLFlBQWFDLElBQUksQ0FBRTtRQUNqQixJQUFJLENBQUNDLFNBQVMsR0FBR0Q7UUFDakIsSUFBSSxDQUFDRSxPQUFPLEdBQUdMLE9BQU9NLFdBQVcsQ0FBQztJQUNwQztJQUVBQyxZQUFhQyxNQUFNLEVBQUU7UUFDbkIsTUFBTUMsYUFBYSxJQUFJLENBQUNMLFNBQVMsRUFBRU0sY0FBYztRQUVqRCxtQkFBbUIsR0FDbkIsSUFBSUMsZ0JBQWdCRixXQUFXLFFBQVE7O1FBQ3ZDLElBQUlHLFNBQVM7UUFFYixJQUFJSCxhQUFhWCxrQkFBa0I7WUFDakNjLFVBQVUsRUFBRSxpQ0FBaUM7O1lBQzdDRCxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJRixhQUFhLEtBQUs7WUFDM0JHLFVBQVUsRUFBRSxpQ0FBaUM7O1lBQzdDRCxnQkFBZ0I7UUFDbEI7UUFFQSxNQUFNRSxTQUFTQyxPQUFPQyxXQUFXLENBQUNOLGFBQWFHO1FBRS9DLHNEQUFzRDtRQUN0REMsTUFBTSxDQUFDLEVBQUUsR0FBR0EsTUFBTSxDQUFDLEVBQUUsR0FBRztRQUN4QkEsTUFBTSxDQUFDLEVBQUUsSUFBSSxLQUFLLE1BQU07O1FBQ3hCQSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUNBLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBRyxJQUFLTCxPQUFPLFNBQVM7O1FBRWpELDZEQUE2RCxHQUM3REssTUFBTSxDQUFDRCxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUNQLE9BQU8sQ0FBQyxFQUFFO1FBQ3BDUSxNQUFNLENBQUNELFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQ1AsT0FBTyxDQUFDLEVBQUU7UUFDcENRLE1BQU0sQ0FBQ0QsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDUCxPQUFPLENBQUMsRUFBRTtRQUNwQ1EsTUFBTSxDQUFDRCxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUNQLE9BQU8sQ0FBQyxFQUFFO1FBRXBDUSxNQUFNLENBQUMsRUFBRSxHQUFHRjtRQUVaLElBQUlBLGtCQUFrQixLQUFLO1lBQ3pCRSxPQUFPRyxhQUFhLENBQUNQLFlBQVk7UUFDbkMsT0FBTyxJQUFJRSxrQkFBa0IsS0FBSztZQUNoQyxnQ0FBZ0M7WUFDaENFLE1BQU0sQ0FBQyxFQUFFLEdBQUdBLE1BQU0sQ0FBQyxFQUFFLEdBQUc7WUFDeEJBLE9BQU9JLFdBQVcsQ0FBQ1IsWUFBWSxHQUFHO1FBQ3BDO1FBRUFJLE1BQU0sQ0FBQyxFQUFFLElBQUksS0FBSyxPQUFPOztRQUV6QixZQUFZO1FBQ1osSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlULFlBQVlTLElBQUs7WUFDbkNMLE1BQU0sQ0FBQ0QsU0FBU00sRUFBRSxHQUFHLElBQUksQ0FBQ2QsU0FBUyxDQUFDYyxFQUFFLEdBQUcsSUFBSSxDQUFDYixPQUFPLENBQUNhLElBQUksRUFBRTtRQUM5RDtRQUVBLE9BQU9MO0lBQ1Q7QUFDRjtBQUVBTSxPQUFPQyxPQUFPLEdBQUc7SUFDZm5CO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1lLXZpZXcvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWJzb2NrZXQvZnJhbWUuanM/MzM5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBtYXhVbnNpZ25lZDE2Qml0IH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpXG5cbi8qKiBAdHlwZSB7aW1wb3J0KCdjcnlwdG8nKX0gKi9cbmxldCBjcnlwdG9cbnRyeSB7XG4gIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpXG59IGNhdGNoIHtcblxufVxuXG5jbGFzcyBXZWJzb2NrZXRGcmFtZVNlbmQge1xuICAvKipcbiAgICogQHBhcmFtIHtCdWZmZXJ8dW5kZWZpbmVkfSBkYXRhXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGF0YSkge1xuICAgIHRoaXMuZnJhbWVEYXRhID0gZGF0YVxuICAgIHRoaXMubWFza0tleSA9IGNyeXB0by5yYW5kb21CeXRlcyg0KVxuICB9XG5cbiAgY3JlYXRlRnJhbWUgKG9wY29kZSkge1xuICAgIGNvbnN0IGJvZHlMZW5ndGggPSB0aGlzLmZyYW1lRGF0YT8uYnl0ZUxlbmd0aCA/PyAwXG5cbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBsZXQgcGF5bG9hZExlbmd0aCA9IGJvZHlMZW5ndGggLy8gMC0xMjVcbiAgICBsZXQgb2Zmc2V0ID0gNlxuXG4gICAgaWYgKGJvZHlMZW5ndGggPiBtYXhVbnNpZ25lZDE2Qml0KSB7XG4gICAgICBvZmZzZXQgKz0gOCAvLyBwYXlsb2FkIGxlbmd0aCBpcyBuZXh0IDggYnl0ZXNcbiAgICAgIHBheWxvYWRMZW5ndGggPSAxMjdcbiAgICB9IGVsc2UgaWYgKGJvZHlMZW5ndGggPiAxMjUpIHtcbiAgICAgIG9mZnNldCArPSAyIC8vIHBheWxvYWQgbGVuZ3RoIGlzIG5leHQgMiBieXRlc1xuICAgICAgcGF5bG9hZExlbmd0aCA9IDEyNlxuICAgIH1cblxuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShib2R5TGVuZ3RoICsgb2Zmc2V0KVxuXG4gICAgLy8gQ2xlYXIgZmlyc3QgMiBieXRlcywgZXZlcnl0aGluZyBlbHNlIGlzIG92ZXJ3cml0dGVuXG4gICAgYnVmZmVyWzBdID0gYnVmZmVyWzFdID0gMFxuICAgIGJ1ZmZlclswXSB8PSAweDgwIC8vIEZJTlxuICAgIGJ1ZmZlclswXSA9IChidWZmZXJbMF0gJiAweEYwKSArIG9wY29kZSAvLyBvcGNvZGVcblxuICAgIC8qISB3cy4gTUlUIExpY2Vuc2UuIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPiAqL1xuICAgIGJ1ZmZlcltvZmZzZXQgLSA0XSA9IHRoaXMubWFza0tleVswXVxuICAgIGJ1ZmZlcltvZmZzZXQgLSAzXSA9IHRoaXMubWFza0tleVsxXVxuICAgIGJ1ZmZlcltvZmZzZXQgLSAyXSA9IHRoaXMubWFza0tleVsyXVxuICAgIGJ1ZmZlcltvZmZzZXQgLSAxXSA9IHRoaXMubWFza0tleVszXVxuXG4gICAgYnVmZmVyWzFdID0gcGF5bG9hZExlbmd0aFxuXG4gICAgaWYgKHBheWxvYWRMZW5ndGggPT09IDEyNikge1xuICAgICAgYnVmZmVyLndyaXRlVUludDE2QkUoYm9keUxlbmd0aCwgMilcbiAgICB9IGVsc2UgaWYgKHBheWxvYWRMZW5ndGggPT09IDEyNykge1xuICAgICAgLy8gQ2xlYXIgZXh0ZW5kZWQgcGF5bG9hZCBsZW5ndGhcbiAgICAgIGJ1ZmZlclsyXSA9IGJ1ZmZlclszXSA9IDBcbiAgICAgIGJ1ZmZlci53cml0ZVVJbnRCRShib2R5TGVuZ3RoLCA0LCA2KVxuICAgIH1cblxuICAgIGJ1ZmZlclsxXSB8PSAweDgwIC8vIE1BU0tcblxuICAgIC8vIG1hc2sgYm9keVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keUxlbmd0aDsgaSsrKSB7XG4gICAgICBidWZmZXJbb2Zmc2V0ICsgaV0gPSB0aGlzLmZyYW1lRGF0YVtpXSBeIHRoaXMubWFza0tleVtpICUgNF1cbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFdlYnNvY2tldEZyYW1lU2VuZFxufVxuIl0sIm5hbWVzIjpbIm1heFVuc2lnbmVkMTZCaXQiLCJyZXF1aXJlIiwiY3J5cHRvIiwiV2Vic29ja2V0RnJhbWVTZW5kIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiZnJhbWVEYXRhIiwibWFza0tleSIsInJhbmRvbUJ5dGVzIiwiY3JlYXRlRnJhbWUiLCJvcGNvZGUiLCJib2R5TGVuZ3RoIiwiYnl0ZUxlbmd0aCIsInBheWxvYWRMZW5ndGgiLCJvZmZzZXQiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnRCRSIsImkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/websocket/frame.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/websocket/receiver.js":
/*!*******************************************************!*\
  !*** ./node_modules/undici/lib/websocket/receiver.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst diagnosticsChannel = __webpack_require__(/*! diagnostics_channel */ \"diagnostics_channel\");\nconst { parserStates, opcodes, states, emptyBuffer } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/websocket/constants.js\");\nconst { kReadyState, kSentClose, kResponse, kReceivedClose } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/websocket/symbols.js\");\nconst { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/websocket/util.js\");\nconst { WebsocketFrameSend } = __webpack_require__(/*! ./frame */ \"(ssr)/./node_modules/undici/lib/websocket/frame.js\");\n// This code was influenced by ws released under the MIT license.\n// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n// Copyright (c) 2013 Arnout Kazemier and contributors\n// Copyright (c) 2016 Luigi Pinca and contributors\nconst channels = {};\nchannels.ping = diagnosticsChannel.channel(\"undici:websocket:ping\");\nchannels.pong = diagnosticsChannel.channel(\"undici:websocket:pong\");\nclass ByteParser extends Writable {\n    #buffers;\n    #byteOffset;\n    #state;\n    #info;\n    #fragments;\n    constructor(ws){\n        super();\n        this.#buffers = [];\n        this.#byteOffset = 0;\n        this.#state = parserStates.INFO;\n        this.#info = {};\n        this.#fragments = [];\n        this.ws = ws;\n    }\n    /**\n   * @param {Buffer} chunk\n   * @param {() => void} callback\n   */ _write(chunk, _, callback) {\n        this.#buffers.push(chunk);\n        this.#byteOffset += chunk.length;\n        this.run(callback);\n    }\n    /**\n   * Runs whenever a new chunk is received.\n   * Callback is called whenever there are no more chunks buffering,\n   * or not enough bytes are buffered to parse.\n   */ run(callback) {\n        while(true){\n            if (this.#state === parserStates.INFO) {\n                // If there aren't enough bytes to parse the payload length, etc.\n                if (this.#byteOffset < 2) {\n                    return callback();\n                }\n                const buffer = this.consume(2);\n                this.#info.fin = (buffer[0] & 0x80) !== 0;\n                this.#info.opcode = buffer[0] & 0x0F;\n                // If we receive a fragmented message, we use the type of the first\n                // frame to parse the full message as binary/text, when it's terminated\n                this.#info.originalOpcode ??= this.#info.opcode;\n                this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;\n                if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {\n                    // Only text and binary frames can be fragmented\n                    failWebsocketConnection(this.ws, \"Invalid frame type was fragmented.\");\n                    return;\n                }\n                const payloadLength = buffer[1] & 0x7F;\n                if (payloadLength <= 125) {\n                    this.#info.payloadLength = payloadLength;\n                    this.#state = parserStates.READ_DATA;\n                } else if (payloadLength === 126) {\n                    this.#state = parserStates.PAYLOADLENGTH_16;\n                } else if (payloadLength === 127) {\n                    this.#state = parserStates.PAYLOADLENGTH_64;\n                }\n                if (this.#info.fragmented && payloadLength > 125) {\n                    // A fragmented frame can't be fragmented itself\n                    failWebsocketConnection(this.ws, \"Fragmented frame exceeded 125 bytes.\");\n                    return;\n                } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {\n                    // Control frames can have a payload length of 125 bytes MAX\n                    failWebsocketConnection(this.ws, \"Payload length for control frame exceeded 125 bytes.\");\n                    return;\n                } else if (this.#info.opcode === opcodes.CLOSE) {\n                    if (payloadLength === 1) {\n                        failWebsocketConnection(this.ws, \"Received close frame with a 1-byte body.\");\n                        return;\n                    }\n                    const body = this.consume(payloadLength);\n                    this.#info.closeInfo = this.parseCloseBody(false, body);\n                    if (!this.ws[kSentClose]) {\n                        // If an endpoint receives a Close frame and did not previously send a\n                        // Close frame, the endpoint MUST send a Close frame in response.  (When\n                        // sending a Close frame in response, the endpoint typically echos the\n                        // status code it received.)\n                        const body = Buffer.allocUnsafe(2);\n                        body.writeUInt16BE(this.#info.closeInfo.code, 0);\n                        const closeFrame = new WebsocketFrameSend(body);\n                        this.ws[kResponse].socket.write(closeFrame.createFrame(opcodes.CLOSE), (err)=>{\n                            if (!err) {\n                                this.ws[kSentClose] = true;\n                            }\n                        });\n                    }\n                    // Upon either sending or receiving a Close control frame, it is said\n                    // that _The WebSocket Closing Handshake is Started_ and that the\n                    // WebSocket connection is in the CLOSING state.\n                    this.ws[kReadyState] = states.CLOSING;\n                    this.ws[kReceivedClose] = true;\n                    this.end();\n                    return;\n                } else if (this.#info.opcode === opcodes.PING) {\n                    // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in\n                    // response, unless it already received a Close frame.\n                    // A Pong frame sent in response to a Ping frame must have identical\n                    // \"Application data\"\n                    const body = this.consume(payloadLength);\n                    if (!this.ws[kReceivedClose]) {\n                        const frame = new WebsocketFrameSend(body);\n                        this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));\n                        if (channels.ping.hasSubscribers) {\n                            channels.ping.publish({\n                                payload: body\n                            });\n                        }\n                    }\n                    this.#state = parserStates.INFO;\n                    if (this.#byteOffset > 0) {\n                        continue;\n                    } else {\n                        callback();\n                        return;\n                    }\n                } else if (this.#info.opcode === opcodes.PONG) {\n                    // A Pong frame MAY be sent unsolicited.  This serves as a\n                    // unidirectional heartbeat.  A response to an unsolicited Pong frame is\n                    // not expected.\n                    const body = this.consume(payloadLength);\n                    if (channels.pong.hasSubscribers) {\n                        channels.pong.publish({\n                            payload: body\n                        });\n                    }\n                    if (this.#byteOffset > 0) {\n                        continue;\n                    } else {\n                        callback();\n                        return;\n                    }\n                }\n            } else if (this.#state === parserStates.PAYLOADLENGTH_16) {\n                if (this.#byteOffset < 2) {\n                    return callback();\n                }\n                const buffer = this.consume(2);\n                this.#info.payloadLength = buffer.readUInt16BE(0);\n                this.#state = parserStates.READ_DATA;\n            } else if (this.#state === parserStates.PAYLOADLENGTH_64) {\n                if (this.#byteOffset < 8) {\n                    return callback();\n                }\n                const buffer = this.consume(8);\n                const upper = buffer.readUInt32BE(0);\n                // 2^31 is the maxinimum bytes an arraybuffer can contain\n                // on 32-bit systems. Although, on 64-bit systems, this is\n                // 2^53-1 bytes.\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\n                // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275\n                // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e\n                if (upper > 2 ** 31 - 1) {\n                    failWebsocketConnection(this.ws, \"Received payload length > 2^31 bytes.\");\n                    return;\n                }\n                const lower = buffer.readUInt32BE(4);\n                this.#info.payloadLength = (upper << 8) + lower;\n                this.#state = parserStates.READ_DATA;\n            } else if (this.#state === parserStates.READ_DATA) {\n                if (this.#byteOffset < this.#info.payloadLength) {\n                    // If there is still more data in this chunk that needs to be read\n                    return callback();\n                } else if (this.#byteOffset >= this.#info.payloadLength) {\n                    // If the server sent multiple frames in a single chunk\n                    const body = this.consume(this.#info.payloadLength);\n                    this.#fragments.push(body);\n                    // If the frame is unfragmented, or a fragmented frame was terminated,\n                    // a message was received\n                    if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {\n                        const fullMessage = Buffer.concat(this.#fragments);\n                        websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);\n                        this.#info = {};\n                        this.#fragments.length = 0;\n                    }\n                    this.#state = parserStates.INFO;\n                }\n            }\n            if (this.#byteOffset > 0) {\n                continue;\n            } else {\n                callback();\n                break;\n            }\n        }\n    }\n    /**\n   * Take n bytes from the buffered Buffers\n   * @param {number} n\n   * @returns {Buffer|null}\n   */ consume(n) {\n        if (n > this.#byteOffset) {\n            return null;\n        } else if (n === 0) {\n            return emptyBuffer;\n        }\n        if (this.#buffers[0].length === n) {\n            this.#byteOffset -= this.#buffers[0].length;\n            return this.#buffers.shift();\n        }\n        const buffer = Buffer.allocUnsafe(n);\n        let offset = 0;\n        while(offset !== n){\n            const next = this.#buffers[0];\n            const { length } = next;\n            if (length + offset === n) {\n                buffer.set(this.#buffers.shift(), offset);\n                break;\n            } else if (length + offset > n) {\n                buffer.set(next.subarray(0, n - offset), offset);\n                this.#buffers[0] = next.subarray(n - offset);\n                break;\n            } else {\n                buffer.set(this.#buffers.shift(), offset);\n                offset += next.length;\n            }\n        }\n        this.#byteOffset -= n;\n        return buffer;\n    }\n    parseCloseBody(onlyCode, data) {\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5\n        /** @type {number|undefined} */ let code;\n        if (data.length >= 2) {\n            // _The WebSocket Connection Close Code_ is\n            // defined as the status code (Section 7.4) contained in the first Close\n            // control frame received by the application\n            code = data.readUInt16BE(0);\n        }\n        if (onlyCode) {\n            if (!isValidStatusCode(code)) {\n                return null;\n            }\n            return {\n                code\n            };\n        }\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6\n        /** @type {Buffer} */ let reason = data.subarray(2);\n        // Remove BOM\n        if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {\n            reason = reason.subarray(3);\n        }\n        if (code !== undefined && !isValidStatusCode(code)) {\n            return null;\n        }\n        try {\n            // TODO: optimize this\n            reason = new TextDecoder(\"utf-8\", {\n                fatal: true\n            }).decode(reason);\n        } catch  {\n            return null;\n        }\n        return {\n            code,\n            reason\n        };\n    }\n    get closingInfo() {\n        return this.#info.closeInfo;\n    }\n}\nmodule.exports = {\n    ByteParser\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/websocket/receiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/websocket/symbols.js":
/*!******************************************************!*\
  !*** ./node_modules/undici/lib/websocket/symbols.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    kWebSocketURL: Symbol(\"url\"),\n    kReadyState: Symbol(\"ready state\"),\n    kController: Symbol(\"controller\"),\n    kResponse: Symbol(\"response\"),\n    kBinaryType: Symbol(\"binary type\"),\n    kSentClose: Symbol(\"sent close\"),\n    kReceivedClose: Symbol(\"received close\"),\n    kByteParser: Symbol(\"byte parser\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5kaWNpL2xpYi93ZWJzb2NrZXQvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsZUFBZUMsT0FBTztJQUN0QkMsYUFBYUQsT0FBTztJQUNwQkUsYUFBYUYsT0FBTztJQUNwQkcsV0FBV0gsT0FBTztJQUNsQkksYUFBYUosT0FBTztJQUNwQkssWUFBWUwsT0FBTztJQUNuQk0sZ0JBQWdCTixPQUFPO0lBQ3ZCTyxhQUFhUCxPQUFPO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtZS12aWV3Ly4vbm9kZV9tb2R1bGVzL3VuZGljaS9saWIvd2Vic29ja2V0L3N5bWJvbHMuanM/YTM0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtXZWJTb2NrZXRVUkw6IFN5bWJvbCgndXJsJyksXG4gIGtSZWFkeVN0YXRlOiBTeW1ib2woJ3JlYWR5IHN0YXRlJyksXG4gIGtDb250cm9sbGVyOiBTeW1ib2woJ2NvbnRyb2xsZXInKSxcbiAga1Jlc3BvbnNlOiBTeW1ib2woJ3Jlc3BvbnNlJyksXG4gIGtCaW5hcnlUeXBlOiBTeW1ib2woJ2JpbmFyeSB0eXBlJyksXG4gIGtTZW50Q2xvc2U6IFN5bWJvbCgnc2VudCBjbG9zZScpLFxuICBrUmVjZWl2ZWRDbG9zZTogU3ltYm9sKCdyZWNlaXZlZCBjbG9zZScpLFxuICBrQnl0ZVBhcnNlcjogU3ltYm9sKCdieXRlIHBhcnNlcicpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtXZWJTb2NrZXRVUkwiLCJTeW1ib2wiLCJrUmVhZHlTdGF0ZSIsImtDb250cm9sbGVyIiwia1Jlc3BvbnNlIiwia0JpbmFyeVR5cGUiLCJrU2VudENsb3NlIiwia1JlY2VpdmVkQ2xvc2UiLCJrQnl0ZVBhcnNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/websocket/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/websocket/util.js":
/*!***************************************************!*\
  !*** ./node_modules/undici/lib/websocket/util.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/websocket/symbols.js\");\nconst { states, opcodes } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/websocket/constants.js\");\nconst { MessageEvent, ErrorEvent } = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/undici/lib/websocket/events.js\");\n/* globals Blob */ /**\n * @param {import('./websocket').WebSocket} ws\n */ function isEstablished(ws) {\n    // If the server's response is validated as provided for above, it is\n    // said that _The WebSocket Connection is Established_ and that the\n    // WebSocket Connection is in the OPEN state.\n    return ws[kReadyState] === states.OPEN;\n}\n/**\n * @param {import('./websocket').WebSocket} ws\n */ function isClosing(ws) {\n    // Upon either sending or receiving a Close control frame, it is said\n    // that _The WebSocket Closing Handshake is Started_ and that the\n    // WebSocket connection is in the CLOSING state.\n    return ws[kReadyState] === states.CLOSING;\n}\n/**\n * @param {import('./websocket').WebSocket} ws\n */ function isClosed(ws) {\n    return ws[kReadyState] === states.CLOSED;\n}\n/**\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e\n * @param {EventTarget} target\n * @param {EventInit | undefined} eventInitDict\n */ function fireEvent(e, target, eventConstructor = Event, eventInitDict) {\n    // 1. If eventConstructor is not given, then let eventConstructor be Event.\n    // 2. Let event be the result of creating an event given eventConstructor,\n    //    in the relevant realm of target.\n    // 3. Initialize event’s type attribute to e.\n    const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap\n    ;\n    // 4. Initialize any other IDL attributes of event as described in the\n    //    invocation of this algorithm.\n    // 5. Return the result of dispatching event at target, with legacy target\n    //    override flag set if set.\n    target.dispatchEvent(event);\n}\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @param {import('./websocket').WebSocket} ws\n * @param {number} type Opcode\n * @param {Buffer} data application data\n */ function websocketMessageReceived(ws, type, data) {\n    // 1. If ready state is not OPEN (1), then return.\n    if (ws[kReadyState] !== states.OPEN) {\n        return;\n    }\n    // 2. Let dataForEvent be determined by switching on type and binary type:\n    let dataForEvent;\n    if (type === opcodes.TEXT) {\n        // -> type indicates that the data is Text\n        //      a new DOMString containing data\n        try {\n            dataForEvent = new TextDecoder(\"utf-8\", {\n                fatal: true\n            }).decode(data);\n        } catch  {\n            failWebsocketConnection(ws, \"Received invalid UTF-8 in text frame.\");\n            return;\n        }\n    } else if (type === opcodes.BINARY) {\n        if (ws[kBinaryType] === \"blob\") {\n            // -> type indicates that the data is Binary and binary type is \"blob\"\n            //      a new Blob object, created in the relevant Realm of the WebSocket\n            //      object, that represents data as its raw data\n            dataForEvent = new Blob([\n                data\n            ]);\n        } else {\n            // -> type indicates that the data is Binary and binary type is \"arraybuffer\"\n            //      a new ArrayBuffer object, created in the relevant Realm of the\n            //      WebSocket object, whose contents are data\n            dataForEvent = new Uint8Array(data).buffer;\n        }\n    }\n    // 3. Fire an event named message at the WebSocket object, using MessageEvent,\n    //    with the origin attribute initialized to the serialization of the WebSocket\n    //    object’s url's origin, and the data attribute initialized to dataForEvent.\n    fireEvent(\"message\", ws, MessageEvent, {\n        origin: ws[kWebSocketURL].origin,\n        data: dataForEvent\n    });\n}\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455\n * @see https://datatracker.ietf.org/doc/html/rfc2616\n * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407\n * @param {string} protocol\n */ function isValidSubprotocol(protocol) {\n    // If present, this value indicates one\n    // or more comma-separated subprotocol the client wishes to speak,\n    // ordered by preference.  The elements that comprise this value\n    // MUST be non-empty strings with characters in the range U+0021 to\n    // U+007E not including separator characters as defined in\n    // [RFC2616] and MUST all be unique strings.\n    if (protocol.length === 0) {\n        return false;\n    }\n    for (const char of protocol){\n        const code = char.charCodeAt(0);\n        if (code < 0x21 || code > 0x7E || char === \"(\" || char === \")\" || char === \"<\" || char === \">\" || char === \"@\" || char === \",\" || char === \";\" || char === \":\" || char === \"\\\\\" || char === '\"' || char === \"/\" || char === \"[\" || char === \"]\" || char === \"?\" || char === \"=\" || char === \"{\" || char === \"}\" || code === 32 || // SP\n        code === 9 // HT\n        ) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4\n * @param {number} code\n */ function isValidStatusCode(code) {\n    if (code >= 1000 && code < 1015) {\n        return code !== 1004 && // reserved\n        code !== 1005 && // \"MUST NOT be set as a status code\"\n        code !== 1006 // \"MUST NOT be set as a status code\"\n        ;\n    }\n    return code >= 3000 && code <= 4999;\n}\n/**\n * @param {import('./websocket').WebSocket} ws\n * @param {string|undefined} reason\n */ function failWebsocketConnection(ws, reason) {\n    const { [kController]: controller, [kResponse]: response } = ws;\n    controller.abort();\n    if (response?.socket && !response.socket.destroyed) {\n        response.socket.destroy();\n    }\n    if (reason) {\n        fireEvent(\"error\", ws, ErrorEvent, {\n            error: new Error(reason)\n        });\n    }\n}\nmodule.exports = {\n    isEstablished,\n    isClosing,\n    isClosed,\n    fireEvent,\n    isValidSubprotocol,\n    isValidStatusCode,\n    failWebsocketConnection,\n    websocketMessageReceived\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/websocket/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/undici/lib/websocket/websocket.js":
/*!********************************************************!*\
  !*** ./node_modules/undici/lib/websocket/websocket.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { webidl } = __webpack_require__(/*! ../fetch/webidl */ \"(ssr)/./node_modules/undici/lib/fetch/webidl.js\");\nconst { DOMException } = __webpack_require__(/*! ../fetch/constants */ \"(ssr)/./node_modules/undici/lib/fetch/constants.js\");\nconst { URLSerializer } = __webpack_require__(/*! ../fetch/dataURL */ \"(ssr)/./node_modules/undici/lib/fetch/dataURL.js\");\nconst { getGlobalOrigin } = __webpack_require__(/*! ../fetch/global */ \"(ssr)/./node_modules/undici/lib/fetch/global.js\");\nconst { staticPropertyDescriptors, states, opcodes, emptyBuffer } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/undici/lib/websocket/constants.js\");\nconst { kWebSocketURL, kReadyState, kController, kBinaryType, kResponse, kSentClose, kByteParser } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/undici/lib/websocket/symbols.js\");\nconst { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/undici/lib/websocket/util.js\");\nconst { establishWebSocketConnection } = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/undici/lib/websocket/connection.js\");\nconst { WebsocketFrameSend } = __webpack_require__(/*! ./frame */ \"(ssr)/./node_modules/undici/lib/websocket/frame.js\");\nconst { ByteParser } = __webpack_require__(/*! ./receiver */ \"(ssr)/./node_modules/undici/lib/websocket/receiver.js\");\nconst { kEnumerableProperty, isBlobLike } = __webpack_require__(/*! ../core/util */ \"(ssr)/./node_modules/undici/lib/core/util.js\");\nconst { getGlobalDispatcher } = __webpack_require__(/*! ../global */ \"(ssr)/./node_modules/undici/lib/global.js\");\nconst { types } = __webpack_require__(/*! util */ \"util\");\nlet experimentalWarned = false;\n// https://websockets.spec.whatwg.org/#interface-definition\nclass WebSocket extends EventTarget {\n    #events;\n    #bufferedAmount;\n    #protocol;\n    #extensions;\n    /**\n   * @param {string} url\n   * @param {string|string[]} protocols\n   */ constructor(url, protocols = []){\n        super();\n        this.#events = {\n            open: null,\n            error: null,\n            close: null,\n            message: null\n        };\n        this.#bufferedAmount = 0;\n        this.#protocol = \"\";\n        this.#extensions = \"\";\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"WebSocket constructor\"\n        });\n        if (!experimentalWarned) {\n            experimentalWarned = true;\n            process.emitWarning(\"WebSockets are experimental, expect them to change at any time.\", {\n                code: \"UNDICI-WS\"\n            });\n        }\n        const options = webidl.converters[\"DOMString or sequence<DOMString> or WebSocketInit\"](protocols);\n        url = webidl.converters.USVString(url);\n        protocols = options.protocols;\n        // 1. Let baseURL be this's relevant settings object's API base URL.\n        const baseURL = getGlobalOrigin();\n        // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.\n        let urlRecord;\n        try {\n            urlRecord = new URL(url, baseURL);\n        } catch (e) {\n            // 3. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n            throw new DOMException(e, \"SyntaxError\");\n        }\n        // 4. If urlRecord’s scheme is \"http\", then set urlRecord’s scheme to \"ws\".\n        if (urlRecord.protocol === \"http:\") {\n            urlRecord.protocol = \"ws:\";\n        } else if (urlRecord.protocol === \"https:\") {\n            // 5. Otherwise, if urlRecord’s scheme is \"https\", set urlRecord’s scheme to \"wss\".\n            urlRecord.protocol = \"wss:\";\n        }\n        // 6. If urlRecord’s scheme is not \"ws\" or \"wss\", then throw a \"SyntaxError\" DOMException.\n        if (urlRecord.protocol !== \"ws:\" && urlRecord.protocol !== \"wss:\") {\n            throw new DOMException(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, \"SyntaxError\");\n        }\n        // 7. If urlRecord’s fragment is non-null, then throw a \"SyntaxError\"\n        //    DOMException.\n        if (urlRecord.hash || urlRecord.href.endsWith(\"#\")) {\n            throw new DOMException(\"Got fragment\", \"SyntaxError\");\n        }\n        // 8. If protocols is a string, set protocols to a sequence consisting\n        //    of just that string.\n        if (typeof protocols === \"string\") {\n            protocols = [\n                protocols\n            ];\n        }\n        // 9. If any of the values in protocols occur more than once or otherwise\n        //    fail to match the requirements for elements that comprise the value\n        //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket\n        //    protocol, then throw a \"SyntaxError\" DOMException.\n        if (protocols.length !== new Set(protocols.map((p)=>p.toLowerCase())).size) {\n            throw new DOMException(\"Invalid Sec-WebSocket-Protocol value\", \"SyntaxError\");\n        }\n        if (protocols.length > 0 && !protocols.every((p)=>isValidSubprotocol(p))) {\n            throw new DOMException(\"Invalid Sec-WebSocket-Protocol value\", \"SyntaxError\");\n        }\n        // 10. Set this's url to urlRecord.\n        this[kWebSocketURL] = new URL(urlRecord.href);\n        // 11. Let client be this's relevant settings object.\n        // 12. Run this step in parallel:\n        //    1. Establish a WebSocket connection given urlRecord, protocols,\n        //       and client.\n        this[kController] = establishWebSocketConnection(urlRecord, protocols, this, (response)=>this.#onConnectionEstablished(response), options);\n        // Each WebSocket object has an associated ready state, which is a\n        // number representing the state of the connection. Initially it must\n        // be CONNECTING (0).\n        this[kReadyState] = WebSocket.CONNECTING;\n        // The extensions attribute must initially return the empty string.\n        // The protocol attribute must initially return the empty string.\n        // Each WebSocket object has an associated binary type, which is a\n        // BinaryType. Initially it must be \"blob\".\n        this[kBinaryType] = \"blob\";\n    }\n    /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-close\n   * @param {number|undefined} code\n   * @param {string|undefined} reason\n   */ close(code = undefined, reason = undefined) {\n        webidl.brandCheck(this, WebSocket);\n        if (code !== undefined) {\n            code = webidl.converters[\"unsigned short\"](code, {\n                clamp: true\n            });\n        }\n        if (reason !== undefined) {\n            reason = webidl.converters.USVString(reason);\n        }\n        // 1. If code is present, but is neither an integer equal to 1000 nor an\n        //    integer in the range 3000 to 4999, inclusive, throw an\n        //    \"InvalidAccessError\" DOMException.\n        if (code !== undefined) {\n            if (code !== 1000 && (code < 3000 || code > 4999)) {\n                throw new DOMException(\"invalid code\", \"InvalidAccessError\");\n            }\n        }\n        let reasonByteLength = 0;\n        // 2. If reason is present, then run these substeps:\n        if (reason !== undefined) {\n            // 1. Let reasonBytes be the result of encoding reason.\n            // 2. If reasonBytes is longer than 123 bytes, then throw a\n            //    \"SyntaxError\" DOMException.\n            reasonByteLength = Buffer.byteLength(reason);\n            if (reasonByteLength > 123) {\n                throw new DOMException(`Reason must be less than 123 bytes; received ${reasonByteLength}`, \"SyntaxError\");\n            }\n        }\n        // 3. Run the first matching steps from the following list:\n        if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {\n        // If this's ready state is CLOSING (2) or CLOSED (3)\n        // Do nothing.\n        } else if (!isEstablished(this)) {\n            // If the WebSocket connection is not yet established\n            // Fail the WebSocket connection and set this's ready state\n            // to CLOSING (2).\n            failWebsocketConnection(this, \"Connection was closed before it was established.\");\n            this[kReadyState] = WebSocket.CLOSING;\n        } else if (!isClosing(this)) {\n            // If the WebSocket closing handshake has not yet been started\n            // Start the WebSocket closing handshake and set this's ready\n            // state to CLOSING (2).\n            // - If neither code nor reason is present, the WebSocket Close\n            //   message must not have a body.\n            // - If code is present, then the status code to use in the\n            //   WebSocket Close message must be the integer given by code.\n            // - If reason is also present, then reasonBytes must be\n            //   provided in the Close message after the status code.\n            const frame = new WebsocketFrameSend();\n            // If neither code nor reason is present, the WebSocket Close\n            // message must not have a body.\n            // If code is present, then the status code to use in the\n            // WebSocket Close message must be the integer given by code.\n            if (code !== undefined && reason === undefined) {\n                frame.frameData = Buffer.allocUnsafe(2);\n                frame.frameData.writeUInt16BE(code, 0);\n            } else if (code !== undefined && reason !== undefined) {\n                // If reason is also present, then reasonBytes must be\n                // provided in the Close message after the status code.\n                frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);\n                frame.frameData.writeUInt16BE(code, 0);\n                // the body MAY contain UTF-8-encoded data with value /reason/\n                frame.frameData.write(reason, 2, \"utf-8\");\n            } else {\n                frame.frameData = emptyBuffer;\n            }\n            /** @type {import('stream').Duplex} */ const socket = this[kResponse].socket;\n            socket.write(frame.createFrame(opcodes.CLOSE), (err)=>{\n                if (!err) {\n                    this[kSentClose] = true;\n                }\n            });\n            // Upon either sending or receiving a Close control frame, it is said\n            // that _The WebSocket Closing Handshake is Started_ and that the\n            // WebSocket connection is in the CLOSING state.\n            this[kReadyState] = states.CLOSING;\n        } else {\n            // Otherwise\n            // Set this's ready state to CLOSING (2).\n            this[kReadyState] = WebSocket.CLOSING;\n        }\n    }\n    /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-send\n   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data\n   */ send(data) {\n        webidl.brandCheck(this, WebSocket);\n        webidl.argumentLengthCheck(arguments, 1, {\n            header: \"WebSocket.send\"\n        });\n        data = webidl.converters.WebSocketSendData(data);\n        // 1. If this's ready state is CONNECTING, then throw an\n        //    \"InvalidStateError\" DOMException.\n        if (this[kReadyState] === WebSocket.CONNECTING) {\n            throw new DOMException(\"Sent before connected.\", \"InvalidStateError\");\n        }\n        // 2. Run the appropriate set of steps from the following list:\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\n        if (!isEstablished(this) || isClosing(this)) {\n            return;\n        }\n        /** @type {import('stream').Duplex} */ const socket = this[kResponse].socket;\n        // If data is a string\n        if (typeof data === \"string\") {\n            // If the WebSocket connection is established and the WebSocket\n            // closing handshake has not yet started, then the user agent\n            // must send a WebSocket Message comprised of the data argument\n            // using a text frame opcode; if the data cannot be sent, e.g.\n            // because it would need to be buffered but the buffer is full,\n            // the user agent must flag the WebSocket as full and then close\n            // the WebSocket connection. Any invocation of this method with a\n            // string argument that does not throw an exception must increase\n            // the bufferedAmount attribute by the number of bytes needed to\n            // express the argument as UTF-8.\n            const value = Buffer.from(data);\n            const frame = new WebsocketFrameSend(value);\n            const buffer = frame.createFrame(opcodes.TEXT);\n            this.#bufferedAmount += value.byteLength;\n            socket.write(buffer, ()=>{\n                this.#bufferedAmount -= value.byteLength;\n            });\n        } else if (types.isArrayBuffer(data)) {\n            // If the WebSocket connection is established, and the WebSocket\n            // closing handshake has not yet started, then the user agent must\n            // send a WebSocket Message comprised of data using a binary frame\n            // opcode; if the data cannot be sent, e.g. because it would need\n            // to be buffered but the buffer is full, the user agent must flag\n            // the WebSocket as full and then close the WebSocket connection.\n            // The data to be sent is the data stored in the buffer described\n            // by the ArrayBuffer object. Any invocation of this method with an\n            // ArrayBuffer argument that does not throw an exception must\n            // increase the bufferedAmount attribute by the length of the\n            // ArrayBuffer in bytes.\n            const value = Buffer.from(data);\n            const frame = new WebsocketFrameSend(value);\n            const buffer = frame.createFrame(opcodes.BINARY);\n            this.#bufferedAmount += value.byteLength;\n            socket.write(buffer, ()=>{\n                this.#bufferedAmount -= value.byteLength;\n            });\n        } else if (ArrayBuffer.isView(data)) {\n            // If the WebSocket connection is established, and the WebSocket\n            // closing handshake has not yet started, then the user agent must\n            // send a WebSocket Message comprised of data using a binary frame\n            // opcode; if the data cannot be sent, e.g. because it would need to\n            // be buffered but the buffer is full, the user agent must flag the\n            // WebSocket as full and then close the WebSocket connection. The\n            // data to be sent is the data stored in the section of the buffer\n            // described by the ArrayBuffer object that data references. Any\n            // invocation of this method with this kind of argument that does\n            // not throw an exception must increase the bufferedAmount attribute\n            // by the length of data’s buffer in bytes.\n            const ab = Buffer.from(data, data.byteOffset, data.byteLength);\n            const frame = new WebsocketFrameSend(ab);\n            const buffer = frame.createFrame(opcodes.BINARY);\n            this.#bufferedAmount += ab.byteLength;\n            socket.write(buffer, ()=>{\n                this.#bufferedAmount -= ab.byteLength;\n            });\n        } else if (isBlobLike(data)) {\n            // If the WebSocket connection is established, and the WebSocket\n            // closing handshake has not yet started, then the user agent must\n            // send a WebSocket Message comprised of data using a binary frame\n            // opcode; if the data cannot be sent, e.g. because it would need to\n            // be buffered but the buffer is full, the user agent must flag the\n            // WebSocket as full and then close the WebSocket connection. The data\n            // to be sent is the raw data represented by the Blob object. Any\n            // invocation of this method with a Blob argument that does not throw\n            // an exception must increase the bufferedAmount attribute by the size\n            // of the Blob object’s raw data, in bytes.\n            const frame = new WebsocketFrameSend();\n            data.arrayBuffer().then((ab)=>{\n                const value = Buffer.from(ab);\n                frame.frameData = value;\n                const buffer = frame.createFrame(opcodes.BINARY);\n                this.#bufferedAmount += value.byteLength;\n                socket.write(buffer, ()=>{\n                    this.#bufferedAmount -= value.byteLength;\n                });\n            });\n        }\n    }\n    get readyState() {\n        webidl.brandCheck(this, WebSocket);\n        // The readyState getter steps are to return this's ready state.\n        return this[kReadyState];\n    }\n    get bufferedAmount() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#bufferedAmount;\n    }\n    get url() {\n        webidl.brandCheck(this, WebSocket);\n        // The url getter steps are to return this's url, serialized.\n        return URLSerializer(this[kWebSocketURL]);\n    }\n    get extensions() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#extensions;\n    }\n    get protocol() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#protocol;\n    }\n    get onopen() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#events.open;\n    }\n    set onopen(fn) {\n        webidl.brandCheck(this, WebSocket);\n        if (this.#events.open) {\n            this.removeEventListener(\"open\", this.#events.open);\n        }\n        if (typeof fn === \"function\") {\n            this.#events.open = fn;\n            this.addEventListener(\"open\", fn);\n        } else {\n            this.#events.open = null;\n        }\n    }\n    get onerror() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#events.error;\n    }\n    set onerror(fn) {\n        webidl.brandCheck(this, WebSocket);\n        if (this.#events.error) {\n            this.removeEventListener(\"error\", this.#events.error);\n        }\n        if (typeof fn === \"function\") {\n            this.#events.error = fn;\n            this.addEventListener(\"error\", fn);\n        } else {\n            this.#events.error = null;\n        }\n    }\n    get onclose() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#events.close;\n    }\n    set onclose(fn) {\n        webidl.brandCheck(this, WebSocket);\n        if (this.#events.close) {\n            this.removeEventListener(\"close\", this.#events.close);\n        }\n        if (typeof fn === \"function\") {\n            this.#events.close = fn;\n            this.addEventListener(\"close\", fn);\n        } else {\n            this.#events.close = null;\n        }\n    }\n    get onmessage() {\n        webidl.brandCheck(this, WebSocket);\n        return this.#events.message;\n    }\n    set onmessage(fn) {\n        webidl.brandCheck(this, WebSocket);\n        if (this.#events.message) {\n            this.removeEventListener(\"message\", this.#events.message);\n        }\n        if (typeof fn === \"function\") {\n            this.#events.message = fn;\n            this.addEventListener(\"message\", fn);\n        } else {\n            this.#events.message = null;\n        }\n    }\n    get binaryType() {\n        webidl.brandCheck(this, WebSocket);\n        return this[kBinaryType];\n    }\n    set binaryType(type) {\n        webidl.brandCheck(this, WebSocket);\n        if (type !== \"blob\" && type !== \"arraybuffer\") {\n            this[kBinaryType] = \"blob\";\n        } else {\n            this[kBinaryType] = type;\n        }\n    }\n    /**\n   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n   */ #onConnectionEstablished(response) {\n        // processResponse is called when the \"response’s header list has been received and initialized.\"\n        // once this happens, the connection is open\n        this[kResponse] = response;\n        const parser = new ByteParser(this);\n        parser.on(\"drain\", function onParserDrain() {\n            this.ws[kResponse].socket.resume();\n        });\n        response.socket.ws = this;\n        this[kByteParser] = parser;\n        // 1. Change the ready state to OPEN (1).\n        this[kReadyState] = states.OPEN;\n        // 2. Change the extensions attribute’s value to the extensions in use, if\n        //    it is not the null value.\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1\n        const extensions = response.headersList.get(\"sec-websocket-extensions\");\n        if (extensions !== null) {\n            this.#extensions = extensions;\n        }\n        // 3. Change the protocol attribute’s value to the subprotocol in use, if\n        //    it is not the null value.\n        // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9\n        const protocol = response.headersList.get(\"sec-websocket-protocol\");\n        if (protocol !== null) {\n            this.#protocol = protocol;\n        }\n        // 4. Fire an event named open at the WebSocket object.\n        fireEvent(\"open\", this);\n    }\n}\n// https://websockets.spec.whatwg.org/#dom-websocket-connecting\nWebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;\n// https://websockets.spec.whatwg.org/#dom-websocket-open\nWebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;\n// https://websockets.spec.whatwg.org/#dom-websocket-closing\nWebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;\n// https://websockets.spec.whatwg.org/#dom-websocket-closed\nWebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;\nObject.defineProperties(WebSocket.prototype, {\n    CONNECTING: staticPropertyDescriptors,\n    OPEN: staticPropertyDescriptors,\n    CLOSING: staticPropertyDescriptors,\n    CLOSED: staticPropertyDescriptors,\n    url: kEnumerableProperty,\n    readyState: kEnumerableProperty,\n    bufferedAmount: kEnumerableProperty,\n    onopen: kEnumerableProperty,\n    onerror: kEnumerableProperty,\n    onclose: kEnumerableProperty,\n    close: kEnumerableProperty,\n    onmessage: kEnumerableProperty,\n    binaryType: kEnumerableProperty,\n    send: kEnumerableProperty,\n    extensions: kEnumerableProperty,\n    protocol: kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: \"WebSocket\",\n        writable: false,\n        enumerable: false,\n        configurable: true\n    }\n});\nObject.defineProperties(WebSocket, {\n    CONNECTING: staticPropertyDescriptors,\n    OPEN: staticPropertyDescriptors,\n    CLOSING: staticPropertyDescriptors,\n    CLOSED: staticPropertyDescriptors\n});\nwebidl.converters[\"sequence<DOMString>\"] = webidl.sequenceConverter(webidl.converters.DOMString);\nwebidl.converters[\"DOMString or sequence<DOMString>\"] = function(V) {\n    if (webidl.util.Type(V) === \"Object\" && Symbol.iterator in V) {\n        return webidl.converters[\"sequence<DOMString>\"](V);\n    }\n    return webidl.converters.DOMString(V);\n};\n// This implements the propsal made in https://github.com/whatwg/websockets/issues/42\nwebidl.converters.WebSocketInit = webidl.dictionaryConverter([\n    {\n        key: \"protocols\",\n        converter: webidl.converters[\"DOMString or sequence<DOMString>\"],\n        get defaultValue () {\n            return [];\n        }\n    },\n    {\n        key: \"dispatcher\",\n        converter: (V)=>V,\n        get defaultValue () {\n            return getGlobalDispatcher();\n        }\n    },\n    {\n        key: \"headers\",\n        converter: webidl.nullableConverter(webidl.converters.HeadersInit)\n    }\n]);\nwebidl.converters[\"DOMString or sequence<DOMString> or WebSocketInit\"] = function(V) {\n    if (webidl.util.Type(V) === \"Object\" && !(Symbol.iterator in V)) {\n        return webidl.converters.WebSocketInit(V);\n    }\n    return {\n        protocols: webidl.converters[\"DOMString or sequence<DOMString>\"](V)\n    };\n};\nwebidl.converters.WebSocketSendData = function(V) {\n    if (webidl.util.Type(V) === \"Object\") {\n        if (isBlobLike(V)) {\n            return webidl.converters.Blob(V, {\n                strict: false\n            });\n        }\n        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {\n            return webidl.converters.BufferSource(V);\n        }\n    }\n    return webidl.converters.USVString(V);\n};\nmodule.exports = {\n    WebSocket\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/undici/lib/websocket/websocket.js\n");

/***/ })

};
;